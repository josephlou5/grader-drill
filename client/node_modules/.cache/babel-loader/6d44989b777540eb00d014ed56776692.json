{"ast":null,"code":"var _jsxFileName = \"/Users/josephlou/Documents/Files/Princeton/grading/grader-drill-app/client/src/App/components/mcAnswerField.jsx\";\nimport React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport { preventEnter, resetValidId } from \"../shared\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MCAnswerField(props) {\n  const {\n    question\n  } = props;\n  const {\n    correct,\n    answer\n  } = question;\n\n  if (props.previewMode) {\n    return question.answerChoices.map((text, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-check\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"radio\",\n        className: \"form-check-input\",\n        disabled: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this));\n  } else if (props.editMode) {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [question.answerChoices.map((text, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group mb-2 has-validation\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group-text\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            className: \"form-check-input mt-0\",\n            name: \"correct-answer-choice\",\n            checked: index === correct,\n            onChange: () => {\n              resetValidId(\"question-edit-mc-correct\");\n              props.onSetCorrectAnswerChoice(index);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"form-control textarea\",\n          id: \"question-edit-mc-\" + index,\n          value: text,\n          placeholder: \"Answer Choice\",\n          onKeyDown: preventEnter,\n          onChange: event => props.onChangeAnswerChoice(index, event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group-text bg-danger\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn-close btn-close-white\",\n            onClick: () => props.onDeleteAnswerChoice(index)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"hidden\",\n          id: \"question-edit-mc-correct\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"invalid-feedback\",\n          children: \"Must set a correct answer choice.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"hidden\",\n          id: \"question-edit-mc\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"invalid-feedback\",\n          children: \"Must have at least one answer choice.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-success\",\n        onClick: () => {\n          resetValidId(\"question-edit-mc\");\n          props.onAddAnswerChoice();\n        },\n        children: \"Add Answer Choice\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this);\n  } else if (props.noChange) {\n    // grading view, so show correct and incorrect\n    // todo: use font awesome for icons?\n    // https://fontawesome.com/v5.15/how-to-use/on-the-web/using-with/react\n    // todo: the text changes color which is nice, but need a better indicator of the different choices\n    return question.answerChoices.map((text, index) => {\n      let components;\n\n      if (index === correct) {\n        components = {\n          p: ({\n            node,\n            ...props\n          }) => /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: \"green\"\n            },\n            ...props\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this)\n        };\n      } else if (index === answer) {\n        components = {\n          p: ({\n            node,\n            ...props\n          }) => /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: \"red\"\n            },\n            ...props\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }, this)\n        };\n      }\n\n      return /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n        components: components,\n        children: text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this);\n    });\n  } else {\n    return question.answerChoices.map((text, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-check\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"radio\",\n        className: \"form-check-input\",\n        name: \"answer\",\n        id: \"choice\" + index,\n        checked: index === answer,\n        onChange: () => props.onMCSelect(question, index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"form-check-label\",\n        htmlFor: \"choice\" + index,\n        children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this));\n  }\n}\n_c = MCAnswerField;\n\nvar _c;\n\n$RefreshReg$(_c, \"MCAnswerField\");","map":{"version":3,"sources":["/Users/josephlou/Documents/Files/Princeton/grading/grader-drill-app/client/src/App/components/mcAnswerField.jsx"],"names":["React","ReactMarkdown","preventEnter","resetValidId","MCAnswerField","props","question","correct","answer","previewMode","answerChoices","map","text","index","editMode","onSetCorrectAnswerChoice","event","onChangeAnswerChoice","target","value","onDeleteAnswerChoice","onAddAnswerChoice","noChange","components","p","node","color","onMCSelect"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport { preventEnter, resetValidId } from \"../shared\";\n\nexport default function MCAnswerField(props) {\n    const { question } = props;\n    const { correct, answer } = question;\n\n    if (props.previewMode) {\n        return question.answerChoices.map((text, index) => (\n            <div key={index} className=\"form-check\">\n                <input\n                    type=\"radio\"\n                    className=\"form-check-input\"\n                    disabled={true}\n                />\n                <ReactMarkdown>{text}</ReactMarkdown>\n            </div>\n        ));\n    } else if (props.editMode) {\n        return (\n            <React.Fragment>\n                {question.answerChoices.map((text, index) => (\n                    <div\n                        key={index}\n                        className=\"input-group mb-2 has-validation\"\n                    >\n                        <div className=\"input-group-text\">\n                            <input\n                                type=\"radio\"\n                                className=\"form-check-input mt-0\"\n                                name=\"correct-answer-choice\"\n                                checked={index === correct}\n                                onChange={() => {\n                                    resetValidId(\"question-edit-mc-correct\");\n                                    props.onSetCorrectAnswerChoice(index);\n                                }}\n                            />\n                        </div>\n                        <textarea\n                            className=\"form-control textarea\"\n                            id={\"question-edit-mc-\" + index}\n                            value={text}\n                            placeholder=\"Answer Choice\"\n                            onKeyDown={preventEnter}\n                            onChange={(event) =>\n                                props.onChangeAnswerChoice(\n                                    index,\n                                    event.target.value\n                                )\n                            }\n                        />\n                        <div className=\"input-group-text bg-danger\">\n                            <button\n                                type=\"button\"\n                                className=\"btn-close btn-close-white\"\n                                onClick={() =>\n                                    props.onDeleteAnswerChoice(index)\n                                }\n                            />\n                        </div>\n                    </div>\n                ))}\n                <div>\n                    <input type=\"hidden\" id=\"question-edit-mc-correct\" />\n                    <div className=\"invalid-feedback\">\n                        Must set a correct answer choice.\n                    </div>\n                </div>\n                <div>\n                    <input type=\"hidden\" id=\"question-edit-mc\" />\n                    <div className=\"invalid-feedback\">\n                        Must have at least one answer choice.\n                    </div>\n                </div>\n\n                <button\n                    type=\"button\"\n                    className=\"btn btn-success\"\n                    onClick={() => {\n                        resetValidId(\"question-edit-mc\");\n                        props.onAddAnswerChoice();\n                    }}\n                >\n                    Add Answer Choice\n                </button>\n            </React.Fragment>\n        );\n    } else if (props.noChange) {\n        // grading view, so show correct and incorrect\n        // todo: use font awesome for icons?\n        // https://fontawesome.com/v5.15/how-to-use/on-the-web/using-with/react\n        // todo: the text changes color which is nice, but need a better indicator of the different choices\n        return question.answerChoices.map((text, index) => {\n            let components;\n            if (index === correct) {\n                components = {\n                    p: ({ node, ...props }) => (\n                        <p style={{ color: \"green\" }} {...props} />\n                    ),\n                };\n            } else if (index === answer) {\n                components = {\n                    p: ({ node, ...props }) => (\n                        <p style={{ color: \"red\" }} {...props} />\n                    ),\n                };\n            }\n            return (\n                <ReactMarkdown key={index} components={components}>\n                    {text}\n                </ReactMarkdown>\n            );\n        });\n    } else {\n        return question.answerChoices.map((text, index) => (\n            <div key={index} className=\"form-check\">\n                <input\n                    type=\"radio\"\n                    className=\"form-check-input\"\n                    name=\"answer\"\n                    id={\"choice\" + index}\n                    checked={index === answer}\n                    onChange={() => props.onMCSelect(question, index)}\n                />\n                <label className=\"form-check-label\" htmlFor={\"choice\" + index}>\n                    <ReactMarkdown>{text}</ReactMarkdown>\n                </label>\n            </div>\n        ));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}