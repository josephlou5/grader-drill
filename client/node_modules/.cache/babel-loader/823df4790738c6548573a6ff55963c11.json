{"ast":null,"code":"var _jsxFileName = \"/Users/josephlou/Documents/Files/Princeton/grading/grader-drill-app/client/src/App/components/questionEditView.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\"; // import { withRouter } from \"react-router-dom\";\n\nimport { ResizeTextareas } from \"../shared\";\nimport { getQuestion, updateQuestion } from \"../api\";\nimport QuestionTextField from \"./questionTextField\";\nimport CodeField from \"./codeField\";\nimport AnswerField from \"./answerField\";\nimport RubricField from \"./rubricField\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass QuestionEditView2 extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleQuestionType = questionType => {\n      switch (questionType) {\n        case \"Comment\":\n          this.setState({\n            questionType,\n            hasCodeField: true,\n            canToggleCodeField: false,\n            hasAnswerField: true\n          });\n          break;\n\n        case \"Highlight\":\n          this.setState({\n            questionType,\n            hasCodeField: true,\n            canToggleCodeField: false,\n            hasAnswerField: false\n          });\n          break;\n\n        case \"Multiple Choice\":\n          this.setState({\n            questionType,\n            canToggleCodeField: true,\n            hasAnswerField: true\n          });\n          break;\n\n        default:\n          return;\n      }\n    };\n\n    this.handleTextChange = questionText => {\n      this.setState({\n        questionText\n      });\n    };\n\n    this.handleToggleCodeField = () => {\n      if (this.state.canToggleCodeField) {\n        this.setState({\n          hasCodeField: !this.state.hasCodeField\n        });\n      }\n    };\n\n    this.handleCodeChange = code => {\n      // see if any highlights were deleted\n      const lines = code.split(\"\\n\");\n      const numLines = lines.length;\n      const lineLengths = lines.map(line => line.length);\n      let removing = [];\n      const highlights = this.state.highlights.flatMap((h, i) => {\n        let highlight = { ...h\n        };\n        let {\n          startLine,\n          startChar,\n          endLine,\n          endChar\n        } = highlight;\n        if (startLine >= numLines) return [];\n\n        if (endLine >= numLines) {\n          endLine = numLines - 1;\n          endChar = lineLengths[endLine];\n        }\n\n        if (startLine === endLine) {\n          // highlight doesn't exist on this line anymore\n          if (startChar >= lineLengths[startLine]) {\n            removing.unshift(i);\n            return [];\n          } // the end of the highlight got cut off\n\n\n          if (endChar >= lineLengths[endLine]) {\n            highlight[\"endChar\"] = lineLengths[endLine];\n          }\n\n          return [highlight];\n        }\n\n        if (startChar >= lineLengths[startLine]) {\n          // go to start of next non-empty line\n          do {\n            startLine++;\n          } while (lineLengths[startLine] === 0);\n\n          if (startLine >= numLines) return [];\n          startChar = 0;\n        }\n\n        if (endChar > lineLengths[endLine]) {\n          // go to end of last non-empty line\n          while (lineLengths[endLine] === 0) {\n            endLine--;\n          }\n\n          if (endLine < 0) return [];\n          endChar = lineLengths[endLine];\n        }\n\n        if (startLine > endLine) return [];\n        Object.assign(highlight, {\n          startLine,\n          startChar,\n          endLine,\n          endChar\n        });\n        return [highlight];\n      });\n      this.setState({\n        code,\n        highlights\n      });\n    };\n\n    this.handleAddHighlight = (question, highlight) => {\n      let highlights = [...this.state.highlights];\n      highlights.push(highlight);\n      this.setState({\n        highlights\n      });\n    };\n\n    this.handleClearHighlights = () => {\n      this.setState({\n        highlights: []\n      });\n    };\n\n    this.handleChangeHighlightText = (index, text) => {\n      let highlights = [...this.state.highlights];\n      highlights[index][\"text\"] = text;\n      this.setState({\n        highlights\n      });\n    };\n\n    this.handleDeleteHighlight = (question, highlightIndex) => {\n      let highlights = [...this.state.highlights];\n      highlights.splice(highlightIndex, 1);\n      this.setState({\n        highlights\n      });\n    };\n\n    this.handleAddAnswerChoice = () => {\n      let answerChoices = [...this.state.answerChoices];\n      answerChoices.push(\"\");\n      this.setState({\n        answerChoices\n      });\n    };\n\n    this.handleChangeAnswerChoice = (index, answerChoice) => {\n      let answerChoices = [...this.state.answerChoices];\n      answerChoices[index] = answerChoice;\n      this.setState({\n        answerChoices\n      });\n    };\n\n    this.handleDeleteAnswerChoice = index => {\n      let answerChoices = [...this.state.answerChoices];\n      answerChoices.splice(index, 1);\n      let stateUpdate = {\n        answerChoices\n      };\n\n      if (index === this.state.correct) {\n        // deleting the correct choice, so no more correct choice\n        stateUpdate[\"correct\"] = null;\n      } else if (index < this.state.correct) {\n        // deleting one before the correct choice, so shift correct choice up\n        stateUpdate[\"correct\"] = this.state.correct - 1;\n      }\n\n      this.setState(stateUpdate);\n    };\n\n    this.handleSetCorrectAnswerChoice = index => {\n      this.setState({\n        correct: index\n      });\n    };\n\n    this.handleAddRubricItem = () => {\n      let rubric = [...this.state.rubric];\n      rubric.push({\n        points: 1,\n        text: \"\"\n      });\n      this.setState({\n        rubric\n      });\n    };\n\n    this.handleChangeRubricItemPoints = (index, points) => {\n      let rubric = [...this.state.rubric];\n      let rubricItem = { ...rubric[index]\n      };\n      let pointsNum = parseInt(points);\n\n      if (isNaN(pointsNum)) {\n        pointsNum = 0;\n      }\n\n      rubricItem[\"points\"] = pointsNum;\n      rubric[index] = rubricItem;\n      this.setState({\n        rubric\n      });\n    };\n\n    this.handleChangeRubricItemText = (index, text) => {\n      let rubric = [...this.state.rubric];\n      let rubricItem = { ...rubric[index]\n      };\n      rubricItem[\"text\"] = text;\n      rubric[index] = rubricItem;\n      this.setState({\n        rubric\n      });\n    };\n\n    this.handleDeleteRubricItem = index => {\n      let rubric = [...this.state.rubric];\n      rubric.splice(index, 1);\n      this.setState({\n        rubric\n      });\n    };\n\n    this.handleCancel = () => {\n      this.props.history.goBack();\n    };\n\n    this.validate = question => {\n      let formValid = true;\n\n      function setValid(elementId, isValid) {\n        document.getElementById(elementId).classList.toggle(\"is-invalid\", !isValid);\n        if (!isValid) formValid = false;\n      }\n\n      setValid(\"question-edit-text\", question.questionText.length > 0);\n\n      if (question.hasCodeField) {\n        setValid(\"question-edit-code\", question.code.length > 0);\n      }\n\n      if (question.questionType === \"Multiple Choice\") {\n        if (question.answerChoices.length === 0) {\n          setValid(\"question-edit-mc\", false);\n        } else {\n          if (question.correct == null) {\n            setValid(\"question-edit-mc-correct\", false);\n          }\n\n          question.answerChoices.forEach((text, index) => setValid(\"question-edit-mc-\" + index, text.length > 0));\n        }\n      } else {\n        if (question.rubric.length === 0) {\n          setValid(\"question-edit-rubric\", false);\n        } else {\n          question.rubric.forEach((item, index) => {\n            setValid(\"question-edit-rubric-points-\" + index, item.points && item.points !== 0);\n            setValid(\"question-edit-rubric-\" + index, item.text.length > 0);\n          });\n        }\n      }\n\n      return formValid;\n    };\n\n    this.handleSave = () => {\n      let question = {\n        id: this.state.id,\n        hasCodeField: this.state.hasCodeField,\n        hasAnswerField: this.state.hasAnswerField,\n        questionType: this.state.questionType,\n        questionText: this.state.questionText,\n        highlights: this.state.highlights\n      };\n\n      if (this.state.hasCodeField) {\n        question[\"code\"] = this.state.code;\n      }\n\n      switch (this.state.questionType) {\n        case \"Comment\":\n          question[\"answers\"] = this.state.highlights.map(() => \"\");\n        // fall through\n\n        case \"Highlight\":\n          question[\"rubric\"] = this.state.rubric;\n          break;\n\n        case \"Multiple Choice\":\n          Object.assign(question, {\n            answerChoices: this.state.answerChoices,\n            correct: this.state.correct\n          });\n          break;\n\n        default:\n          return;\n      }\n\n      if (!this.validate(question)) return;\n      updateQuestion(question);\n      this.props.history.push(\"/questions\");\n    };\n\n    this.state = {\n      hasCodeField: true,\n      canToggleCodeField: false,\n      hasAnswerField: true,\n      questionType: \"Comment\",\n      questionText: \"\",\n      code: \"\",\n      highlights: [],\n      answerChoices: [],\n      correct: null,\n      rubric: []\n    };\n\n    if (!props.newQuestion) {\n      this.state[\"needsQuestion\"] = true;\n    }\n  }\n\n  componentDidMount() {\n    if (!this.state.needsQuestion) return;\n    getQuestion(this.props.questionId, q => {\n      if (!q) {\n        this.setState({\n          invalidQuestion: true\n        });\n        return;\n      }\n\n      if (q.questionType === \"Multiple Choice\") {\n        q[\"canToggleCodeField\"] = true;\n      }\n\n      q[\"needsQuestion\"] = false;\n      this.setState(q);\n    });\n  }\n\n  render() {\n    if (this.state.needsQuestion) {\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Loading question...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 20\n      }, this);\n    } else if (this.state.invalidQuestion) {\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Invalid question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 20\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ResizeTextareas, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: this.props.newQuestion ? \"New Question\" : \"Edit Question\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Preview\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn-group\",\n        role: \"group\",\n        style: {\n          marginLeft: \"10px\"\n        },\n        children: [\"Comment\", \"Highlight\", \"Multiple Choice\"].map(questionType => {\n          const idFor = \"type-\" + questionType.toLowerCase();\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              className: \"btn-check\",\n              name: \"question-type\",\n              id: idFor,\n              checked: questionType === this.state.questionType,\n              onChange: () => this.handleQuestionType(questionType)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"btn btn-outline-primary\",\n              htmlFor: idFor,\n              children: questionType\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 37\n            }, this)]\n          }, questionType, true, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(QuestionTextField, {\n        editMode: true,\n        question: this.state,\n        onTextChange: this.handleTextChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 17\n      }, this), this.state.canToggleCodeField &&\n      /*#__PURE__*/\n      // todo: can change this into a toggle button instead of a checkbox\n      _jsxDEV(\"div\", {\n        className: \"form-check form-check-inline\",\n        style: {\n          marginLeft: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          className: \"form-check-input\",\n          id: \"hasCodeField\",\n          defaultChecked: this.state.hasCodeField,\n          onChange: this.handleToggleCodeField\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form-check-label\",\n          htmlFor: \"hasCodeField\",\n          children: \"Include code field\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 21\n      }, this), this.state.hasCodeField && /*#__PURE__*/_jsxDEV(CodeField, {\n        editMode: true,\n        question: this.state,\n        onCodeChange: this.handleCodeChange,\n        onAddHighlight: this.handleAddHighlight,\n        onDeleteHighlight: this.handleDeleteHighlight,\n        onClearHighlights: this.handleClearHighlights\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 21\n      }, this), this.state.hasAnswerField && /*#__PURE__*/_jsxDEV(AnswerField, {\n        editMode: true,\n        question: this.state,\n        onClearHighlights: this.handleClearHighlights,\n        onChangeHighlightText: this.handleChangeHighlightText,\n        onDeleteHighlight: this.handleDeleteHighlight,\n        onAddAnswerChoice: this.handleAddAnswerChoice,\n        onChangeAnswerChoice: this.handleChangeAnswerChoice,\n        onDeleteAnswerChoice: this.handleDeleteAnswerChoice,\n        onSetCorrectAnswerChoice: this.handleSetCorrectAnswerChoice\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 21\n      }, this), this.state.questionType !== \"Multiple Choice\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: /*#__PURE__*/_jsxDEV(RubricField, {\n            editMode: true,\n            question: this.state,\n            onAddRubricItem: this.handleAddRubricItem,\n            onChangeRubricItemPoints: this.handleChangeRubricItemPoints,\n            onChangeRubricItemText: this.handleChangeRubricItemText,\n            onDeleteRubricItem: this.handleDeleteRubricItem\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: /*#__PURE__*/_jsxDEV(RubricField, {\n            previewMode: true,\n            question: this.state\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-danger m-2\",\n          onClick: this.handleCancel,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-success m-2\",\n          onClick: this.handleSave,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 13\n    }, this);\n  }\n\n} // export default withRouter(QuestionEditView);\n\n\nexport default function QuestionEditView(props) {\n  _s();\n\n  const [needsQuestion, setNeedsQuestion] = useState(!props.newQuestion);\n  const [question, setQuestion] = useState({\n    hasCodeField: true,\n    hasAnswerField: true,\n    questionType: \"Comment\",\n    questionText: \"\",\n    code: \"\",\n    highlights: [],\n    answerChoices: [],\n    correct: null,\n    rubric: []\n  });\n  const [canToggleCodeField, setToggleCodeField] = useState(false);\n  const history = useHistory();\n\n  function updateQuestion(updates) {\n    setQuestion({ ...question,\n      ...updates\n    });\n  }\n\n  useEffect(() => {\n    if (!needsQuestion) return;\n    getQuestion(props.questionId, q => {\n      setNeedsQuestion(false);\n      setQuestion(q);\n\n      if (q && q.questionType === \"Multiple Choice\") {\n        setToggleCodeField(true);\n      }\n    });\n  });\n\n  if (needsQuestion) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading question...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 505,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (!question) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Invalid question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 509,\n      columnNumber: 16\n    }, this);\n  } // event handlers\n\n\n  function handleQuestionType(questionType) {\n    switch (questionType) {\n      case \"Comment\":\n        setToggleCodeField(false);\n        updateQuestion({\n          questionType,\n          hasCodeField: true,\n          hasAnswerField: true\n        });\n        break;\n\n      case \"Highlight\":\n        setToggleCodeField(false);\n        updateQuestion({\n          questionType,\n          hasCodeField: true,\n          hasAnswerField: false\n        });\n        break;\n\n      case \"Multiple Choice\":\n        setToggleCodeField(true);\n        updateQuestion({\n          questionType,\n          hasAnswerField: true\n        });\n        break;\n\n      default:\n        return;\n    }\n  }\n\n  function handleTextChange(questionText) {\n    updateQuestion({\n      questionText\n    });\n  }\n\n  function handleToggleCodeField() {\n    setToggleCodeField(!canToggleCodeField);\n  }\n\n  function handleCodeChange(code) {\n    // see if any highlights were deleted\n    const lines = code.split(\"\\n\");\n    const numLines = lines.length;\n    const lineLengths = lines.map(line => line.length);\n    let removing = [];\n    const highlights = question.highlights.flatMap((h, i) => {\n      let highlight = { ...h\n      };\n      let {\n        startLine,\n        startChar,\n        endLine,\n        endChar\n      } = highlight;\n      if (startLine >= numLines) return [];\n\n      if (endLine >= numLines) {\n        endLine = numLines - 1;\n        endChar = lineLengths[endLine];\n      }\n\n      if (startLine === endLine) {\n        // highlight doesn't exist on this line anymore\n        if (startChar >= lineLengths[startLine]) {\n          removing.unshift(i);\n          return [];\n        } // the end of the highlight got cut off\n\n\n        if (endChar >= lineLengths[endLine]) {\n          highlight[\"endChar\"] = lineLengths[endLine];\n        }\n\n        return [highlight];\n      }\n\n      if (startChar >= lineLengths[startLine]) {\n        // go to start of next non-empty line\n        do {\n          startLine++;\n        } while (lineLengths[startLine] === 0);\n\n        if (startLine >= numLines) return [];\n        startChar = 0;\n      }\n\n      if (endChar > lineLengths[endLine]) {\n        // go to end of last non-empty line\n        while (lineLengths[endLine] === 0) {\n          endLine--;\n        }\n\n        if (endLine < 0) return [];\n        endChar = lineLengths[endLine];\n      }\n\n      if (startLine > endLine) return [];\n      Object.assign(highlight, {\n        startLine,\n        startChar,\n        endLine,\n        endChar\n      });\n      return [highlight];\n    });\n    updateQuestion({\n      code,\n      highlights\n    });\n  }\n\n  function handleAddHighlight(question, highlight) {\n    let highlights = [...question.highlights];\n    highlights.push(highlight);\n    updateQuestion({\n      highlights\n    });\n  }\n\n  function handleClearHighlights() {\n    updateQuestion({\n      highlights: []\n    });\n  }\n\n  function handleChangeHighlightText(index, text) {\n    let highlights = [...question.highlights];\n    highlights[index] = { ...highlights[index],\n      text\n    };\n    updateQuestion({\n      highlights\n    });\n  }\n\n  function handleDeleteHighlight(question, highlightIndex) {\n    let highlights = [...question.highlights];\n    highlights.splice(highlightIndex, 1);\n    updateQuestion({\n      highlights\n    });\n  }\n\n  function handleAddAnswerChoice() {\n    let answerChoices = [...question.answerChoices];\n    answerChoices.push(\"\");\n    updateQuestion({\n      answerChoices\n    });\n  }\n\n  function handleChangeAnswerChoice(index, answerChoice) {\n    let answerChoices = [...question.answerChoices];\n    answerChoices[index] = answerChoice;\n    updateQuestion({\n      answerChoices\n    });\n  }\n\n  function handleDeleteAnswerChoice(index) {\n    let answerChoices = [...question.answerChoices];\n    answerChoices.splice(index, 1);\n    let correct = question.correct;\n\n    if (index === correct) {\n      // deleting the correct choice, so no more correct choice\n      correct = null;\n    } else if (index < correct) {\n      // deleting one before the correct choice, so shift correct choice up\n      correct--;\n    }\n\n    updateQuestion({\n      answerChoices,\n      correct\n    });\n  }\n\n  function handleSetCorrectAnswerChoice(index) {\n    updateQuestion({\n      correct: index\n    });\n  }\n\n  function handleAddRubricItem() {\n    let rubric = [...question.rubric];\n    rubric.push({\n      points: 1,\n      text: \"\"\n    });\n    updateQuestion({\n      rubric\n    });\n  }\n\n  function handleChangeRubricItemPoints(index, points) {\n    let rubric = [...question.rubric];\n    let pointsNum = parseInt(points);\n\n    if (isNaN(pointsNum)) {\n      pointsNum = 0;\n    }\n\n    rubric[index] = { ...rubric[index],\n      points: pointsNum\n    };\n    updateQuestion({\n      rubric\n    });\n  }\n\n  function handleChangeRubricItemText(index, text) {\n    let rubric = [...question.rubric];\n    let rubricItem = { ...rubric[index]\n    };\n    rubricItem[\"text\"] = text;\n    rubric[index] = rubricItem;\n    updateQuestion({\n      rubric\n    });\n  }\n\n  function handleDeleteRubricItem(index) {\n    let rubric = [...question.rubric];\n    rubric.splice(index, 1);\n    updateQuestion({\n      rubric\n    });\n  }\n\n  function handleCancel() {\n    history.goBack();\n  }\n\n  function validate(q) {\n    let formValid = true;\n\n    function setValid(elementId, isValid) {\n      document.getElementById(elementId).classList.toggle(\"is-invalid\", !isValid);\n      if (!isValid) formValid = false;\n    }\n\n    setValid(\"question-edit-text\", q.questionText.length > 0);\n\n    if (q.hasCodeField) {\n      setValid(\"question-edit-code\", q.code.length > 0);\n    }\n\n    if (q.questionType === \"Multiple Choice\") {\n      if (q.answerChoices.length === 0) {\n        setValid(\"question-edit-mc\", false);\n      } else {\n        if (q.correct == null) {\n          setValid(\"question-edit-mc-correct\", false);\n        }\n\n        q.answerChoices.forEach((text, index) => setValid(\"question-edit-mc-\" + index, text.length > 0));\n      }\n    } else {\n      if (q.rubric.length === 0) {\n        setValid(\"question-edit-rubric\", false);\n      } else {\n        q.rubric.forEach((item, index) => {\n          setValid(\"question-edit-rubric-points-\" + index, item.points && item.points !== 0);\n          setValid(\"question-edit-rubric-\" + index, item.text.length > 0);\n        });\n      }\n    }\n\n    return formValid;\n  }\n\n  function handleSave() {\n    let newQuestion = {\n      id: this.state.id,\n      hasCodeField: this.state.hasCodeField,\n      hasAnswerField: this.state.hasAnswerField,\n      questionType: this.state.questionType,\n      questionText: this.state.questionText,\n      highlights: this.state.highlights\n    };\n\n    if (this.state.hasCodeField) {\n      newQuestion[\"code\"] = this.state.code;\n    }\n\n    switch (this.state.questionType) {\n      case \"Comment\":\n        newQuestion[\"answers\"] = this.state.highlights.map(() => \"\");\n      // fall through\n\n      case \"Highlight\":\n        newQuestion[\"rubric\"] = this.state.rubric;\n        break;\n\n      case \"Multiple Choice\":\n        Object.assign(newQuestion, {\n          answerChoices: this.state.answerChoices,\n          correct: this.state.correct\n        });\n        break;\n\n      default:\n        return;\n    }\n\n    if (!validate(newQuestion)) return;\n    updateQuestion(newQuestion);\n    history.push(\"/questions\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ResizeTextareas, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 776,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: props.newQuestion ? \"New Question\" : \"Edit Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 780,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 779,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Preview\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 785,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 784,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 778,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn-group\",\n      role: \"group\",\n      style: {\n        marginLeft: \"10px\"\n      },\n      children: [\"Comment\", \"Highlight\", \"Multiple Choice\"].map(questionType => {\n        const idFor = \"type-\" + questionType.toLowerCase();\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            className: \"btn-check\",\n            name: \"question-type\",\n            id: idFor,\n            checked: questionType === question.questionType,\n            onChange: () => handleQuestionType(questionType)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 799,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"btn btn-outline-primary\",\n            htmlFor: idFor,\n            children: questionType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 811,\n            columnNumber: 33\n          }, this)]\n        }, questionType, true, {\n          fileName: _jsxFileName,\n          lineNumber: 798,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 789,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(QuestionTextField, {\n      editMode: true,\n      question: question,\n      onTextChange: this.handleTextChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 823,\n      columnNumber: 13\n    }, this), canToggleCodeField &&\n    /*#__PURE__*/\n    // todo: can change this into a toggle button instead of a checkbox\n    _jsxDEV(\"div\", {\n      className: \"form-check form-check-inline\",\n      style: {\n        marginLeft: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        className: \"form-check-input\",\n        id: \"hasCodeField\",\n        defaultChecked: question.hasCodeField,\n        onChange: handleToggleCodeField\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 835,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"form-check-label\",\n        htmlFor: \"hasCodeField\",\n        children: \"Include code field\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 842,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 831,\n      columnNumber: 17\n    }, this), question.hasCodeField && /*#__PURE__*/_jsxDEV(CodeField, {\n      editMode: true,\n      question: question,\n      onCodeChange: this.handleCodeChange,\n      onAddHighlight: this.handleAddHighlight,\n      onDeleteHighlight: this.handleDeleteHighlight,\n      onClearHighlights: this.handleClearHighlights\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 848,\n      columnNumber: 17\n    }, this), question.hasAnswerField && /*#__PURE__*/_jsxDEV(AnswerField, {\n      editMode: true,\n      question: question,\n      onClearHighlights: this.handleClearHighlights,\n      onChangeHighlightText: this.handleChangeHighlightText,\n      onDeleteHighlight: this.handleDeleteHighlight,\n      onAddAnswerChoice: this.handleAddAnswerChoice,\n      onChangeAnswerChoice: this.handleChangeAnswerChoice,\n      onDeleteAnswerChoice: this.handleDeleteAnswerChoice,\n      onSetCorrectAnswerChoice: this.handleSetCorrectAnswerChoice\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 859,\n      columnNumber: 17\n    }, this), question.questionType !== \"Multiple Choice\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: /*#__PURE__*/_jsxDEV(RubricField, {\n          editMode: true,\n          question: question,\n          onAddRubricItem: this.handleAddRubricItem,\n          onChangeRubricItemPoints: this.handleChangeRubricItemPoints,\n          onChangeRubricItemText: this.handleChangeRubricItemText,\n          onDeleteRubricItem: handleDeleteRubricItem\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 875,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 874,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: /*#__PURE__*/_jsxDEV(RubricField, {\n          previewMode: true,\n          question: question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 889,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 888,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 873,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-danger m-2\",\n        onClick: handleCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 895,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-success m-2\",\n        onClick: handleSave,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 902,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 894,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 775,\n    columnNumber: 9\n  }, this);\n}\n\n_s(QuestionEditView, \"ypCAeN/qHx1lRMx/AyfPNJQr9NQ=\", false, function () {\n  return [useHistory];\n});\n\n_c = QuestionEditView;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionEditView\");","map":{"version":3,"sources":["/Users/josephlou/Documents/Files/Princeton/grading/grader-drill-app/client/src/App/components/questionEditView.jsx"],"names":["React","useState","useEffect","useHistory","ResizeTextareas","getQuestion","updateQuestion","QuestionTextField","CodeField","AnswerField","RubricField","QuestionEditView2","Component","constructor","props","handleQuestionType","questionType","setState","hasCodeField","canToggleCodeField","hasAnswerField","handleTextChange","questionText","handleToggleCodeField","state","handleCodeChange","code","lines","split","numLines","length","lineLengths","map","line","removing","highlights","flatMap","h","i","highlight","startLine","startChar","endLine","endChar","unshift","Object","assign","handleAddHighlight","question","push","handleClearHighlights","handleChangeHighlightText","index","text","handleDeleteHighlight","highlightIndex","splice","handleAddAnswerChoice","answerChoices","handleChangeAnswerChoice","answerChoice","handleDeleteAnswerChoice","stateUpdate","correct","handleSetCorrectAnswerChoice","handleAddRubricItem","rubric","points","handleChangeRubricItemPoints","rubricItem","pointsNum","parseInt","isNaN","handleChangeRubricItemText","handleDeleteRubricItem","handleCancel","history","goBack","validate","formValid","setValid","elementId","isValid","document","getElementById","classList","toggle","forEach","item","handleSave","id","newQuestion","componentDidMount","needsQuestion","questionId","q","invalidQuestion","render","marginLeft","idFor","toLowerCase","QuestionEditView","setNeedsQuestion","setQuestion","setToggleCodeField","updates"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n// import { withRouter } from \"react-router-dom\";\nimport { ResizeTextareas } from \"../shared\";\nimport { getQuestion, updateQuestion } from \"../api\";\nimport QuestionTextField from \"./questionTextField\";\nimport CodeField from \"./codeField\";\nimport AnswerField from \"./answerField\";\nimport RubricField from \"./rubricField\";\n\nclass QuestionEditView2 extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasCodeField: true,\n            canToggleCodeField: false,\n            hasAnswerField: true,\n            questionType: \"Comment\",\n            questionText: \"\",\n            code: \"\",\n            highlights: [],\n            answerChoices: [],\n            correct: null,\n            rubric: [],\n        };\n        if (!props.newQuestion) {\n            this.state[\"needsQuestion\"] = true;\n        }\n    }\n\n    componentDidMount() {\n        if (!this.state.needsQuestion) return;\n        getQuestion(this.props.questionId, (q) => {\n            if (!q) {\n                this.setState({ invalidQuestion: true });\n                return;\n            }\n            if (q.questionType === \"Multiple Choice\") {\n                q[\"canToggleCodeField\"] = true;\n            }\n            q[\"needsQuestion\"] = false;\n            this.setState(q);\n        });\n    }\n\n    handleQuestionType = (questionType) => {\n        switch (questionType) {\n            case \"Comment\":\n                this.setState({\n                    questionType,\n                    hasCodeField: true,\n                    canToggleCodeField: false,\n                    hasAnswerField: true,\n                });\n                break;\n            case \"Highlight\":\n                this.setState({\n                    questionType,\n                    hasCodeField: true,\n                    canToggleCodeField: false,\n                    hasAnswerField: false,\n                });\n                break;\n            case \"Multiple Choice\":\n                this.setState({\n                    questionType,\n                    canToggleCodeField: true,\n                    hasAnswerField: true,\n                });\n                break;\n            default:\n                return;\n        }\n    };\n\n    handleTextChange = (questionText) => {\n        this.setState({ questionText });\n    };\n\n    handleToggleCodeField = () => {\n        if (this.state.canToggleCodeField) {\n            this.setState({ hasCodeField: !this.state.hasCodeField });\n        }\n    };\n\n    handleCodeChange = (code) => {\n        // see if any highlights were deleted\n        const lines = code.split(\"\\n\");\n        const numLines = lines.length;\n        const lineLengths = lines.map((line) => line.length);\n\n        let removing = [];\n        const highlights = this.state.highlights.flatMap((h, i) => {\n            let highlight = { ...h };\n            let { startLine, startChar, endLine, endChar } = highlight;\n            if (startLine >= numLines) return [];\n            if (endLine >= numLines) {\n                endLine = numLines - 1;\n                endChar = lineLengths[endLine];\n            }\n            if (startLine === endLine) {\n                // highlight doesn't exist on this line anymore\n                if (startChar >= lineLengths[startLine]) {\n                    removing.unshift(i);\n                    return [];\n                }\n                // the end of the highlight got cut off\n                if (endChar >= lineLengths[endLine]) {\n                    highlight[\"endChar\"] = lineLengths[endLine];\n                }\n                return [highlight];\n            }\n            if (startChar >= lineLengths[startLine]) {\n                // go to start of next non-empty line\n                do {\n                    startLine++;\n                } while (lineLengths[startLine] === 0);\n                if (startLine >= numLines) return [];\n                startChar = 0;\n            }\n            if (endChar > lineLengths[endLine]) {\n                // go to end of last non-empty line\n                while (lineLengths[endLine] === 0) {\n                    endLine--;\n                }\n                if (endLine < 0) return [];\n                endChar = lineLengths[endLine];\n            }\n            if (startLine > endLine) return [];\n            Object.assign(highlight, {\n                startLine,\n                startChar,\n                endLine,\n                endChar,\n            });\n            return [highlight];\n        });\n\n        this.setState({ code, highlights });\n    };\n\n    handleAddHighlight = (question, highlight) => {\n        let highlights = [...this.state.highlights];\n        highlights.push(highlight);\n        this.setState({ highlights });\n    };\n\n    handleClearHighlights = () => {\n        this.setState({ highlights: [] });\n    };\n\n    handleChangeHighlightText = (index, text) => {\n        let highlights = [...this.state.highlights];\n        highlights[index][\"text\"] = text;\n        this.setState({ highlights });\n    };\n\n    handleDeleteHighlight = (question, highlightIndex) => {\n        let highlights = [...this.state.highlights];\n        highlights.splice(highlightIndex, 1);\n        this.setState({ highlights });\n    };\n\n    handleAddAnswerChoice = () => {\n        let answerChoices = [...this.state.answerChoices];\n        answerChoices.push(\"\");\n        this.setState({ answerChoices });\n    };\n\n    handleChangeAnswerChoice = (index, answerChoice) => {\n        let answerChoices = [...this.state.answerChoices];\n        answerChoices[index] = answerChoice;\n        this.setState({ answerChoices });\n    };\n\n    handleDeleteAnswerChoice = (index) => {\n        let answerChoices = [...this.state.answerChoices];\n        answerChoices.splice(index, 1);\n        let stateUpdate = { answerChoices };\n        if (index === this.state.correct) {\n            // deleting the correct choice, so no more correct choice\n            stateUpdate[\"correct\"] = null;\n        } else if (index < this.state.correct) {\n            // deleting one before the correct choice, so shift correct choice up\n            stateUpdate[\"correct\"] = this.state.correct - 1;\n        }\n        this.setState(stateUpdate);\n    };\n\n    handleSetCorrectAnswerChoice = (index) => {\n        this.setState({ correct: index });\n    };\n\n    handleAddRubricItem = () => {\n        let rubric = [...this.state.rubric];\n        rubric.push({ points: 1, text: \"\" });\n        this.setState({ rubric });\n    };\n\n    handleChangeRubricItemPoints = (index, points) => {\n        let rubric = [...this.state.rubric];\n        let rubricItem = { ...rubric[index] };\n        let pointsNum = parseInt(points);\n        if (isNaN(pointsNum)) {\n            pointsNum = 0;\n        }\n        rubricItem[\"points\"] = pointsNum;\n        rubric[index] = rubricItem;\n        this.setState({ rubric });\n    };\n\n    handleChangeRubricItemText = (index, text) => {\n        let rubric = [...this.state.rubric];\n        let rubricItem = { ...rubric[index] };\n        rubricItem[\"text\"] = text;\n        rubric[index] = rubricItem;\n        this.setState({ rubric });\n    };\n\n    handleDeleteRubricItem = (index) => {\n        let rubric = [...this.state.rubric];\n        rubric.splice(index, 1);\n        this.setState({ rubric });\n    };\n\n    handleCancel = () => {\n        this.props.history.goBack();\n    };\n\n    validate = (question) => {\n        let formValid = true;\n\n        function setValid(elementId, isValid) {\n            document\n                .getElementById(elementId)\n                .classList.toggle(\"is-invalid\", !isValid);\n            if (!isValid) formValid = false;\n        }\n\n        setValid(\"question-edit-text\", question.questionText.length > 0);\n        if (question.hasCodeField) {\n            setValid(\"question-edit-code\", question.code.length > 0);\n        }\n        if (question.questionType === \"Multiple Choice\") {\n            if (question.answerChoices.length === 0) {\n                setValid(\"question-edit-mc\", false);\n            } else {\n                if (question.correct == null) {\n                    setValid(\"question-edit-mc-correct\", false);\n                }\n                question.answerChoices.forEach((text, index) =>\n                    setValid(\"question-edit-mc-\" + index, text.length > 0)\n                );\n            }\n        } else {\n            if (question.rubric.length === 0) {\n                setValid(\"question-edit-rubric\", false);\n            } else {\n                question.rubric.forEach((item, index) => {\n                    setValid(\n                        \"question-edit-rubric-points-\" + index,\n                        item.points && item.points !== 0\n                    );\n                    setValid(\n                        \"question-edit-rubric-\" + index,\n                        item.text.length > 0\n                    );\n                });\n            }\n        }\n\n        return formValid;\n    };\n\n    handleSave = () => {\n        let question = {\n            id: this.state.id,\n            hasCodeField: this.state.hasCodeField,\n            hasAnswerField: this.state.hasAnswerField,\n            questionType: this.state.questionType,\n            questionText: this.state.questionText,\n            highlights: this.state.highlights,\n        };\n        if (this.state.hasCodeField) {\n            question[\"code\"] = this.state.code;\n        }\n        switch (this.state.questionType) {\n            case \"Comment\":\n                question[\"answers\"] = this.state.highlights.map(() => \"\");\n            // fall through\n            case \"Highlight\":\n                question[\"rubric\"] = this.state.rubric;\n                break;\n            case \"Multiple Choice\":\n                Object.assign(question, {\n                    answerChoices: this.state.answerChoices,\n                    correct: this.state.correct,\n                });\n                break;\n            default:\n                return;\n        }\n\n        if (!this.validate(question)) return;\n\n        updateQuestion(question);\n        this.props.history.push(\"/questions\");\n    };\n\n    render() {\n        if (this.state.needsQuestion) {\n            return <h1>Loading question...</h1>;\n        } else if (this.state.invalidQuestion) {\n            return <h1>Invalid question</h1>;\n        }\n        return (\n            <React.Fragment>\n                <ResizeTextareas />\n\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <h1>\n                            {this.props.newQuestion\n                                ? \"New Question\"\n                                : \"Edit Question\"}\n                        </h1>\n                    </div>\n                    <div className=\"col\">\n                        <h1>Preview</h1>\n                    </div>\n                </div>\n\n                <div\n                    className=\"btn-group\"\n                    role=\"group\"\n                    style={{ marginLeft: \"10px\" }}\n                >\n                    {[\"Comment\", \"Highlight\", \"Multiple Choice\"].map(\n                        (questionType) => {\n                            const idFor = \"type-\" + questionType.toLowerCase();\n                            return (\n                                <React.Fragment key={questionType}>\n                                    <input\n                                        type=\"radio\"\n                                        className=\"btn-check\"\n                                        name=\"question-type\"\n                                        id={idFor}\n                                        checked={\n                                            questionType ===\n                                            this.state.questionType\n                                        }\n                                        onChange={() =>\n                                            this.handleQuestionType(\n                                                questionType\n                                            )\n                                        }\n                                    />\n                                    <label\n                                        className=\"btn btn-outline-primary\"\n                                        htmlFor={idFor}\n                                    >\n                                        {questionType}\n                                    </label>\n                                </React.Fragment>\n                            );\n                        }\n                    )}\n                </div>\n\n                <QuestionTextField\n                    editMode={true}\n                    question={this.state}\n                    onTextChange={this.handleTextChange}\n                />\n\n                {this.state.canToggleCodeField && (\n                    // todo: can change this into a toggle button instead of a checkbox\n                    <div\n                        className=\"form-check form-check-inline\"\n                        style={{ marginLeft: \"10px\" }}\n                    >\n                        <input\n                            type=\"checkbox\"\n                            className=\"form-check-input\"\n                            id=\"hasCodeField\"\n                            defaultChecked={this.state.hasCodeField}\n                            onChange={this.handleToggleCodeField}\n                        />\n                        <label\n                            className=\"form-check-label\"\n                            htmlFor=\"hasCodeField\"\n                        >\n                            Include code field\n                        </label>\n                    </div>\n                )}\n                {this.state.hasCodeField && (\n                    <CodeField\n                        editMode={true}\n                        question={this.state}\n                        onCodeChange={this.handleCodeChange}\n                        onAddHighlight={this.handleAddHighlight}\n                        onDeleteHighlight={this.handleDeleteHighlight}\n                        onClearHighlights={this.handleClearHighlights}\n                    />\n                )}\n\n                {this.state.hasAnswerField && (\n                    <AnswerField\n                        editMode={true}\n                        question={this.state}\n                        onClearHighlights={this.handleClearHighlights}\n                        onChangeHighlightText={this.handleChangeHighlightText}\n                        onDeleteHighlight={this.handleDeleteHighlight}\n                        onAddAnswerChoice={this.handleAddAnswerChoice}\n                        onChangeAnswerChoice={this.handleChangeAnswerChoice}\n                        onDeleteAnswerChoice={this.handleDeleteAnswerChoice}\n                        onSetCorrectAnswerChoice={\n                            this.handleSetCorrectAnswerChoice\n                        }\n                    />\n                )}\n\n                {this.state.questionType !== \"Multiple Choice\" && (\n                    <div className=\"row\">\n                        <div className=\"col\">\n                            <RubricField\n                                editMode={true}\n                                question={this.state}\n                                onAddRubricItem={this.handleAddRubricItem}\n                                onChangeRubricItemPoints={\n                                    this.handleChangeRubricItemPoints\n                                }\n                                onChangeRubricItemText={\n                                    this.handleChangeRubricItemText\n                                }\n                                onDeleteRubricItem={this.handleDeleteRubricItem}\n                            />\n                        </div>\n                        <div className=\"col\">\n                            <RubricField\n                                previewMode={true}\n                                question={this.state}\n                            />\n                        </div>\n                    </div>\n                )}\n\n                <div>\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-danger m-2\"\n                        onClick={this.handleCancel}\n                    >\n                        Cancel\n                    </button>\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-success m-2\"\n                        onClick={this.handleSave}\n                    >\n                        Save\n                    </button>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\n// export default withRouter(QuestionEditView);\n\nexport default function QuestionEditView(props) {\n    const [needsQuestion, setNeedsQuestion] = useState(!props.newQuestion);\n    const [question, setQuestion] = useState({\n        hasCodeField: true,\n        hasAnswerField: true,\n        questionType: \"Comment\",\n        questionText: \"\",\n        code: \"\",\n        highlights: [],\n        answerChoices: [],\n        correct: null,\n        rubric: [],\n    });\n    const [canToggleCodeField, setToggleCodeField] = useState(false);\n\n    const history = useHistory();\n\n    function updateQuestion(updates) {\n        setQuestion({ ...question, ...updates });\n    }\n\n    useEffect(() => {\n        if (!needsQuestion) return;\n        getQuestion(props.questionId, (q) => {\n            setNeedsQuestion(false);\n            setQuestion(q);\n            if (q && q.questionType === \"Multiple Choice\") {\n                setToggleCodeField(true);\n            }\n        });\n    });\n\n    if (needsQuestion) {\n        return <h1>Loading question...</h1>;\n    }\n\n    if (!question) {\n        return <h1>Invalid question</h1>;\n    }\n\n    // event handlers\n\n    function handleQuestionType(questionType) {\n        switch (questionType) {\n            case \"Comment\":\n                setToggleCodeField(false);\n                updateQuestion({\n                    questionType,\n                    hasCodeField: true,\n                    hasAnswerField: true,\n                });\n                break;\n            case \"Highlight\":\n                setToggleCodeField(false);\n                updateQuestion({\n                    questionType,\n                    hasCodeField: true,\n                    hasAnswerField: false,\n                });\n                break;\n            case \"Multiple Choice\":\n                setToggleCodeField(true);\n                updateQuestion({\n                    questionType,\n                    hasAnswerField: true,\n                });\n                break;\n            default:\n                return;\n        }\n    }\n\n    function handleTextChange(questionText) {\n        updateQuestion({ questionText });\n    }\n\n    function handleToggleCodeField() {\n        setToggleCodeField(!canToggleCodeField);\n    }\n\n    function handleCodeChange(code) {\n        // see if any highlights were deleted\n        const lines = code.split(\"\\n\");\n        const numLines = lines.length;\n        const lineLengths = lines.map((line) => line.length);\n\n        let removing = [];\n        const highlights = question.highlights.flatMap((h, i) => {\n            let highlight = { ...h };\n            let { startLine, startChar, endLine, endChar } = highlight;\n            if (startLine >= numLines) return [];\n            if (endLine >= numLines) {\n                endLine = numLines - 1;\n                endChar = lineLengths[endLine];\n            }\n            if (startLine === endLine) {\n                // highlight doesn't exist on this line anymore\n                if (startChar >= lineLengths[startLine]) {\n                    removing.unshift(i);\n                    return [];\n                }\n                // the end of the highlight got cut off\n                if (endChar >= lineLengths[endLine]) {\n                    highlight[\"endChar\"] = lineLengths[endLine];\n                }\n                return [highlight];\n            }\n            if (startChar >= lineLengths[startLine]) {\n                // go to start of next non-empty line\n                do {\n                    startLine++;\n                } while (lineLengths[startLine] === 0);\n                if (startLine >= numLines) return [];\n                startChar = 0;\n            }\n            if (endChar > lineLengths[endLine]) {\n                // go to end of last non-empty line\n                while (lineLengths[endLine] === 0) {\n                    endLine--;\n                }\n                if (endLine < 0) return [];\n                endChar = lineLengths[endLine];\n            }\n            if (startLine > endLine) return [];\n            Object.assign(highlight, {\n                startLine,\n                startChar,\n                endLine,\n                endChar,\n            });\n            return [highlight];\n        });\n\n        updateQuestion({ code, highlights });\n    }\n\n    function handleAddHighlight(question, highlight) {\n        let highlights = [...question.highlights];\n        highlights.push(highlight);\n        updateQuestion({ highlights });\n    }\n\n    function handleClearHighlights() {\n        updateQuestion({ highlights: [] });\n    }\n\n    function handleChangeHighlightText(index, text) {\n        let highlights = [...question.highlights];\n        highlights[index] = { ...highlights[index], text };\n        updateQuestion({ highlights });\n    }\n\n    function handleDeleteHighlight(question, highlightIndex) {\n        let highlights = [...question.highlights];\n        highlights.splice(highlightIndex, 1);\n        updateQuestion({ highlights });\n    }\n\n    function handleAddAnswerChoice() {\n        let answerChoices = [...question.answerChoices];\n        answerChoices.push(\"\");\n        updateQuestion({ answerChoices });\n    }\n\n    function handleChangeAnswerChoice(index, answerChoice) {\n        let answerChoices = [...question.answerChoices];\n        answerChoices[index] = answerChoice;\n        updateQuestion({ answerChoices });\n    }\n\n    function handleDeleteAnswerChoice(index) {\n        let answerChoices = [...question.answerChoices];\n        answerChoices.splice(index, 1);\n        let correct = question.correct;\n        if (index === correct) {\n            // deleting the correct choice, so no more correct choice\n            correct = null;\n        } else if (index < correct) {\n            // deleting one before the correct choice, so shift correct choice up\n            correct--;\n        }\n        updateQuestion({ answerChoices, correct });\n    }\n\n    function handleSetCorrectAnswerChoice(index) {\n        updateQuestion({ correct: index });\n    }\n\n    function handleAddRubricItem() {\n        let rubric = [...question.rubric];\n        rubric.push({ points: 1, text: \"\" });\n        updateQuestion({ rubric });\n    }\n\n    function handleChangeRubricItemPoints(index, points) {\n        let rubric = [...question.rubric];\n        let pointsNum = parseInt(points);\n        if (isNaN(pointsNum)) {\n            pointsNum = 0;\n        }\n        rubric[index] = { ...rubric[index], points: pointsNum };\n        updateQuestion({ rubric });\n    }\n\n    function handleChangeRubricItemText(index, text) {\n        let rubric = [...question.rubric];\n        let rubricItem = { ...rubric[index] };\n        rubricItem[\"text\"] = text;\n        rubric[index] = rubricItem;\n        updateQuestion({ rubric });\n    }\n\n    function handleDeleteRubricItem(index) {\n        let rubric = [...question.rubric];\n        rubric.splice(index, 1);\n        updateQuestion({ rubric });\n    }\n\n    function handleCancel() {\n        history.goBack();\n    }\n\n    function validate(q) {\n        let formValid = true;\n\n        function setValid(elementId, isValid) {\n            document\n                .getElementById(elementId)\n                .classList.toggle(\"is-invalid\", !isValid);\n            if (!isValid) formValid = false;\n        }\n\n        setValid(\"question-edit-text\", q.questionText.length > 0);\n        if (q.hasCodeField) {\n            setValid(\"question-edit-code\", q.code.length > 0);\n        }\n        if (q.questionType === \"Multiple Choice\") {\n            if (q.answerChoices.length === 0) {\n                setValid(\"question-edit-mc\", false);\n            } else {\n                if (q.correct == null) {\n                    setValid(\"question-edit-mc-correct\", false);\n                }\n                q.answerChoices.forEach((text, index) =>\n                    setValid(\"question-edit-mc-\" + index, text.length > 0)\n                );\n            }\n        } else {\n            if (q.rubric.length === 0) {\n                setValid(\"question-edit-rubric\", false);\n            } else {\n                q.rubric.forEach((item, index) => {\n                    setValid(\n                        \"question-edit-rubric-points-\" + index,\n                        item.points && item.points !== 0\n                    );\n                    setValid(\n                        \"question-edit-rubric-\" + index,\n                        item.text.length > 0\n                    );\n                });\n            }\n        }\n\n        return formValid;\n    }\n\n    function handleSave() {\n        let newQuestion = {\n            id: this.state.id,\n            hasCodeField: this.state.hasCodeField,\n            hasAnswerField: this.state.hasAnswerField,\n            questionType: this.state.questionType,\n            questionText: this.state.questionText,\n            highlights: this.state.highlights,\n        };\n        if (this.state.hasCodeField) {\n            newQuestion[\"code\"] = this.state.code;\n        }\n        switch (this.state.questionType) {\n            case \"Comment\":\n                newQuestion[\"answers\"] = this.state.highlights.map(() => \"\");\n            // fall through\n            case \"Highlight\":\n                newQuestion[\"rubric\"] = this.state.rubric;\n                break;\n            case \"Multiple Choice\":\n                Object.assign(newQuestion, {\n                    answerChoices: this.state.answerChoices,\n                    correct: this.state.correct,\n                });\n                break;\n            default:\n                return;\n        }\n\n        if (!validate(newQuestion)) return;\n\n        updateQuestion(newQuestion);\n        history.push(\"/questions\");\n    }\n\n    return (\n        <React.Fragment>\n            <ResizeTextareas />\n\n            <div className=\"row\">\n                <div className=\"col\">\n                    <h1>\n                        {props.newQuestion ? \"New Question\" : \"Edit Question\"}\n                    </h1>\n                </div>\n                <div className=\"col\">\n                    <h1>Preview</h1>\n                </div>\n            </div>\n\n            <div\n                className=\"btn-group\"\n                role=\"group\"\n                style={{ marginLeft: \"10px\" }}\n            >\n                {[\"Comment\", \"Highlight\", \"Multiple Choice\"].map(\n                    (questionType) => {\n                        const idFor = \"type-\" + questionType.toLowerCase();\n                        return (\n                            <React.Fragment key={questionType}>\n                                <input\n                                    type=\"radio\"\n                                    className=\"btn-check\"\n                                    name=\"question-type\"\n                                    id={idFor}\n                                    checked={\n                                        questionType === question.questionType\n                                    }\n                                    onChange={() =>\n                                        handleQuestionType(questionType)\n                                    }\n                                />\n                                <label\n                                    className=\"btn btn-outline-primary\"\n                                    htmlFor={idFor}\n                                >\n                                    {questionType}\n                                </label>\n                            </React.Fragment>\n                        );\n                    }\n                )}\n            </div>\n\n            <QuestionTextField\n                editMode={true}\n                question={question}\n                onTextChange={this.handleTextChange}\n            />\n\n            {canToggleCodeField && (\n                // todo: can change this into a toggle button instead of a checkbox\n                <div\n                    className=\"form-check form-check-inline\"\n                    style={{ marginLeft: \"10px\" }}\n                >\n                    <input\n                        type=\"checkbox\"\n                        className=\"form-check-input\"\n                        id=\"hasCodeField\"\n                        defaultChecked={question.hasCodeField}\n                        onChange={handleToggleCodeField}\n                    />\n                    <label className=\"form-check-label\" htmlFor=\"hasCodeField\">\n                        Include code field\n                    </label>\n                </div>\n            )}\n            {question.hasCodeField && (\n                <CodeField\n                    editMode={true}\n                    question={question}\n                    onCodeChange={this.handleCodeChange}\n                    onAddHighlight={this.handleAddHighlight}\n                    onDeleteHighlight={this.handleDeleteHighlight}\n                    onClearHighlights={this.handleClearHighlights}\n                />\n            )}\n\n            {question.hasAnswerField && (\n                <AnswerField\n                    editMode={true}\n                    question={question}\n                    onClearHighlights={this.handleClearHighlights}\n                    onChangeHighlightText={this.handleChangeHighlightText}\n                    onDeleteHighlight={this.handleDeleteHighlight}\n                    onAddAnswerChoice={this.handleAddAnswerChoice}\n                    onChangeAnswerChoice={this.handleChangeAnswerChoice}\n                    onDeleteAnswerChoice={this.handleDeleteAnswerChoice}\n                    onSetCorrectAnswerChoice={this.handleSetCorrectAnswerChoice}\n                />\n            )}\n\n            {question.questionType !== \"Multiple Choice\" && (\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <RubricField\n                            editMode={true}\n                            question={question}\n                            onAddRubricItem={this.handleAddRubricItem}\n                            onChangeRubricItemPoints={\n                                this.handleChangeRubricItemPoints\n                            }\n                            onChangeRubricItemText={\n                                this.handleChangeRubricItemText\n                            }\n                            onDeleteRubricItem={handleDeleteRubricItem}\n                        />\n                    </div>\n                    <div className=\"col\">\n                        <RubricField previewMode={true} question={question} />\n                    </div>\n                </div>\n            )}\n\n            <div>\n                <button\n                    type=\"button\"\n                    className=\"btn btn-danger m-2\"\n                    onClick={handleCancel}\n                >\n                    Cancel\n                </button>\n                <button\n                    type=\"button\"\n                    className=\"btn btn-success m-2\"\n                    onClick={handleSave}\n                >\n                    Save\n                </button>\n            </div>\n        </React.Fragment>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}