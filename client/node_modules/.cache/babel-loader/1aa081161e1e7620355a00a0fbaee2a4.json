{"ast":null,"code":"var _jsxFileName = \"/Users/josephlou/Documents/Files/Princeton/grading/grader-drill-app/client/src/App/components/rubricField.jsx\";\nimport React, { Component } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport { preventEnter, resetValidId } from \"../shared\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass RubricField extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderEditMode = () => {\n      const addButton = /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"hidden\",\n            id: \"question-edit-rubric\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 10,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"invalid-feedback\",\n            children: \"Must have at least one rubric item.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 11,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-success\",\n          onClick: () => {\n            resetValidId(\"question-edit-rubric\");\n            this.props.onAddRubricItem();\n          },\n          children: \"Add Rubric Item\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 13\n      }, this);\n\n      if (this.props.question.rubric.length === 0) {\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No rubric items\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 21\n          }, this), addButton]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 17\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row g-1 mb-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-2\",\n            children: \"Points\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-10\",\n            children: \"Rubric item\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 17\n        }, this), this.props.question.rubric.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row align-items-center g-1 mb-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              className: \"form-control text-center\",\n              id: \"question-edit-rubric-points-\" + index,\n              value: item.points,\n              onChange: event => {\n                event.target.classList.remove(\"is-invalid\");\n                this.props.onChangeRubricItemPoints(index, event.target.value);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"invalid-feedback\",\n              children: \"Invalid value.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-10 align-self-start\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row align-items-center g-1\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col\",\n                children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n                  className: \"form-control textarea\",\n                  id: \"question-edit-rubric-\" + index,\n                  value: item.text,\n                  onKeyDown: preventEnter,\n                  onChange: event => {\n                    event.target.classList.remove(\"is-invalid\");\n                    this.props.onChangeRubricItemText(index, event.target.value);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 68,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-auto\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"button\",\n                  className: \"btn-close\",\n                  onClick: () => this.props.onDeleteRubricItem(index)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 85,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this)), addButton]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.renderField = () => {\n      if (this.props.previewMode) {\n        return this.props.question.rubric.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-check\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            className: \"form-check-input\",\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n            children: item.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 21\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 17\n        }, this));\n      } else if (this.props.editMode) {\n        return this.renderEditMode();\n      } else if (this.props.noChange) {\n        return this.props.question.rubric.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-check\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            className: \"form-check-input\",\n            checked: item.checked,\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n            children: item.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 21\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 17\n        }, this));\n      } else {\n        return this.props.rubric.map((item, index) => {\n          const idFor = \"item\" + index;\n          let inputProps = {\n            type: \"checkbox\",\n            className: \"form-check-input\",\n            id: idFor,\n            checked: item.checked,\n            onChange: () => this.props.onCheckChange(index)\n          };\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-check\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", { ...inputProps\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-check-label\",\n              htmlFor: idFor,\n              children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n                children: item.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 25\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 21\n          }, this);\n        });\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Rubric\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this), this.renderField()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default RubricField;","map":{"version":3,"sources":["/Users/josephlou/Documents/Files/Princeton/grading/grader-drill-app/client/src/App/components/rubricField.jsx"],"names":["React","Component","ReactMarkdown","preventEnter","resetValidId","RubricField","renderEditMode","addButton","props","onAddRubricItem","question","rubric","length","map","item","index","points","event","target","classList","remove","onChangeRubricItemPoints","value","text","onChangeRubricItemText","onDeleteRubricItem","renderField","previewMode","editMode","noChange","checked","idFor","inputProps","type","className","id","onChange","onCheckChange","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,WAA3C;;;AAEA,MAAMC,WAAN,SAA0BJ,SAA1B,CAAoC;AAAA;AAAA;;AAAA,SAChCK,cADgC,GACf,MAAM;AACnB,YAAMC,SAAS,gBACX,QAAC,KAAD,CAAO,QAAP;AAAA,gCACI;AAAA,kCACI;AAAO,YAAA,IAAI,EAAC,QAAZ;AAAqB,YAAA,EAAE,EAAC;AAAxB;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAK,YAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAOI;AACI,UAAA,IAAI,EAAC,QADT;AAEI,UAAA,SAAS,EAAC,iBAFd;AAGI,UAAA,OAAO,EAAE,MAAM;AACXH,YAAAA,YAAY,CAAC,sBAAD,CAAZ;AACA,iBAAKI,KAAL,CAAWC,eAAX;AACH,WANL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;;AAqBA,UAAI,KAAKD,KAAL,CAAWE,QAAX,CAAoBC,MAApB,CAA2BC,MAA3B,KAAsC,CAA1C,EAA6C;AACzC,4BACI,QAAC,KAAD,CAAO,QAAP;AAAA,kCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EAEKL,SAFL;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ;AAMH;;AACD,0BACI,QAAC,KAAD,CAAO,QAAP;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,kCACI;AAAK,YAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAK,YAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAKK,KAAKC,KAAL,CAAWE,QAAX,CAAoBC,MAApB,CAA2BE,GAA3B,CAA+B,CAACC,IAAD,EAAOC,KAAP,kBAC5B;AAEI,UAAA,SAAS,EAAC,iCAFd;AAAA,kCAII;AAAK,YAAA,SAAS,EAAC,OAAf;AAAA,oCACI;AACI,cAAA,IAAI,EAAC,QADT;AAEI,cAAA,SAAS,EAAC,0BAFd;AAGI,cAAA,EAAE,EAAE,iCAAiCA,KAHzC;AAII,cAAA,KAAK,EAAED,IAAI,CAACE,MAJhB;AAKI,cAAA,QAAQ,EAAGC,KAAD,IAAW;AACjBA,gBAAAA,KAAK,CAACC,MAAN,CAAaC,SAAb,CAAuBC,MAAvB,CAA8B,YAA9B;AACA,qBAAKZ,KAAL,CAAWa,wBAAX,CACIN,KADJ,EAEIE,KAAK,CAACC,MAAN,CAAaI,KAFjB;AAIH;AAXL;AAAA;AAAA;AAAA;AAAA,oBADJ,eAcI;AAAK,cAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAdJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJJ,eAsBI;AAAK,YAAA,SAAS,EAAC,yBAAf;AAAA,mCACI;AAAK,cAAA,SAAS,EAAC,4BAAf;AAAA,sCACI;AAAK,gBAAA,SAAS,EAAC,KAAf;AAAA,uCACI;AACI,kBAAA,SAAS,EAAC,uBADd;AAEI,kBAAA,EAAE,EAAE,0BAA0BP,KAFlC;AAGI,kBAAA,KAAK,EAAED,IAAI,CAACS,IAHhB;AAII,kBAAA,SAAS,EAAEpB,YAJf;AAKI,kBAAA,QAAQ,EAAGc,KAAD,IAAW;AACjBA,oBAAAA,KAAK,CAACC,MAAN,CAAaC,SAAb,CAAuBC,MAAvB,CACI,YADJ;AAGA,yBAAKZ,KAAL,CAAWgB,sBAAX,CACIT,KADJ,EAEIE,KAAK,CAACC,MAAN,CAAaI,KAFjB;AAIH;AAbL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,sBADJ,eAkBI;AAAK,gBAAA,SAAS,EAAC,UAAf;AAAA,uCACI;AACI,kBAAA,IAAI,EAAC,QADT;AAEI,kBAAA,SAAS,EAAC,WAFd;AAGI,kBAAA,OAAO,EAAE,MACL,KAAKd,KAAL,CAAWiB,kBAAX,CAA8BV,KAA9B;AAJR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,sBAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAtBJ;AAAA,WACSA,KADT;AAAA;AAAA;AAAA;AAAA,gBADH,CALL,EA4DKR,SA5DL;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAgEH,KA/F+B;;AAAA,SAiGhCmB,WAjGgC,GAiGlB,MAAM;AAChB,UAAI,KAAKlB,KAAL,CAAWmB,WAAf,EAA4B;AACxB,eAAO,KAAKnB,KAAL,CAAWE,QAAX,CAAoBC,MAApB,CAA2BE,GAA3B,CAA+B,CAACC,IAAD,EAAOC,KAAP,kBAClC;AAAiB,UAAA,SAAS,EAAC,YAA3B;AAAA,kCACI;AACI,YAAA,IAAI,EAAC,UADT;AAEI,YAAA,SAAS,EAAC,kBAFd;AAGI,YAAA,QAAQ,EAAE;AAHd;AAAA;AAAA;AAAA;AAAA,kBADJ,eAMI,QAAC,aAAD;AAAA,sBAAgBD,IAAI,CAACS;AAArB;AAAA;AAAA;AAAA;AAAA,kBANJ;AAAA,WAAUR,KAAV;AAAA;AAAA;AAAA;AAAA,gBADG,CAAP;AAUH,OAXD,MAWO,IAAI,KAAKP,KAAL,CAAWoB,QAAf,EAAyB;AAC5B,eAAO,KAAKtB,cAAL,EAAP;AACH,OAFM,MAEA,IAAI,KAAKE,KAAL,CAAWqB,QAAf,EAAyB;AAC5B,eAAO,KAAKrB,KAAL,CAAWE,QAAX,CAAoBC,MAApB,CAA2BE,GAA3B,CAA+B,CAACC,IAAD,EAAOC,KAAP,kBAClC;AAAiB,UAAA,SAAS,EAAC,YAA3B;AAAA,kCACI;AACI,YAAA,IAAI,EAAC,UADT;AAEI,YAAA,SAAS,EAAC,kBAFd;AAGI,YAAA,OAAO,EAAED,IAAI,CAACgB,OAHlB;AAII,YAAA,QAAQ,EAAE;AAJd;AAAA;AAAA;AAAA;AAAA,kBADJ,eAOI,QAAC,aAAD;AAAA,sBAAgBhB,IAAI,CAACS;AAArB;AAAA;AAAA;AAAA;AAAA,kBAPJ;AAAA,WAAUR,KAAV;AAAA;AAAA;AAAA;AAAA,gBADG,CAAP;AAWH,OAZM,MAYA;AACH,eAAO,KAAKP,KAAL,CAAWG,MAAX,CAAkBE,GAAlB,CAAsB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC1C,gBAAMgB,KAAK,GAAG,SAAShB,KAAvB;AAEA,cAAIiB,UAAU,GAAG;AACbC,YAAAA,IAAI,EAAE,UADO;AAEbC,YAAAA,SAAS,EAAE,kBAFE;AAGbC,YAAAA,EAAE,EAAEJ,KAHS;AAIbD,YAAAA,OAAO,EAAEhB,IAAI,CAACgB,OAJD;AAKbM,YAAAA,QAAQ,EAAE,MAAM,KAAK5B,KAAL,CAAW6B,aAAX,CAAyBtB,KAAzB;AALH,WAAjB;AAOA,8BACI;AAAiB,YAAA,SAAS,EAAC,YAA3B;AAAA,oCACI,sBAAWiB;AAAX;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAO,cAAA,SAAS,EAAC,kBAAjB;AAAoC,cAAA,OAAO,EAAED,KAA7C;AAAA,qCACI,QAAC,aAAD;AAAA,0BAAgBjB,IAAI,CAACS;AAArB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA,aAAUR,KAAV;AAAA;AAAA;AAAA;AAAA,kBADJ;AAQH,SAlBM,CAAP;AAmBH;AACJ,KAhJ+B;AAAA;;AAkJhCuB,EAAAA,MAAM,GAAG;AACL,wBACI,QAAC,KAAD,CAAO,QAAP;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEK,KAAKZ,WAAL,EAFL;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;;AAzJ+B;;AA4JpC,eAAerB,WAAf","sourcesContent":["import React, { Component } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport { preventEnter, resetValidId } from \"../shared\";\n\nclass RubricField extends Component {\n    renderEditMode = () => {\n        const addButton = (\n            <React.Fragment>\n                <div>\n                    <input type=\"hidden\" id=\"question-edit-rubric\" />\n                    <div className=\"invalid-feedback\">\n                        Must have at least one rubric item.\n                    </div>\n                </div>\n                <button\n                    type=\"button\"\n                    className=\"btn btn-success\"\n                    onClick={() => {\n                        resetValidId(\"question-edit-rubric\");\n                        this.props.onAddRubricItem();\n                    }}\n                >\n                    Add Rubric Item\n                </button>\n            </React.Fragment>\n        );\n\n        if (this.props.question.rubric.length === 0) {\n            return (\n                <React.Fragment>\n                    <p>No rubric items</p>\n                    {addButton}\n                </React.Fragment>\n            );\n        }\n        return (\n            <React.Fragment>\n                <div className=\"row g-1 mb-2\">\n                    <div className=\"col-2\">Points</div>\n                    <div className=\"col-10\">Rubric item</div>\n                </div>\n                {this.props.question.rubric.map((item, index) => (\n                    <div\n                        key={index}\n                        className=\"row align-items-center g-1 mb-2\"\n                    >\n                        <div className=\"col-2\">\n                            <input\n                                type=\"number\"\n                                className=\"form-control text-center\"\n                                id={\"question-edit-rubric-points-\" + index}\n                                value={item.points}\n                                onChange={(event) => {\n                                    event.target.classList.remove(\"is-invalid\");\n                                    this.props.onChangeRubricItemPoints(\n                                        index,\n                                        event.target.value\n                                    );\n                                }}\n                            />\n                            <div className=\"invalid-feedback\">\n                                Invalid value.\n                            </div>\n                        </div>\n                        <div className=\"col-10 align-self-start\">\n                            <div className=\"row align-items-center g-1\">\n                                <div className=\"col\">\n                                    <textarea\n                                        className=\"form-control textarea\"\n                                        id={\"question-edit-rubric-\" + index}\n                                        value={item.text}\n                                        onKeyDown={preventEnter}\n                                        onChange={(event) => {\n                                            event.target.classList.remove(\n                                                \"is-invalid\"\n                                            );\n                                            this.props.onChangeRubricItemText(\n                                                index,\n                                                event.target.value\n                                            );\n                                        }}\n                                    />\n                                </div>\n                                <div className=\"col-auto\">\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn-close\"\n                                        onClick={() =>\n                                            this.props.onDeleteRubricItem(index)\n                                        }\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                ))}\n                {addButton}\n            </React.Fragment>\n        );\n    };\n\n    renderField = () => {\n        if (this.props.previewMode) {\n            return this.props.question.rubric.map((item, index) => (\n                <div key={index} className=\"form-check\">\n                    <input\n                        type=\"checkbox\"\n                        className=\"form-check-input\"\n                        disabled={true}\n                    />\n                    <ReactMarkdown>{item.text}</ReactMarkdown>\n                </div>\n            ));\n        } else if (this.props.editMode) {\n            return this.renderEditMode();\n        } else if (this.props.noChange) {\n            return this.props.question.rubric.map((item, index) => (\n                <div key={index} className=\"form-check\">\n                    <input\n                        type=\"checkbox\"\n                        className=\"form-check-input\"\n                        checked={item.checked}\n                        disabled={true}\n                    />\n                    <ReactMarkdown>{item.text}</ReactMarkdown>\n                </div>\n            ));\n        } else {\n            return this.props.rubric.map((item, index) => {\n                const idFor = \"item\" + index;\n\n                let inputProps = {\n                    type: \"checkbox\",\n                    className: \"form-check-input\",\n                    id: idFor,\n                    checked: item.checked,\n                    onChange: () => this.props.onCheckChange(index),\n                };\n                return (\n                    <div key={index} className=\"form-check\">\n                        <input {...inputProps} />\n                        <label className=\"form-check-label\" htmlFor={idFor}>\n                            <ReactMarkdown>{item.text}</ReactMarkdown>\n                        </label>\n                    </div>\n                );\n            });\n        }\n    };\n\n    render() {\n        return (\n            <React.Fragment>\n                <h1>Rubric</h1>\n                {this.renderField()}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default RubricField;\n"]},"metadata":{},"sourceType":"module"}