{"ast":null,"code":"var _jsxFileName = \"/Users/josephlou/Documents/Files/Princeton/grading/grader-drill-app/client/src/App/components/codeField.jsx\";\nimport React, { Component } from \"react\"; // import ReactDOMServer from 'react-dom/server';\n\nimport { resetValid } from \"../shared\"; // editable textarea: https://css-tricks.com/creating-an-editable-textarea-that-supports-syntax-highlighted-code/\n// tab indent textarea: https://stackoverflow.com/questions/6637341/use-tab-to-indent-in-textarea\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CodeField extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleIndent = event => {\n      // Adapted from https://stackoverflow.com/a/45396754.\n      const element = event.target; // tab\n\n      if (event.keyCode === 9) {\n        event.preventDefault();\n        const TAB = \" \".repeat(4);\n        document.execCommand(\"insertText\", false, TAB);\n      } // enter\n      else if (event.keyCode === 13) {\n        if (element.selectionStart === element.selectionEnd) {\n          const text = element.value; // start of the current line\n\n          let lineStart = element.selectionStart;\n\n          while (lineStart > 0 && text[lineStart - 1] !== \"\\n\") {\n            lineStart--;\n          } // first character of the current line\n\n\n          let lineFirstChar = lineStart;\n\n          while (text[lineFirstChar] === \" \") {\n            lineFirstChar++;\n          } // copy indent of current line to new line\n\n\n          if (lineFirstChar > lineStart) {\n            event.preventDefault();\n            document.execCommand(\"insertText\", false, \"\\n\" + text.substring(lineStart, lineFirstChar));\n          }\n        }\n      }\n    };\n\n    this.renderEditMode = () => {\n      const {\n        code\n      } = this.props.question;\n      const lines = code.split(\"\\n\");\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-auto px-0\",\n          style: {\n            paddingTop: \"2px\"\n          },\n          children: lines.map((line, index) => /*#__PURE__*/_jsxDEV(\"pre\", {\n            className: \"code-text text-end\",\n            children: index + 1\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"code-text form-control textarea code-textarea\",\n            id: \"question-edit-code\",\n            spellCheck: false,\n            onKeyDown: this.handleIndent,\n            onChange: event => {\n              resetValid(event.target);\n              this.props.onCodeChange(event.target.value);\n            },\n            value: code\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"invalid-feedback\",\n            children: \"Must have code.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.handleMouseUp = () => {\n      const DEBUG = false;\n      const selection = document.getSelection();\n\n      if (!selection || selection.rangeCount !== 1) {\n        return;\n      }\n\n      const range = selection.getRangeAt(0);\n\n      if (!range || range.collapsed) {\n        return;\n      }\n\n      if (DEBUG) console.log(\"Range object:\", range);\n      let {\n        startContainer,\n        endContainer\n      } = range;\n      let startChar = range.startOffset;\n      let endChar = range.endOffset;\n\n      if (DEBUG) {\n        console.log(\"start:\", startContainer);\n        console.log(\"end:\", endContainer);\n        console.log(\"offsets:\", startChar, endChar);\n      }\n\n      if (startContainer.nodeType !== Node.TEXT_NODE) {\n        console.log(\"Error: start container is not text:\", startContainer);\n        return;\n      }\n\n      if (endContainer.nodeType !== Node.TEXT_NODE) {\n        endContainer = endContainer.firstChild;\n\n        if (endContainer.nodeType !== Node.TEXT_NODE) {\n          console.log(\"Error: end container is not text:\", endContainer);\n          return;\n        }\n      } // get line child nodes\n\n\n      const lines = this.props.question.code.split(\"\\n\");\n      const children = lines.map((temp, index) => {\n        const line = document.getElementById(\"line-\" + (index + 1));\n        return [...line.childNodes];\n      });\n      if (DEBUG) console.log(\"children:\", children);\n      const childrenFlat = children.flat();\n      const childrenText = childrenFlat.map(child => {\n        if (child.nodeType === Node.TEXT_NODE) return child; // should be the text of the span\n\n        return child.firstChild;\n      });\n      if (DEBUG) console.log(\"flat:\", childrenText.map(child => child.nodeValue));\n      let startIndex = childrenText.indexOf(startContainer);\n      let endIndex = childrenText.indexOf(endContainer); // shouldn't happen but just in case\n\n      if (startIndex === -1 || endIndex === -1) {\n        console.log(\"start or end not found\");\n        return;\n      } // start is at the very end of a container\n\n\n      if (startChar === childrenText[startIndex].length) {\n        // shouldn't happen but just in case\n        if (startIndex === childrenFlat.length - 1) {\n          console.log(\"start is at the very last character\");\n          return;\n        }\n\n        startIndex++;\n        startChar = 0;\n      } // end is at the very beginning of a container\n\n\n      if (endChar === 0) {\n        // shouldn't happen but just in case\n        if (endIndex === 0) {\n          console.log(\"end is at the very first character\");\n          return;\n        }\n\n        endIndex--;\n        endChar = childrenText[endIndex].nodeValue.length;\n      }\n\n      if (DEBUG) {\n        console.log(\"indices:\", startIndex, endIndex);\n        console.log(\"chars:\", startChar, endChar);\n      } // shrink to text nodes\n\n\n      while (childrenFlat[startIndex].nodeType !== Node.TEXT_NODE) {\n        startIndex++;\n        startChar = 0;\n      }\n\n      while (childrenFlat[endIndex].nodeType !== Node.TEXT_NODE) {\n        endIndex--;\n        endChar = childrenText[endIndex].nodeValue.length;\n      }\n\n      if (DEBUG) console.log(\"Fixed indices:\", startIndex, endIndex); // make sure there are no highlights in the middle\n\n      for (let i = startIndex + 1; i < endIndex; i++) {\n        if (childrenFlat[i].nodeType !== Node.TEXT_NODE) {\n          console.log(\"Highlight at index \" + i + \"; invalid selection\");\n          return;\n        }\n      } // find bounds\n\n\n      let i = 0;\n      let startLine = -1,\n          endLine = -1;\n\n      for (let lineNum = 0; lineNum < children.length; lineNum++) {\n        let lineOffset = 0;\n        if (DEBUG) console.log(\"line \" + (lineNum + 1));\n\n        for (let j = 0; j < children[lineNum].length; j++) {\n          if (DEBUG) console.log(\"i =\", i);\n\n          if (i === startIndex) {\n            if (DEBUG) console.log(\"found start index\");\n            startLine = lineNum;\n            startChar += lineOffset;\n          }\n\n          if (i === endIndex) {\n            if (DEBUG) console.log(\"found end index\");\n            endLine = lineNum;\n            endChar += lineOffset;\n          }\n\n          lineOffset += childrenText[i].nodeValue.length;\n          i++;\n        }\n\n        if (i > endIndex) break;\n      } // shouldn't happen but just in case\n\n\n      if (startLine === -1 || endLine === -1) {\n        console.log(\"Error: start/end line not found:\", startLine, endLine);\n        return;\n      }\n\n      const highlight = {\n        startLine: startLine,\n        startChar: startChar,\n        endLine: endLine,\n        endChar: endChar,\n        byUser: !this.props.editMode\n      };\n      if (DEBUG) console.log(highlight);\n      this.props.onAddHighlight(this.props.question, highlight); // if single click on a highlighted portion, adds another highlight\n      // so collapse the range to avoid that\n\n      range.collapse();\n    };\n\n    this.renderCodeLines = () => {\n      const lines = this.props.question.code.split(\"\\n\");\n      const numLines = lines.length; // create inHighlight array, which determines where highlights are\n\n      let inHighlight = new Array(numLines);\n\n      for (let i = 0; i < numLines; i++) {\n        inHighlight[i] = new Array(lines[i].length).fill(0);\n      }\n\n      const {\n        question\n      } = this.props;\n      const {\n        highlights\n      } = question;\n\n      for (let i = 0; i < highlights.length; i++) {\n        const highlightNum = i + 1;\n        const {\n          startLine,\n          startChar,\n          endLine,\n          endChar\n        } = highlights[i];\n\n        if (startLine === endLine) {\n          for (let c = startChar; c < endChar; c++) {\n            inHighlight[startLine][c] = highlightNum;\n          }\n\n          continue;\n        }\n\n        for (let lineNum = startLine; lineNum <= endLine; lineNum++) {\n          for (let c = 0; c < lines[lineNum].length; c++) {\n            if (lineNum === startLine && c < startChar) continue;\n            if (lineNum === endLine && c >= endChar) break;\n            inHighlight[lineNum][c] = highlightNum;\n          }\n        }\n      }\n\n      function createHighlight(key, lineNum, text, highlightNum, badge) {\n        // Creates a highlight with the appropriate line number, highlight number, and badge.\n        const idText = `line-${lineNum}-highlight-${highlightNum}`;\n        const highlightClasses = [\"highlight\", \"user-select-none\", \"position-relative\"];\n        const badgeClasses = [\"user-select-none\", \"position-absolute\", \"top-0\", \"start-100\", \"translate-middle\", \"badge\", \"rounded-pill\", highlights[highlightNum - 1].byUser ? \"bg-success\" : \"bg-primary\"];\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: highlightClasses.join(\" \"),\n          id: idText,\n          children: [text, badge && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: badgeClasses.join(\" \"),\n            id: idText + \"-badge\" // todo: this was an attempt to turn the badge into a button to delete the highlight,\n            // but i couldn't figure out how to add the onclick event\n            // onMouseEnter={(event) => {\n            //     const button = (\n            //         <button\n            //             type=\"button\"\n            //             className=\"btn-close btn-close-white\"\n            //             onClick={() => this.props.onDeleteHighlight(question, highlightNum)}\n            //         />\n            //     );\n            //     // event.target.innerHTML = '<button type=\"button\" class=\"btn-close btn-close-white\">';\n            //     event.target.innerHTML = ReactDOMServer.renderToString(button);\n            // }}\n            // onMouseLeave={(event) => {\n            //     event.target.innerHTML = highlightNum;\n            // }}\n            ,\n            children: highlightNum\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 25\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 17\n        }, this);\n      }\n\n      const ZERO_WIDTH_SPACE = \"\\u200B\";\n      let elements = [];\n      let prevHighlight = 0;\n      let key = 0;\n\n      for (let i = 0; i < numLines; i++) {\n        const lineNum = i + 1;\n        let lineKey = 0;\n        let text = \"\";\n        let line = [];\n\n        for (let j = 0; j < lines[i].length; j++) {\n          const currentHighlight = inHighlight[i][j];\n\n          if (prevHighlight === currentHighlight) {\n            text += lines[i].charAt(j);\n            continue;\n          }\n\n          if (text.length > 0) {\n            if (prevHighlight === 0) {\n              line.push(text);\n            } else {\n              line.push(createHighlight(lineKey++, lineNum, text, prevHighlight, true));\n            }\n          }\n\n          text = lines[i].charAt(j);\n          prevHighlight = currentHighlight;\n        }\n\n        if (text.length > 0) {\n          if (prevHighlight === 0) {\n            line.push(text);\n          } else {\n            // see if next proper line's first character is the same highlight\n            let nextLine = i + 1;\n\n            while (nextLine < numLines && lines[nextLine].length === 0) {\n              nextLine++;\n            }\n\n            if (nextLine < numLines && inHighlight[nextLine][0] === prevHighlight) {\n              // if yes, don't add a badge\n              line.push(createHighlight(lineKey++, lineNum, text, prevHighlight, false));\n            } else {\n              // otherwise, add the badge\n              line.push(createHighlight(lineKey++, lineNum, text, prevHighlight, true));\n              prevHighlight = 0;\n            }\n          }\n        }\n\n        elements.push( /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"code-text\",\n          id: \"line-\" + lineNum,\n          children: line.length > 0 ? line : ZERO_WIDTH_SPACE\n        }, key++, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 17\n        }, this));\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row h-100\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-auto pe-2 user-select-none\",\n          children: lines.map((line, index) => /*#__PURE__*/_jsxDEV(\"pre\", {\n            className: \"code-text text-end\",\n            children: index + 1\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col ps-0 me-2\",\n          style: {\n            overflowX: \"scroll\"\n          },\n          children: elements\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.renderField = () => {\n      const onMouseUp = !this.props.noChange ? this.handleMouseUp : undefined;\n\n      if (!this.props.editMode) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          onMouseUp: onMouseUp,\n          children: this.renderCodeLines()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 20\n        }, this);\n      }\n\n      const {\n        question\n      } = this.props;\n      const {\n        highlights\n      } = question;\n      let clearButton = null;\n\n      if (this.props.editMode && highlights && highlights.length > 0) {\n        clearButton = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row mt-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-6\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-danger\",\n              onClick: () => this.props.onClearHighlights(question),\n              children: \"Clear Highlights\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 17\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-fluid\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-6\",\n            children: \"You can add default highlights to the code. Note that highlights will not change with the code.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-6\",\n            children: this.renderEditMode()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-6\",\n            onMouseUp: onMouseUp,\n            children: this.renderCodeLines()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 17\n        }, this), clearButton]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 13\n      }, this);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"code-field\",\n      children: this.renderField()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default CodeField;","map":{"version":3,"sources":["/Users/josephlou/Documents/Files/Princeton/grading/grader-drill-app/client/src/App/components/codeField.jsx"],"names":["React","Component","resetValid","CodeField","handleIndent","event","element","target","keyCode","preventDefault","TAB","repeat","document","execCommand","selectionStart","selectionEnd","text","value","lineStart","lineFirstChar","substring","renderEditMode","code","props","question","lines","split","paddingTop","map","line","index","onCodeChange","handleMouseUp","DEBUG","selection","getSelection","rangeCount","range","getRangeAt","collapsed","console","log","startContainer","endContainer","startChar","startOffset","endChar","endOffset","nodeType","Node","TEXT_NODE","firstChild","children","temp","getElementById","childNodes","childrenFlat","flat","childrenText","child","nodeValue","startIndex","indexOf","endIndex","length","i","startLine","endLine","lineNum","lineOffset","j","highlight","byUser","editMode","onAddHighlight","collapse","renderCodeLines","numLines","inHighlight","Array","fill","highlights","highlightNum","c","createHighlight","key","badge","idText","highlightClasses","badgeClasses","join","ZERO_WIDTH_SPACE","elements","prevHighlight","lineKey","currentHighlight","charAt","push","nextLine","overflowX","renderField","onMouseUp","noChange","undefined","clearButton","onClearHighlights","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n// import ReactDOMServer from 'react-dom/server';\nimport { resetValid } from \"../shared\";\n\n// editable textarea: https://css-tricks.com/creating-an-editable-textarea-that-supports-syntax-highlighted-code/\n// tab indent textarea: https://stackoverflow.com/questions/6637341/use-tab-to-indent-in-textarea\n\nclass CodeField extends Component {\n    handleIndent = (event) => {\n        // Adapted from https://stackoverflow.com/a/45396754.\n        const element = event.target;\n        // tab\n        if (event.keyCode === 9) {\n            event.preventDefault();\n            const TAB = \" \".repeat(4);\n            document.execCommand(\"insertText\", false, TAB);\n        }\n        // enter\n        else if (event.keyCode === 13) {\n            if (element.selectionStart === element.selectionEnd) {\n                const text = element.value;\n                // start of the current line\n                let lineStart = element.selectionStart;\n                while (lineStart > 0 && text[lineStart - 1] !== \"\\n\") {\n                    lineStart--;\n                }\n\n                // first character of the current line\n                let lineFirstChar = lineStart;\n                while (text[lineFirstChar] === \" \") {\n                    lineFirstChar++;\n                }\n\n                // copy indent of current line to new line\n                if (lineFirstChar > lineStart) {\n                    event.preventDefault();\n                    document.execCommand(\n                        \"insertText\",\n                        false,\n                        \"\\n\" + text.substring(lineStart, lineFirstChar)\n                    );\n                }\n            }\n        }\n    };\n\n    renderEditMode = () => {\n        const { code } = this.props.question;\n        const lines = code.split(\"\\n\");\n        return (\n            <div className=\"row\">\n                <div className=\"col-auto px-0\" style={{ paddingTop: \"2px\" }}>\n                    {lines.map((line, index) => (\n                        <pre key={index} className=\"code-text text-end\">\n                            {index + 1}\n                        </pre>\n                    ))}\n                </div>\n                <div className=\"col\">\n                    <textarea\n                        className=\"code-text form-control textarea code-textarea\"\n                        id=\"question-edit-code\"\n                        spellCheck={false}\n                        onKeyDown={this.handleIndent}\n                        onChange={(event) => {\n                            resetValid(event.target);\n                            this.props.onCodeChange(event.target.value);\n                        }}\n                        value={code}\n                    />\n                    <div className=\"invalid-feedback\">Must have code.</div>\n                </div>\n            </div>\n        );\n    };\n\n    handleMouseUp = () => {\n        const DEBUG = false;\n\n        const selection = document.getSelection();\n        if (!selection || selection.rangeCount !== 1) {\n            return;\n        }\n        const range = selection.getRangeAt(0);\n        if (!range || range.collapsed) {\n            return;\n        }\n        if (DEBUG) console.log(\"Range object:\", range);\n\n        let { startContainer, endContainer } = range;\n        let startChar = range.startOffset;\n        let endChar = range.endOffset;\n        if (DEBUG) {\n            console.log(\"start:\", startContainer);\n            console.log(\"end:\", endContainer);\n            console.log(\"offsets:\", startChar, endChar);\n        }\n\n        if (startContainer.nodeType !== Node.TEXT_NODE) {\n            console.log(\"Error: start container is not text:\", startContainer);\n            return;\n        }\n        if (endContainer.nodeType !== Node.TEXT_NODE) {\n            endContainer = endContainer.firstChild;\n            if (endContainer.nodeType !== Node.TEXT_NODE) {\n                console.log(\"Error: end container is not text:\", endContainer);\n                return;\n            }\n        }\n\n        // get line child nodes\n        const lines = this.props.question.code.split(\"\\n\");\n        const children = lines.map((temp, index) => {\n            const line = document.getElementById(\"line-\" + (index + 1));\n            return [...line.childNodes];\n        });\n        if (DEBUG) console.log(\"children:\", children);\n        const childrenFlat = children.flat();\n        const childrenText = childrenFlat.map((child) => {\n            if (child.nodeType === Node.TEXT_NODE) return child;\n            // should be the text of the span\n            return child.firstChild;\n        });\n        if (DEBUG)\n            console.log(\n                \"flat:\",\n                childrenText.map((child) => child.nodeValue)\n            );\n\n        let startIndex = childrenText.indexOf(startContainer);\n        let endIndex = childrenText.indexOf(endContainer);\n        // shouldn't happen but just in case\n        if (startIndex === -1 || endIndex === -1) {\n            console.log(\"start or end not found\");\n            return;\n        }\n\n        // start is at the very end of a container\n        if (startChar === childrenText[startIndex].length) {\n            // shouldn't happen but just in case\n            if (startIndex === childrenFlat.length - 1) {\n                console.log(\"start is at the very last character\");\n                return;\n            }\n            startIndex++;\n            startChar = 0;\n        }\n        // end is at the very beginning of a container\n        if (endChar === 0) {\n            // shouldn't happen but just in case\n            if (endIndex === 0) {\n                console.log(\"end is at the very first character\");\n                return;\n            }\n            endIndex--;\n            endChar = childrenText[endIndex].nodeValue.length;\n        }\n\n        if (DEBUG) {\n            console.log(\"indices:\", startIndex, endIndex);\n            console.log(\"chars:\", startChar, endChar);\n        }\n\n        // shrink to text nodes\n        while (childrenFlat[startIndex].nodeType !== Node.TEXT_NODE) {\n            startIndex++;\n            startChar = 0;\n        }\n        while (childrenFlat[endIndex].nodeType !== Node.TEXT_NODE) {\n            endIndex--;\n            endChar = childrenText[endIndex].nodeValue.length;\n        }\n\n        if (DEBUG) console.log(\"Fixed indices:\", startIndex, endIndex);\n\n        // make sure there are no highlights in the middle\n        for (let i = startIndex + 1; i < endIndex; i++) {\n            if (childrenFlat[i].nodeType !== Node.TEXT_NODE) {\n                console.log(\"Highlight at index \" + i + \"; invalid selection\");\n                return;\n            }\n        }\n\n        // find bounds\n        let i = 0;\n        let startLine = -1,\n            endLine = -1;\n        for (let lineNum = 0; lineNum < children.length; lineNum++) {\n            let lineOffset = 0;\n            if (DEBUG) console.log(\"line \" + (lineNum + 1));\n            for (let j = 0; j < children[lineNum].length; j++) {\n                if (DEBUG) console.log(\"i =\", i);\n                if (i === startIndex) {\n                    if (DEBUG) console.log(\"found start index\");\n                    startLine = lineNum;\n                    startChar += lineOffset;\n                }\n                if (i === endIndex) {\n                    if (DEBUG) console.log(\"found end index\");\n                    endLine = lineNum;\n                    endChar += lineOffset;\n                }\n                lineOffset += childrenText[i].nodeValue.length;\n                i++;\n            }\n            if (i > endIndex) break;\n        }\n        // shouldn't happen but just in case\n        if (startLine === -1 || endLine === -1) {\n            console.log(\"Error: start/end line not found:\", startLine, endLine);\n            return;\n        }\n\n        const highlight = {\n            startLine: startLine,\n            startChar: startChar,\n            endLine: endLine,\n            endChar: endChar,\n            byUser: !this.props.editMode,\n        };\n        if (DEBUG) console.log(highlight);\n        this.props.onAddHighlight(this.props.question, highlight);\n\n        // if single click on a highlighted portion, adds another highlight\n        // so collapse the range to avoid that\n        range.collapse();\n    };\n\n    renderCodeLines = () => {\n        const lines = this.props.question.code.split(\"\\n\");\n        const numLines = lines.length;\n\n        // create inHighlight array, which determines where highlights are\n        let inHighlight = new Array(numLines);\n        for (let i = 0; i < numLines; i++) {\n            inHighlight[i] = new Array(lines[i].length).fill(0);\n        }\n        const { question } = this.props;\n        const { highlights } = question;\n        for (let i = 0; i < highlights.length; i++) {\n            const highlightNum = i + 1;\n            const { startLine, startChar, endLine, endChar } = highlights[i];\n            if (startLine === endLine) {\n                for (let c = startChar; c < endChar; c++) {\n                    inHighlight[startLine][c] = highlightNum;\n                }\n                continue;\n            }\n            for (let lineNum = startLine; lineNum <= endLine; lineNum++) {\n                for (let c = 0; c < lines[lineNum].length; c++) {\n                    if (lineNum === startLine && c < startChar) continue;\n                    if (lineNum === endLine && c >= endChar) break;\n                    inHighlight[lineNum][c] = highlightNum;\n                }\n            }\n        }\n\n        function createHighlight(key, lineNum, text, highlightNum, badge) {\n            // Creates a highlight with the appropriate line number, highlight number, and badge.\n            const idText = `line-${lineNum}-highlight-${highlightNum}`;\n            const highlightClasses = [\n                \"highlight\",\n                \"user-select-none\",\n                \"position-relative\",\n            ];\n            const badgeClasses = [\n                \"user-select-none\",\n                \"position-absolute\",\n                \"top-0\",\n                \"start-100\",\n                \"translate-middle\",\n                \"badge\",\n                \"rounded-pill\",\n                highlights[highlightNum - 1].byUser\n                    ? \"bg-success\"\n                    : \"bg-primary\",\n            ];\n            return (\n                <span\n                    key={key}\n                    className={highlightClasses.join(\" \")}\n                    id={idText}\n                >\n                    {text}\n                    {badge && (\n                        <span\n                            className={badgeClasses.join(\" \")}\n                            id={idText + \"-badge\"}\n                            // todo: this was an attempt to turn the badge into a button to delete the highlight,\n                            // but i couldn't figure out how to add the onclick event\n                            // onMouseEnter={(event) => {\n                            //     const button = (\n                            //         <button\n                            //             type=\"button\"\n                            //             className=\"btn-close btn-close-white\"\n                            //             onClick={() => this.props.onDeleteHighlight(question, highlightNum)}\n                            //         />\n                            //     );\n                            //     // event.target.innerHTML = '<button type=\"button\" class=\"btn-close btn-close-white\">';\n                            //     event.target.innerHTML = ReactDOMServer.renderToString(button);\n                            // }}\n                            // onMouseLeave={(event) => {\n                            //     event.target.innerHTML = highlightNum;\n                            // }}\n                        >\n                            {highlightNum}\n                        </span>\n                    )}\n                </span>\n            );\n        }\n\n        const ZERO_WIDTH_SPACE = \"\\u200B\";\n\n        let elements = [];\n        let prevHighlight = 0;\n        let key = 0;\n        for (let i = 0; i < numLines; i++) {\n            const lineNum = i + 1;\n\n            let lineKey = 0;\n            let text = \"\";\n            let line = [];\n            for (let j = 0; j < lines[i].length; j++) {\n                const currentHighlight = inHighlight[i][j];\n                if (prevHighlight === currentHighlight) {\n                    text += lines[i].charAt(j);\n                    continue;\n                }\n                if (text.length > 0) {\n                    if (prevHighlight === 0) {\n                        line.push(text);\n                    } else {\n                        line.push(\n                            createHighlight(\n                                lineKey++,\n                                lineNum,\n                                text,\n                                prevHighlight,\n                                true\n                            )\n                        );\n                    }\n                }\n                text = lines[i].charAt(j);\n                prevHighlight = currentHighlight;\n            }\n            if (text.length > 0) {\n                if (prevHighlight === 0) {\n                    line.push(text);\n                } else {\n                    // see if next proper line's first character is the same highlight\n                    let nextLine = i + 1;\n                    while (\n                        nextLine < numLines &&\n                        lines[nextLine].length === 0\n                    ) {\n                        nextLine++;\n                    }\n                    if (\n                        nextLine < numLines &&\n                        inHighlight[nextLine][0] === prevHighlight\n                    ) {\n                        // if yes, don't add a badge\n                        line.push(\n                            createHighlight(\n                                lineKey++,\n                                lineNum,\n                                text,\n                                prevHighlight,\n                                false\n                            )\n                        );\n                    } else {\n                        // otherwise, add the badge\n                        line.push(\n                            createHighlight(\n                                lineKey++,\n                                lineNum,\n                                text,\n                                prevHighlight,\n                                true\n                            )\n                        );\n                        prevHighlight = 0;\n                    }\n                }\n            }\n\n            elements.push(\n                <p key={key++} className=\"code-text\" id={\"line-\" + lineNum}>\n                    {line.length > 0 ? line : ZERO_WIDTH_SPACE}\n                </p>\n            );\n        }\n\n        return (\n            <div className=\"row h-100\">\n                <div className=\"col-auto pe-2 user-select-none\">\n                    {lines.map((line, index) => (\n                        <pre key={index} className=\"code-text text-end\">\n                            {index + 1}\n                        </pre>\n                    ))}\n                </div>\n                <div className=\"col ps-0 me-2\" style={{ overflowX: \"scroll\" }}>\n                    {elements}\n                </div>\n            </div>\n        );\n    };\n\n    renderField = () => {\n        const onMouseUp = !this.props.noChange ? this.handleMouseUp : undefined;\n        if (!this.props.editMode) {\n            return <div onMouseUp={onMouseUp}>{this.renderCodeLines()}</div>;\n        }\n\n        const { question } = this.props;\n        const { highlights } = question;\n        let clearButton = null;\n        if (this.props.editMode && highlights && highlights.length > 0) {\n            clearButton = (\n                <div className=\"row mt-2\">\n                    <div className=\"col-6\"></div>\n                    <div className=\"col-6\">\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-danger\"\n                            onClick={() =>\n                                this.props.onClearHighlights(question)\n                            }\n                        >\n                            Clear Highlights\n                        </button>\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-6\"></div>\n                    <div className=\"col-6\">\n                        You can add default highlights to the code. Note that\n                        highlights will not change with the code.\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-6\">{this.renderEditMode()}</div>\n                    <div className=\"col-6\" onMouseUp={onMouseUp}>\n                        {this.renderCodeLines()}\n                    </div>\n                </div>\n                {clearButton}\n            </div>\n        );\n    };\n\n    render() {\n        return <div className=\"code-field\">{this.renderField()}</div>;\n    }\n}\n\nexport default CodeField;\n"]},"metadata":{},"sourceType":"module"}