{"ast":null,"code":"var _jsxFileName = \"/Users/josephlou/Documents/Files/Princeton/grading/grader-drill-app/client/src/App/components/highlightAnswerField.jsx\";\nimport React from \"react\";\nimport { preventEnter } from \"../shared.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function HighlightAnswerField(props) {\n  const {\n    question,\n    previewMode,\n    editMode,\n    noChange\n  } = props;\n  const {\n    highlights\n  } = question;\n\n  if (!highlights || highlights.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No highlights\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 16\n    }, this);\n  }\n\n  let clearButton = null;\n\n  if (!noChange) {\n    let buttonProps = {\n      type: \"button\",\n      className: \"btn btn-danger\"\n    };\n    const canClear = !props.previewMode && (props.editMode || highlights.some(h => h[\"byUser\"]));\n\n    if (canClear) {\n      buttonProps[\"onClick\"] = () => props.onClearHighlights(question);\n    } else {\n      buttonProps[\"disabled\"] = true;\n    }\n\n    clearButton = /*#__PURE__*/_jsxDEV(\"button\", { ...buttonProps,\n      children: \"Clear Highlights\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 23\n    }, this);\n  }\n\n  let answers;\n\n  if (editMode) {\n    answers = highlights.map(() => \"\");\n  } else {\n    answers = question.answers;\n  }\n\n  const classes = \"form-control textarea\";\n  let textClasses = classes;\n\n  if (!previewMode && noChange) {\n    textClasses = classes + \" bg-transparent text-body\";\n  }\n\n  const field = highlights.map((highlight, index) => {\n    let textProps = {\n      className: textClasses,\n      value: answers[index]\n    };\n\n    if (previewMode || noChange) {\n      textProps[\"disabled\"] = true;\n    } else {\n      Object.assign(textProps, {\n        onKeyDown: preventEnter,\n        onChange: event => props.onAnswerChange(question, index, event.target.value)\n      });\n    }\n\n    let input;\n\n    if (editMode && !previewMode) {\n      // editing the existing comment\n      input = /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: classes,\n        onKeyDown: preventEnter,\n        onChange: event => props.onChangeHighlightText(index, event.target.value),\n        placeholder: \"Existing comment\",\n        value: highlight.text || \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this);\n    } else if (highlight.text) {\n      // display the existing comment\n      input = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-grow-1\",\n        style: {\n          padding: \"0 0.75rem\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: classes,\n            style: {\n              borderBottom: \"0px\",\n              borderRadius: \"0 0.25rem 0 0\"\n            },\n            value: highlight.text,\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"textarea\", { ...textProps,\n            style: {\n              borderRadius: \"0 0 0.25rem 0\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this);\n    } else {\n      // no existing comment\n      input = /*#__PURE__*/_jsxDEV(\"textarea\", { ...textProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }, this);\n    }\n\n    let deleteButton = null;\n\n    if (editMode && !previewMode || highlight.byUser) {\n      let buttonProps = {\n        type: \"button\",\n        className: \"btn-close btn-close-white\"\n      };\n\n      if (noChange) {\n        buttonProps[\"disabled\"] = true;\n      } else {\n        buttonProps[\"onClick\"] = () => props.onDeleteHighlight(question, index);\n      }\n\n      deleteButton = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group-text bg-danger\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", { ...buttonProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this);\n    }\n\n    const labelClasses = [\"input-group-text\", \"bg-\" + (highlight.byUser ? \"success\" : \"primary\"), \"text-light\"];\n    const marginTop = noChange && index === 0 ? \"\" : \" mt-2\";\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-group\" + marginTop,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: labelClasses.join(\" \"),\n        children: index + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), input, deleteButton]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [clearButton, field]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 9\n  }, this);\n}\n_c = HighlightAnswerField;\n\nvar _c;\n\n$RefreshReg$(_c, \"HighlightAnswerField\");","map":{"version":3,"sources":["/Users/josephlou/Documents/Files/Princeton/grading/grader-drill-app/client/src/App/components/highlightAnswerField.jsx"],"names":["React","preventEnter","HighlightAnswerField","props","question","previewMode","editMode","noChange","highlights","length","clearButton","buttonProps","type","className","canClear","some","h","onClearHighlights","answers","map","classes","textClasses","field","highlight","index","textProps","value","Object","assign","onKeyDown","onChange","event","onAnswerChange","target","input","onChangeHighlightText","text","padding","borderBottom","borderRadius","deleteButton","byUser","onDeleteHighlight","labelClasses","marginTop","join"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,cAA7B;;AAEA,eAAe,SAASC,oBAAT,CAA8BC,KAA9B,EAAqC;AAChD,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,WAAZ;AAAyBC,IAAAA,QAAzB;AAAmCC,IAAAA;AAAnC,MAAgDJ,KAAtD;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAiBJ,QAAvB;;AAEA,MAAI,CAACI,UAAD,IAAeA,UAAU,CAACC,MAAX,KAAsB,CAAzC,EAA4C;AACxC,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,MAAIC,WAAW,GAAG,IAAlB;;AACA,MAAI,CAACH,QAAL,EAAe;AACX,QAAII,WAAW,GAAG;AACdC,MAAAA,IAAI,EAAE,QADQ;AAEdC,MAAAA,SAAS,EAAE;AAFG,KAAlB;AAKA,UAAMC,QAAQ,GACV,CAACX,KAAK,CAACE,WAAP,KACCF,KAAK,CAACG,QAAN,IAAkBE,UAAU,CAACO,IAAX,CAAiBC,CAAD,IAAOA,CAAC,CAAC,QAAD,CAAxB,CADnB,CADJ;;AAGA,QAAIF,QAAJ,EAAc;AACVH,MAAAA,WAAW,CAAC,SAAD,CAAX,GAAyB,MAAMR,KAAK,CAACc,iBAAN,CAAwBb,QAAxB,CAA/B;AACH,KAFD,MAEO;AACHO,MAAAA,WAAW,CAAC,UAAD,CAAX,GAA0B,IAA1B;AACH;;AAEDD,IAAAA,WAAW,gBAAG,uBAAYC,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAd;AACH;;AAED,MAAIO,OAAJ;;AACA,MAAIZ,QAAJ,EAAc;AACVY,IAAAA,OAAO,GAAGV,UAAU,CAACW,GAAX,CAAe,MAAM,EAArB,CAAV;AACH,GAFD,MAEO;AACHD,IAAAA,OAAO,GAAGd,QAAQ,CAACc,OAAnB;AACH;;AAED,QAAME,OAAO,GAAG,uBAAhB;AACA,MAAIC,WAAW,GAAGD,OAAlB;;AACA,MAAI,CAACf,WAAD,IAAgBE,QAApB,EAA8B;AAC1Bc,IAAAA,WAAW,GAAGD,OAAO,GAAG,2BAAxB;AACH;;AAED,QAAME,KAAK,GAAGd,UAAU,CAACW,GAAX,CAAe,CAACI,SAAD,EAAYC,KAAZ,KAAsB;AAC/C,QAAIC,SAAS,GAAG;AACZZ,MAAAA,SAAS,EAAEQ,WADC;AAEZK,MAAAA,KAAK,EAAER,OAAO,CAACM,KAAD;AAFF,KAAhB;;AAIA,QAAInB,WAAW,IAAIE,QAAnB,EAA6B;AACzBkB,MAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,IAAxB;AACH,KAFD,MAEO;AACHE,MAAAA,MAAM,CAACC,MAAP,CAAcH,SAAd,EAAyB;AACrBI,QAAAA,SAAS,EAAE5B,YADU;AAErB6B,QAAAA,QAAQ,EAAGC,KAAD,IACN5B,KAAK,CAAC6B,cAAN,CAAqB5B,QAArB,EAA+BoB,KAA/B,EAAsCO,KAAK,CAACE,MAAN,CAAaP,KAAnD;AAHiB,OAAzB;AAKH;;AAED,QAAIQ,KAAJ;;AACA,QAAI5B,QAAQ,IAAI,CAACD,WAAjB,EAA8B;AAC1B;AACA6B,MAAAA,KAAK,gBACD;AACI,QAAA,SAAS,EAAEd,OADf;AAEI,QAAA,SAAS,EAAEnB,YAFf;AAGI,QAAA,QAAQ,EAAG8B,KAAD,IACN5B,KAAK,CAACgC,qBAAN,CAA4BX,KAA5B,EAAmCO,KAAK,CAACE,MAAN,CAAaP,KAAhD,CAJR;AAMI,QAAA,WAAW,EAAC,kBANhB;AAOI,QAAA,KAAK,EAAEH,SAAS,CAACa,IAAV,IAAkB;AAP7B;AAAA;AAAA;AAAA;AAAA,cADJ;AAWH,KAbD,MAaO,IAAIb,SAAS,CAACa,IAAd,EAAoB;AACvB;AACAF,MAAAA,KAAK,gBACD;AAAK,QAAA,SAAS,EAAC,aAAf;AAA6B,QAAA,KAAK,EAAE;AAAEG,UAAAA,OAAO,EAAE;AAAX,SAApC;AAAA,gCAYI;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA,iCACI;AACI,YAAA,SAAS,EAAEjB,OADf;AAEI,YAAA,KAAK,EAAE;AACHkB,cAAAA,YAAY,EAAE,KADX;AAEHC,cAAAA,YAAY,EAAE;AAFX,aAFX;AAMI,YAAA,KAAK,EAAEhB,SAAS,CAACa,IANrB;AAOI,YAAA,QAAQ,EAAE;AAPd;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAZJ,eAuBI;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA,iCACI,yBACQX,SADR;AAEI,YAAA,KAAK,EAAE;AAAEc,cAAAA,YAAY,EAAE;AAAhB;AAFX;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAvBJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAgCH,KAlCM,MAkCA;AACH;AACAL,MAAAA,KAAK,gBAAG,yBAAcT;AAAd;AAAA;AAAA;AAAA;AAAA,cAAR;AACH;;AAED,QAAIe,YAAY,GAAG,IAAnB;;AACA,QAAKlC,QAAQ,IAAI,CAACD,WAAd,IAA8BkB,SAAS,CAACkB,MAA5C,EAAoD;AAChD,UAAI9B,WAAW,GAAG;AACdC,QAAAA,IAAI,EAAE,QADQ;AAEdC,QAAAA,SAAS,EAAE;AAFG,OAAlB;;AAIA,UAAIN,QAAJ,EAAc;AACVI,QAAAA,WAAW,CAAC,UAAD,CAAX,GAA0B,IAA1B;AACH,OAFD,MAEO;AACHA,QAAAA,WAAW,CAAC,SAAD,CAAX,GAAyB,MACrBR,KAAK,CAACuC,iBAAN,CAAwBtC,QAAxB,EAAkCoB,KAAlC,CADJ;AAEH;;AACDgB,MAAAA,YAAY,gBACR;AAAK,QAAA,SAAS,EAAC,4BAAf;AAAA,+BACI,uBAAY7B;AAAZ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ;AAKH;;AAED,UAAMgC,YAAY,GAAG,CACjB,kBADiB,EAEjB,SAASpB,SAAS,CAACkB,MAAV,GAAmB,SAAnB,GAA+B,SAAxC,CAFiB,EAGjB,YAHiB,CAArB;AAMA,UAAMG,SAAS,GAAGrC,QAAQ,IAAIiB,KAAK,KAAK,CAAtB,GAA0B,EAA1B,GAA+B,OAAjD;AAEA,wBACI;AAAiB,MAAA,SAAS,EAAE,gBAAgBoB,SAA5C;AAAA,8BACI;AAAM,QAAA,SAAS,EAAED,YAAY,CAACE,IAAb,CAAkB,GAAlB,CAAjB;AAAA,kBAA0CrB,KAAK,GAAG;AAAlD;AAAA;AAAA;AAAA;AAAA,cADJ,EAEKU,KAFL,EAGKM,YAHL;AAAA,OAAUhB,KAAV;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH,GAtGa,CAAd;AAwGA,sBACI,QAAC,KAAD,CAAO,QAAP;AAAA,eACKd,WADL,EAEKY,KAFL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;KAtJuBpB,oB","sourcesContent":["import React from \"react\";\nimport { preventEnter } from \"../shared.js\";\n\nexport default function HighlightAnswerField(props) {\n    const { question, previewMode, editMode, noChange } = props;\n    const { highlights } = question;\n\n    if (!highlights || highlights.length === 0) {\n        return <p>No highlights</p>;\n    }\n\n    let clearButton = null;\n    if (!noChange) {\n        let buttonProps = {\n            type: \"button\",\n            className: \"btn btn-danger\",\n        };\n\n        const canClear =\n            !props.previewMode &&\n            (props.editMode || highlights.some((h) => h[\"byUser\"]));\n        if (canClear) {\n            buttonProps[\"onClick\"] = () => props.onClearHighlights(question);\n        } else {\n            buttonProps[\"disabled\"] = true;\n        }\n\n        clearButton = <button {...buttonProps}>Clear Highlights</button>;\n    }\n\n    let answers;\n    if (editMode) {\n        answers = highlights.map(() => \"\");\n    } else {\n        answers = question.answers;\n    }\n\n    const classes = \"form-control textarea\";\n    let textClasses = classes;\n    if (!previewMode && noChange) {\n        textClasses = classes + \" bg-transparent text-body\";\n    }\n\n    const field = highlights.map((highlight, index) => {\n        let textProps = {\n            className: textClasses,\n            value: answers[index],\n        };\n        if (previewMode || noChange) {\n            textProps[\"disabled\"] = true;\n        } else {\n            Object.assign(textProps, {\n                onKeyDown: preventEnter,\n                onChange: (event) =>\n                    props.onAnswerChange(question, index, event.target.value),\n            });\n        }\n\n        let input;\n        if (editMode && !previewMode) {\n            // editing the existing comment\n            input = (\n                <textarea\n                    className={classes}\n                    onKeyDown={preventEnter}\n                    onChange={(event) =>\n                        props.onChangeHighlightText(index, event.target.value)\n                    }\n                    placeholder=\"Existing comment\"\n                    value={highlight.text || \"\"}\n                />\n            );\n        } else if (highlight.text) {\n            // display the existing comment\n            input = (\n                <div className=\"flex-grow-1\" style={{ padding: \"0 0.75rem\" }}>\n                    {/*\n                    // the div will annoyingly go to the next line when wrapping,\n                    // so using a disabled textarea solves the problem very well.\n                    // but it feels a bit janky so i don't really like it.\n                    <div\n                        className=\"row input-group-text text-start text-wrap flex-grow-1\"\n                        style={{borderBottom: \"0px\", borderRadius: \"0 0.25rem 0 0\"}}\n                    >\n                        {highlight.text}\n                    </div>\n                    */}\n                    <div className=\"row\">\n                        <textarea\n                            className={classes}\n                            style={{\n                                borderBottom: \"0px\",\n                                borderRadius: \"0 0.25rem 0 0\",\n                            }}\n                            value={highlight.text}\n                            disabled={true}\n                        />\n                    </div>\n                    <div className=\"row\">\n                        <textarea\n                            {...textProps}\n                            style={{ borderRadius: \"0 0 0.25rem 0\" }}\n                        />\n                    </div>\n                </div>\n            );\n        } else {\n            // no existing comment\n            input = <textarea {...textProps} />;\n        }\n\n        let deleteButton = null;\n        if ((editMode && !previewMode) || highlight.byUser) {\n            let buttonProps = {\n                type: \"button\",\n                className: \"btn-close btn-close-white\",\n            };\n            if (noChange) {\n                buttonProps[\"disabled\"] = true;\n            } else {\n                buttonProps[\"onClick\"] = () =>\n                    props.onDeleteHighlight(question, index);\n            }\n            deleteButton = (\n                <div className=\"input-group-text bg-danger\">\n                    <button {...buttonProps} />\n                </div>\n            );\n        }\n\n        const labelClasses = [\n            \"input-group-text\",\n            \"bg-\" + (highlight.byUser ? \"success\" : \"primary\"),\n            \"text-light\",\n        ];\n\n        const marginTop = noChange && index === 0 ? \"\" : \" mt-2\";\n\n        return (\n            <div key={index} className={\"input-group\" + marginTop}>\n                <span className={labelClasses.join(\" \")}>{index + 1}</span>\n                {input}\n                {deleteButton}\n            </div>\n        );\n    });\n\n    return (\n        <React.Fragment>\n            {clearButton}\n            {field}\n        </React.Fragment>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}