{"ast":null,"code":"const visit = require('unist-util-visit');\n\nconst splice = [].splice;\nmodule.exports = rehypeFilter;\n/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean}\n *\n * @typedef {Object} RehypeFilterOptions\n * @property {Array.<string>} [allowedElements]\n * @property {Array.<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @param {RehypeFilterOptions} options\n */\n\nfunction rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError('Only one of `allowedElements` and `disallowedElements` should be defined');\n  }\n\n  return options.allowedElements || options.disallowedElements || options.allowElement ? transform : undefined;\n  /**\n   * @param {Root} tree\n   */\n\n  function transform(tree) {\n    visit(tree, 'element', onelement);\n  }\n  /**\n   * @param {Element} node\n   * @param {number} index\n   * @param {Element|Root} parent\n   * @returns {number|void}\n   */\n\n\n  function onelement(node, index, parent) {\n    /** @type {boolean} */\n    let remove;\n\n    if (options.allowedElements) {\n      remove = !options.allowedElements.includes(node.tagName);\n    } else if (options.disallowedElements) {\n      remove = options.disallowedElements.includes(node.tagName);\n    }\n\n    if (!remove && options.allowElement) {\n      remove = !options.allowElement(node, index, parent);\n    }\n\n    if (remove) {\n      /** @type {Array.<unknown>} */\n      let parameters = [index, 1];\n\n      if (options.unwrapDisallowed && node.children) {\n        parameters = parameters.concat(node.children);\n      }\n\n      splice.apply(parent.children, parameters);\n      return index;\n    }\n\n    return undefined;\n  }\n}","map":{"version":3,"sources":["/Users/josephlou/Documents/Files/Princeton/grading/grader-drill-app/client/node_modules/react-markdown/src/rehype-filter.js"],"names":["visit","require","splice","module","exports","rehypeFilter","options","allowedElements","disallowedElements","TypeError","allowElement","transform","undefined","tree","onelement","node","index","parent","remove","includes","tagName","parameters","unwrapDisallowed","children","concat","apply"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,kBAAD,CAArB;;AAEA,MAAMC,MAAM,GAAG,GAAGA,MAAlB;AAEAC,MAAM,CAACC,OAAP,GAAiBC,YAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA,SAASA,YAAT,CAAsBC,OAAtB,EAA+B;AAC7B,MAAIA,OAAO,CAACC,eAAR,IAA2BD,OAAO,CAACE,kBAAvC,EAA2D;AACzD,UAAM,IAAIC,SAAJ,CACJ,0EADI,CAAN;AAGD;;AAED,SAAOH,OAAO,CAACC,eAAR,IACLD,OAAO,CAACE,kBADH,IAELF,OAAO,CAACI,YAFH,GAGHC,SAHG,GAIHC,SAJJ;AAMA;AACF;AACA;;AACE,WAASD,SAAT,CAAmBE,IAAnB,EAAyB;AACvBb,IAAAA,KAAK,CAACa,IAAD,EAAO,SAAP,EAAkBC,SAAlB,CAAL;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,WAASA,SAAT,CAAmBC,IAAnB,EAAyBC,KAAzB,EAAgCC,MAAhC,EAAwC;AACtC;AACA,QAAIC,MAAJ;;AAEA,QAAIZ,OAAO,CAACC,eAAZ,EAA6B;AAC3BW,MAAAA,MAAM,GAAG,CAACZ,OAAO,CAACC,eAAR,CAAwBY,QAAxB,CAAiCJ,IAAI,CAACK,OAAtC,CAAV;AACD,KAFD,MAEO,IAAId,OAAO,CAACE,kBAAZ,EAAgC;AACrCU,MAAAA,MAAM,GAAGZ,OAAO,CAACE,kBAAR,CAA2BW,QAA3B,CAAoCJ,IAAI,CAACK,OAAzC,CAAT;AACD;;AAED,QAAI,CAACF,MAAD,IAAWZ,OAAO,CAACI,YAAvB,EAAqC;AACnCQ,MAAAA,MAAM,GAAG,CAACZ,OAAO,CAACI,YAAR,CAAqBK,IAArB,EAA2BC,KAA3B,EAAkCC,MAAlC,CAAV;AACD;;AAED,QAAIC,MAAJ,EAAY;AACV;AACA,UAAIG,UAAU,GAAG,CAACL,KAAD,EAAQ,CAAR,CAAjB;;AAEA,UAAIV,OAAO,CAACgB,gBAAR,IAA4BP,IAAI,CAACQ,QAArC,EAA+C;AAC7CF,QAAAA,UAAU,GAAGA,UAAU,CAACG,MAAX,CAAkBT,IAAI,CAACQ,QAAvB,CAAb;AACD;;AAEDrB,MAAAA,MAAM,CAACuB,KAAP,CAAaR,MAAM,CAACM,QAApB,EAA8BF,UAA9B;AACA,aAAOL,KAAP;AACD;;AAED,WAAOJ,SAAP;AACD;AACF","sourcesContent":["const visit = require('unist-util-visit')\n\nconst splice = [].splice\n\nmodule.exports = rehypeFilter\n\n/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean}\n *\n * @typedef {Object} RehypeFilterOptions\n * @property {Array.<string>} [allowedElements]\n * @property {Array.<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @param {RehypeFilterOptions} options\n */\nfunction rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError(\n      'Only one of `allowedElements` and `disallowedElements` should be defined'\n    )\n  }\n\n  return options.allowedElements ||\n    options.disallowedElements ||\n    options.allowElement\n    ? transform\n    : undefined\n\n  /**\n   * @param {Root} tree\n   */\n  function transform(tree) {\n    visit(tree, 'element', onelement)\n  }\n\n  /**\n   * @param {Element} node\n   * @param {number} index\n   * @param {Element|Root} parent\n   * @returns {number|void}\n   */\n  function onelement(node, index, parent) {\n    /** @type {boolean} */\n    let remove\n\n    if (options.allowedElements) {\n      remove = !options.allowedElements.includes(node.tagName)\n    } else if (options.disallowedElements) {\n      remove = options.disallowedElements.includes(node.tagName)\n    }\n\n    if (!remove && options.allowElement) {\n      remove = !options.allowElement(node, index, parent)\n    }\n\n    if (remove) {\n      /** @type {Array.<unknown>} */\n      let parameters = [index, 1]\n\n      if (options.unwrapDisallowed && node.children) {\n        parameters = parameters.concat(node.children)\n      }\n\n      splice.apply(parent.children, parameters)\n      return index\n    }\n\n    return undefined\n  }\n}\n"]},"metadata":{},"sourceType":"script"}