{"ast":null,"code":"var _jsxFileName = \"/Users/josephlou/Documents/Files/Princeton/grading/grader-drill-app/client/src/App/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { Component, useState, useEffect } from \"react\";\nimport { Switch, Route, Link, useParams } from \"react-router-dom\";\nimport GradingDashboard from \"./components/dashboardView\";\nimport GradingView from \"./components/gradingView\";\nimport QuestionsView from \"./components/questionsView\";\nimport QuestionEditView from \"./components/questionEditView\";\nimport Question from \"./components/question\";\nimport \"./App.css\";\n/*\n// saving this just in case i want to use this code for database stuff\n\nupdateQuestion = (question) => {\n    let found = false;\n    let answered = this.state.answered.map((q) => {\n        if (q.trainee === question.trainee && q.id === question.id) {\n            found = true;\n            return question;\n        }\n        return q;\n    });\n    if (!found) {\n        return;\n    }\n    this.setState({ answered: answered });\n};\n\nhandleAddHighlight = (question, highlight) => {\n    let highlights = [...question.highlights];\n    highlights.push(highlight);\n    let answers = [...question.answers];\n    answers.push(\"\");\n    question[\"highlights\"] = highlights;\n    question[\"answers\"] = answers;\n    this.updateQuestion(question);\n};\n\nhandleClearHighlights = (question) => {\n    let highlights = [];\n    let answers = [];\n    question.highlights.forEach((h, i) => {\n        if (!h.byUser) {\n            highlights.push(h);\n            answers.push(question.answers[i]);\n        }\n    });\n    question[\"highlights\"] = highlights;\n    question[\"answers\"] = answers;\n    this.updateQuestion(question);\n};\n\nhandleDeleteHighlight = (question, highlightIndex) => {\n    let highlights = [...question.highlights];\n    highlights.splice(highlightIndex, 1);\n    let answers = [...question.answers];\n    answers.splice(highlightIndex, 1);\n    question[\"highlights\"] = highlights;\n    question[\"answers\"] = answers;\n    this.updateQuestion(question);\n};\n\nhandleAnswerChange = (question, answerIndex, value) => {\n    let answers = [...question.answers];\n    answers[answerIndex] = value;\n    question[\"answers\"] = answers;\n    this.updateQuestion(question);\n};\n\nhandleMCSelect = (question, answerIndex) => {\n    question[\"answer\"] = answerIndex;\n    this.updateQuestion(question);\n};\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      hideGraded: false,\n      questions: {\n        1: {\n          id: 1,\n          hasCodeField: true,\n          hasAnswerField: true,\n          questionType: \"Comment\",\n          questionText: \"What's wrong with this code?\",\n          code: 'public class Question {\\n    public static void main(String[] args) {\\n        System.out.println(\"Hello world\");\\n    }\\n}',\n          highlights: [// { startLine: 0, startChar: 14, endLine: 1, endChar: 5, byUser: false },\n            // { startLine: 1, startChar: 8, endLine: 1, endChar: 11, byUser: false },\n          ],\n          rubric: [{\n            points: 1,\n            text: \"Says that nothing is wrong with the code\"\n          }]\n        },\n        2: {\n          id: 2,\n          hasCodeField: false,\n          hasAnswerField: true,\n          questionType: \"Multiple Choice\",\n          questionText: \"What would you say to a student who uses `Integer` where they should use `int`?\",\n          answerChoices: [\"You should use `int` because it's shorter to type.\", \"`Integer` is a wrapper object and is not necessary for all cases.\", \"Always use `Integer` because it's an object.\"],\n          correct: 1\n        }\n      },\n      answered: [{\n        id: 1,\n        trainee: \"trainee1\",\n        hasCodeField: true,\n        hasAnswerField: true,\n        questionType: \"Comment\",\n        questionText: \"What's wrong with this `code`?\",\n        code: 'public class Question {\\n    public static void main(String[] args) {\\n        System.out.println(\"Hello world\");\\n    }\\n}\\nmore lines\\nmore\\n\\nlines\\n!\\n!\\nthis is a really long line for testing purposes to see if the scroll bar will show up here properly or not',\n        highlights: [{\n          startLine: 0,\n          startChar: 14,\n          endLine: 1,\n          endChar: 5,\n          byUser: false,\n          text: \"this is existing text\"\n        }, {\n          startLine: 1,\n          startChar: 8,\n          endLine: 1,\n          endChar: 11,\n          byUser: true\n        }],\n        answers: [\"this is highlight 1\", \"this is another highlight\"],\n        rubric: [{\n          points: 1,\n          text: \"Says that nothing is wrong with the code\",\n          checked: false\n        }],\n        graded: false\n      }, {\n        id: 2,\n        assessor: \"Auto-graded\",\n        trainee: \"trainee2\",\n        hasCodeField: false,\n        hasAnswerField: true,\n        questionType: \"Multiple Choice\",\n        questionText: \"What would you say to a student who uses `Integer` where they should use `int`?\",\n        answerChoices: [\"You should use `int` because it's shorter to type.\", \"`Integer` is a wrapper object and is not necessary for all cases.\", \"Always use `Integer` because it's an object.\"],\n        correct: 1,\n        answer: 0,\n        score: 0,\n        graded: true\n      }]\n    };\n\n    this.handleHideGraded = () => {\n      this.setState({\n        hideGraded: !this.state.hideGraded\n      });\n    };\n  }\n\n  componentDidMount() {// fetch(\"/api/getQuestion/1\")\n    //     .then((res) => res.json())\n    //     .then((message) => console.log(message));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        className: \"navbar navbar-expand-lg navbar-light bg-light\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container-fluid\",\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: \"/\",\n            className: \"navbar-brand\",\n            children: \"Grader Drill\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"collapse navbar-collapse\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"navbar-nav\",\n              children: [/*#__PURE__*/_jsxDEV(Link, {\n                to: \"/\",\n                className: \"nav-link\",\n                children: \"Dashboard\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Link, {\n                to: \"/grading\",\n                className: \"nav-link\",\n                children: \"Grading\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Link, {\n                to: \"/questions\",\n                className: \"nav-link\",\n                children: \"Questions\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          children: /*#__PURE__*/_jsxDEV(GradingDashboard, {\n            hideGraded: this.state.hideGraded,\n            onHideGraded: this.handleHideGraded\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/grading\",\n          children: /*#__PURE__*/_jsxDEV(GradingView, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/grading/:trainee/:questionId\",\n          children: /*#__PURE__*/_jsxDEV(GradingView, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/questions\",\n          children: /*#__PURE__*/_jsxDEV(QuestionsView, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/questions/new\",\n          children: /*#__PURE__*/_jsxDEV(QuestionEditView, {\n            newQuestion: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/questions/edit/:questionId\",\n          children: /*#__PURE__*/_jsxDEV(EditQuestion, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/question\",\n          children: /*#__PURE__*/_jsxDEV(ShowQuestion, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"*\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Page not found\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst ShowQuestion = () => {\n  _s();\n\n  const [question, setQuestion] = useState({\n    id: null\n  });\n  const questionId = 1;\n  useEffect(() => {\n    let isMounted = true;\n    fetch(`/api/getQuestion/${questionId}`).then(res => res.json()).then(q => {\n      if (isMounted) {\n        console.log(\"got question\");\n        setQuestion(q);\n      }\n    });\n    return () => {\n      isMounted = false;\n    };\n  }, [questionId]);\n  return /*#__PURE__*/_jsxDEV(Question, {\n    question: question\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 12\n  }, this);\n};\n\n_s(ShowQuestion, \"Jz90X6iSSUAVZXKTyq/S/v4UkdI=\");\n\n_c = ShowQuestion;\n\nfunction EditQuestion(eventHandlers) {\n  _s2();\n\n  const {\n    questionId\n  } = useParams();\n  return /*#__PURE__*/_jsxDEV(QuestionEditView, {\n    newQuestion: false,\n    questionId: questionId,\n    ...eventHandlers\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 270,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(EditQuestion, \"lUaPE6BoIdosngACi+3QMTlq4F4=\", false, function () {\n  return [useParams];\n});\n\n_c2 = EditQuestion;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ShowQuestion\");\n$RefreshReg$(_c2, \"EditQuestion\");","map":{"version":3,"sources":["/Users/josephlou/Documents/Files/Princeton/grading/grader-drill-app/client/src/App/App.js"],"names":["React","Component","useState","useEffect","Switch","Route","Link","useParams","GradingDashboard","GradingView","QuestionsView","QuestionEditView","Question","App","state","hideGraded","questions","id","hasCodeField","hasAnswerField","questionType","questionText","code","highlights","rubric","points","text","answerChoices","correct","answered","trainee","startLine","startChar","endLine","endChar","byUser","answers","checked","graded","assessor","answer","score","handleHideGraded","setState","componentDidMount","render","ShowQuestion","question","setQuestion","questionId","isMounted","fetch","then","res","json","q","console","log","EditQuestion","eventHandlers"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport { Switch, Route, Link, useParams } from \"react-router-dom\";\nimport GradingDashboard from \"./components/dashboardView\";\nimport GradingView from \"./components/gradingView\";\nimport QuestionsView from \"./components/questionsView\";\nimport QuestionEditView from \"./components/questionEditView\";\nimport Question from \"./components/question\";\nimport \"./App.css\";\n\n/*\n// saving this just in case i want to use this code for database stuff\n\nupdateQuestion = (question) => {\n    let found = false;\n    let answered = this.state.answered.map((q) => {\n        if (q.trainee === question.trainee && q.id === question.id) {\n            found = true;\n            return question;\n        }\n        return q;\n    });\n    if (!found) {\n        return;\n    }\n    this.setState({ answered: answered });\n};\n\nhandleAddHighlight = (question, highlight) => {\n    let highlights = [...question.highlights];\n    highlights.push(highlight);\n    let answers = [...question.answers];\n    answers.push(\"\");\n    question[\"highlights\"] = highlights;\n    question[\"answers\"] = answers;\n    this.updateQuestion(question);\n};\n\nhandleClearHighlights = (question) => {\n    let highlights = [];\n    let answers = [];\n    question.highlights.forEach((h, i) => {\n        if (!h.byUser) {\n            highlights.push(h);\n            answers.push(question.answers[i]);\n        }\n    });\n    question[\"highlights\"] = highlights;\n    question[\"answers\"] = answers;\n    this.updateQuestion(question);\n};\n\nhandleDeleteHighlight = (question, highlightIndex) => {\n    let highlights = [...question.highlights];\n    highlights.splice(highlightIndex, 1);\n    let answers = [...question.answers];\n    answers.splice(highlightIndex, 1);\n    question[\"highlights\"] = highlights;\n    question[\"answers\"] = answers;\n    this.updateQuestion(question);\n};\n\nhandleAnswerChange = (question, answerIndex, value) => {\n    let answers = [...question.answers];\n    answers[answerIndex] = value;\n    question[\"answers\"] = answers;\n    this.updateQuestion(question);\n};\n\nhandleMCSelect = (question, answerIndex) => {\n    question[\"answer\"] = answerIndex;\n    this.updateQuestion(question);\n};\n*/\n\nclass App extends Component {\n    state = {\n        hideGraded: false,\n        questions: {\n            1: {\n                id: 1,\n                hasCodeField: true,\n                hasAnswerField: true,\n                questionType: \"Comment\",\n                questionText: \"What's wrong with this code?\",\n                code: 'public class Question {\\n    public static void main(String[] args) {\\n        System.out.println(\"Hello world\");\\n    }\\n}',\n                highlights: [\n                    // { startLine: 0, startChar: 14, endLine: 1, endChar: 5, byUser: false },\n                    // { startLine: 1, startChar: 8, endLine: 1, endChar: 11, byUser: false },\n                ],\n                rubric: [\n                    {\n                        points: 1,\n                        text: \"Says that nothing is wrong with the code\",\n                    },\n                ],\n            },\n            2: {\n                id: 2,\n                hasCodeField: false,\n                hasAnswerField: true,\n                questionType: \"Multiple Choice\",\n                questionText:\n                    \"What would you say to a student who uses `Integer` where they should use `int`?\",\n                answerChoices: [\n                    \"You should use `int` because it's shorter to type.\",\n                    \"`Integer` is a wrapper object and is not necessary for all cases.\",\n                    \"Always use `Integer` because it's an object.\",\n                ],\n                correct: 1,\n            },\n        },\n        answered: [\n            {\n                id: 1,\n                trainee: \"trainee1\",\n                hasCodeField: true,\n                hasAnswerField: true,\n                questionType: \"Comment\",\n                questionText: \"What's wrong with this `code`?\",\n                code: 'public class Question {\\n    public static void main(String[] args) {\\n        System.out.println(\"Hello world\");\\n    }\\n}\\nmore lines\\nmore\\n\\nlines\\n!\\n!\\nthis is a really long line for testing purposes to see if the scroll bar will show up here properly or not',\n                highlights: [\n                    {\n                        startLine: 0,\n                        startChar: 14,\n                        endLine: 1,\n                        endChar: 5,\n                        byUser: false,\n                        text: \"this is existing text\",\n                    },\n                    {\n                        startLine: 1,\n                        startChar: 8,\n                        endLine: 1,\n                        endChar: 11,\n                        byUser: true,\n                    },\n                ],\n                answers: [\"this is highlight 1\", \"this is another highlight\"],\n                rubric: [\n                    {\n                        points: 1,\n                        text: \"Says that nothing is wrong with the code\",\n                        checked: false,\n                    },\n                ],\n                graded: false,\n            },\n            {\n                id: 2,\n                assessor: \"Auto-graded\",\n                trainee: \"trainee2\",\n                hasCodeField: false,\n                hasAnswerField: true,\n                questionType: \"Multiple Choice\",\n                questionText:\n                    \"What would you say to a student who uses `Integer` where they should use `int`?\",\n                answerChoices: [\n                    \"You should use `int` because it's shorter to type.\",\n                    \"`Integer` is a wrapper object and is not necessary for all cases.\",\n                    \"Always use `Integer` because it's an object.\",\n                ],\n                correct: 1,\n                answer: 0,\n                score: 0,\n                graded: true,\n            },\n        ],\n    };\n\n    componentDidMount() {\n        // fetch(\"/api/getQuestion/1\")\n        //     .then((res) => res.json())\n        //     .then((message) => console.log(message));\n    }\n\n    handleHideGraded = () => {\n        this.setState({ hideGraded: !this.state.hideGraded });\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                {/* navbar */}\n                <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                    <div className=\"container-fluid\">\n                        <Link to=\"/\" className=\"navbar-brand\">\n                            Grader Drill\n                        </Link>\n                        <div className=\"collapse navbar-collapse\">\n                            <div className=\"navbar-nav\">\n                                <Link to=\"/\" className=\"nav-link\">\n                                    Dashboard\n                                </Link>\n                                <Link to=\"/grading\" className=\"nav-link\">\n                                    Grading\n                                </Link>\n                                <Link to=\"/questions\" className=\"nav-link\">\n                                    Questions\n                                </Link>\n                            </div>\n                        </div>\n                    </div>\n                </nav>\n\n                <Switch>\n                    {/* dashboard (home) */}\n                    <Route exact path=\"/\">\n                        <GradingDashboard\n                            hideGraded={this.state.hideGraded}\n                            onHideGraded={this.handleHideGraded}\n                        />\n                    </Route>\n\n                    {/* grading */}\n                    <Route exact path=\"/grading\">\n                        <GradingView />\n                    </Route>\n                    <Route path=\"/grading/:trainee/:questionId\">\n                        <GradingView />\n                    </Route>\n\n                    {/* questions */}\n                    <Route exact path=\"/questions\">\n                        <QuestionsView />\n                    </Route>\n                    <Route exact path=\"/questions/new\">\n                        <QuestionEditView newQuestion={true} />\n                    </Route>\n                    <Route path=\"/questions/edit/:questionId\">\n                        <EditQuestion />\n                    </Route>\n\n                    <Route path=\"/question\">\n                        <ShowQuestion />\n                    </Route>\n\n                    {/* catch-all for page not found */}\n                    <Route path=\"*\">\n                        <h1>Page not found</h1>\n                    </Route>\n                </Switch>\n            </div>\n        );\n    }\n}\n\nconst ShowQuestion = () => {\n    const [question, setQuestion] = useState({ id: null });\n    const questionId = 1;\n    useEffect(() => {\n        let isMounted = true;\n        fetch(`/api/getQuestion/${questionId}`)\n            .then((res) => res.json())\n            .then((q) => {\n                if (isMounted) {\n                    console.log(\"got question\");\n                    setQuestion(q);\n                }\n            });\n        return () => {\n            isMounted = false;\n        };\n    }, [questionId]);\n    return <Question question={question} />;\n};\n\nfunction EditQuestion(eventHandlers) {\n    const { questionId } = useParams();\n    return (\n        <QuestionEditView\n            newQuestion={false}\n            questionId={questionId}\n            {...eventHandlers}\n        />\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}