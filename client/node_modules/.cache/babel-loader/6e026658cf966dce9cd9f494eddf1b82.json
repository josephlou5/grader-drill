{"ast":null,"code":"var _jsxFileName = \"/Users/josephlou/Documents/Files/Princeton/grading/grader-drill-app/client/src/App/components/gradingView.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Link, useParams, useHistory } from \"react-router-dom\";\nimport { getAllAnswered, getAnswered } from \"../api\";\nimport Question from \"./question\";\nimport RubricField from \"./rubricField\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GradingView() {\n  _s();\n\n  const [needsQuestion, setNeedsQuestion] = useState(true);\n  const [question, setQuestion] = useState(null);\n  const [rubric, setRubric] = useState(null);\n  const [score, setScore] = useState(0);\n  const history = useHistory();\n  const {\n    trainee,\n    questionId\n  } = useParams();\n  const specificQuestion = !!(trainee && questionId); // todo: find out the assessor\n\n  const assessor = \"jdlou\";\n  useEffect(() => {\n    if (!needsQuestion) return;\n\n    function processQuestion(q) {\n      setNeedsQuestion(false);\n\n      if (!q) {\n        setQuestion(null);\n        console.log(\"Invalid question\");\n        return;\n      }\n\n      if (q.graded) {\n        setScore(q.score);\n        setRubric(q.rubric);\n      } else if (q.questionType === \"Multiple Choice\") {\n        if (q.answer === q.correct) {\n          setScore(100);\n        }\n      } else {\n        setRubric(q.rubric.map(item => {\n          return { ...item,\n            checked: !!item.checked\n          };\n        }));\n\n        if (q.score) {\n          setScore(q.score);\n        }\n      }\n\n      setQuestion(q);\n      console.log(log);\n    }\n\n    if (specificQuestion) {\n      // get the specified question\n      getAnswered(trainee, questionId, processQuestion);\n    } else {\n      // get the first ungraded question\n      getAllAnswered(answered => {\n        const nextUngraded = answered.find(q => // ungraded\n        !q.graded && // not the same question as the current\n        !(question && q.trainee === question.trainee && q.id === question.id));\n        processQuestion(nextUngraded);\n      });\n    }\n  });\n\n  if (needsQuestion && !question) {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Grading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Getting question...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this);\n  }\n\n  if (!question) {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Grading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: specificQuestion ? \"Invalid question\" : \"Nothing to grade!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this);\n  }\n\n  function handleCheckChange(index) {\n    const checked = !rubric[index].checked;\n    const multiplier = checked ? 1 : -1;\n    setRubric(rubric.map((item, i) => {\n      if (i === index) {\n        return { ...item,\n          checked\n        };\n      } else {\n        return item;\n      }\n    }));\n    setScore(score + multiplier * rubric[index].points);\n  }\n\n  function handleCancel() {\n    history.goBack();\n  }\n\n  function handleNext() {\n    setNeedsQuestion(true);\n  }\n\n  function handleSave() {\n    let savedQuestion = { ...question,\n      assessor,\n      score,\n      graded: true\n    };\n\n    if (question.questionType !== \"Multiple Choice\") {\n      savedQuestion[\"rubric\"] = rubric;\n    }\n\n    fetch(\"/api/updateAnswered\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(savedQuestion)\n    }).then(() => console.log(`Updated answered for question ${question.id} and trainee ${question.trainee}`));\n  }\n\n  let rubricField = null;\n\n  if (question.questionType !== \"Multiple Choice\") {\n    let rubricFieldProps = {\n      question\n    };\n\n    if (question.graded) {\n      rubricFieldProps[\"noChange\"] = true;\n    } else {\n      Object.assign(rubricFieldProps, {\n        rubric,\n        onCheckChange: handleCheckChange\n      });\n    }\n\n    rubricField = /*#__PURE__*/_jsxDEV(RubricField, { ...rubricFieldProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 23\n    }, this);\n  }\n\n  let buttons = [];\n\n  if (!question.graded) {\n    buttons.push({\n      variant: \"danger\",\n      onClick: handleCancel,\n      text: \"Cancel\"\n    });\n    buttons.push({\n      variant: \"success\",\n      onClick: handleSave,\n      text: \"Save\"\n    });\n  }\n\n  if (!specificQuestion) {\n    buttons.push({\n      variant: \"secondary\",\n      onClick: handleNext,\n      text: \"Skip\"\n    });\n    buttons.push({\n      variant: \"warning\",\n      onClick: () => {\n        handleSave();\n        handleNext();\n      },\n      text: \"Next\"\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Grading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Trainee: \", question.trainee]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Assessor: \", assessor]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-6\",\n        children: /*#__PURE__*/_jsxDEV(Question, {\n          question: question,\n          noChange: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-6\",\n        children: [\"Score: \" + score, rubricField, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"position-absolute bottom-0 d-flex justify-content-center\",\n          children: [buttons.map(({\n            variant,\n            onClick,\n            text\n          }, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-\" + variant + \" m-2\",\n            onClick: onClick,\n            children: text\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 29\n          }, this)), /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-light m-2\",\n              children: \"Done\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GradingView, \"tHLBbftMNYIVUU6hryvGdm9iGI4=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = GradingView;\n\nvar _c;\n\n$RefreshReg$(_c, \"GradingView\");","map":{"version":3,"sources":["/Users/josephlou/Documents/Files/Princeton/grading/grader-drill-app/client/src/App/components/gradingView.jsx"],"names":["React","useState","useEffect","Link","useParams","useHistory","getAllAnswered","getAnswered","Question","RubricField","GradingView","needsQuestion","setNeedsQuestion","question","setQuestion","rubric","setRubric","score","setScore","history","trainee","questionId","specificQuestion","assessor","processQuestion","q","console","log","graded","questionType","answer","correct","map","item","checked","answered","nextUngraded","find","id","handleCheckChange","index","multiplier","i","points","handleCancel","goBack","handleNext","handleSave","savedQuestion","fetch","method","headers","body","JSON","stringify","then","rubricField","rubricFieldProps","Object","assign","onCheckChange","buttons","push","variant","onClick","text"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,SAAf,EAA0BC,UAA1B,QAA4C,kBAA5C;AACA,SAASC,cAAT,EAAyBC,WAAzB,QAA4C,QAA5C;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,eAAe,SAASC,WAAT,GAAuB;AAAA;;AAClC,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCX,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACc,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACgB,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAAC,CAAD,CAAlC;AAEA,QAAMkB,OAAO,GAAGd,UAAU,EAA1B;AAEA,QAAM;AAAEe,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAA0BjB,SAAS,EAAzC;AACA,QAAMkB,gBAAgB,GAAG,CAAC,EAAEF,OAAO,IAAIC,UAAb,CAA1B,CATkC,CAWlC;;AACA,QAAME,QAAQ,GAAG,OAAjB;AAEArB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACS,aAAL,EAAoB;;AAEpB,aAASa,eAAT,CAAyBC,CAAzB,EAA4B;AACxBb,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;;AAEA,UAAI,CAACa,CAAL,EAAQ;AACJX,QAAAA,WAAW,CAAC,IAAD,CAAX;AACAY,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA;AACH;;AAED,UAAIF,CAAC,CAACG,MAAN,EAAc;AACVV,QAAAA,QAAQ,CAACO,CAAC,CAACR,KAAH,CAAR;AACAD,QAAAA,SAAS,CAACS,CAAC,CAACV,MAAH,CAAT;AACH,OAHD,MAGO,IAAIU,CAAC,CAACI,YAAF,KAAmB,iBAAvB,EAA0C;AAC7C,YAAIJ,CAAC,CAACK,MAAF,KAAaL,CAAC,CAACM,OAAnB,EAA4B;AACxBb,UAAAA,QAAQ,CAAC,GAAD,CAAR;AACH;AACJ,OAJM,MAIA;AACHF,QAAAA,SAAS,CACLS,CAAC,CAACV,MAAF,CAASiB,GAAT,CAAcC,IAAD,IAAU;AACnB,iBAAO,EAAE,GAAGA,IAAL;AAAWC,YAAAA,OAAO,EAAE,CAAC,CAACD,IAAI,CAACC;AAA3B,WAAP;AACH,SAFD,CADK,CAAT;;AAKA,YAAIT,CAAC,CAACR,KAAN,EAAa;AACTC,UAAAA,QAAQ,CAACO,CAAC,CAACR,KAAH,CAAR;AACH;AACJ;;AACDH,MAAAA,WAAW,CAACW,CAAD,CAAX;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYA,GAAZ;AACH;;AAED,QAAIL,gBAAJ,EAAsB;AAClB;AACAf,MAAAA,WAAW,CAACa,OAAD,EAAUC,UAAV,EAAsBG,eAAtB,CAAX;AACH,KAHD,MAGO;AACH;AACAlB,MAAAA,cAAc,CAAE6B,QAAD,IAAc;AACzB,cAAMC,YAAY,GAAGD,QAAQ,CAACE,IAAT,CAChBZ,CAAD,IACI;AACA,SAACA,CAAC,CAACG,MAAH,IACA;AACA,UACIf,QAAQ,IACRY,CAAC,CAACL,OAAF,KAAcP,QAAQ,CAACO,OADvB,IAEAK,CAAC,CAACa,EAAF,KAASzB,QAAQ,CAACyB,EAHtB,CALa,CAArB;AAWAd,QAAAA,eAAe,CAACY,YAAD,CAAf;AACH,OAba,CAAd;AAcH;AACJ,GArDQ,CAAT;;AAuDA,MAAIzB,aAAa,IAAI,CAACE,QAAtB,EAAgC;AAC5B,wBACI,QAAC,KAAD,CAAO,QAAP;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;;AAED,MAAI,CAACA,QAAL,EAAe;AACX,wBACI,QAAC,KAAD,CAAO,QAAP;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,kBACKS,gBAAgB,GACX,kBADW,GAEX;AAHV;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAUH;;AAED,WAASiB,iBAAT,CAA2BC,KAA3B,EAAkC;AAC9B,UAAMN,OAAO,GAAG,CAACnB,MAAM,CAACyB,KAAD,CAAN,CAAcN,OAA/B;AACA,UAAMO,UAAU,GAAGP,OAAO,GAAG,CAAH,GAAO,CAAC,CAAlC;AACAlB,IAAAA,SAAS,CACLD,MAAM,CAACiB,GAAP,CAAW,CAACC,IAAD,EAAOS,CAAP,KAAa;AACpB,UAAIA,CAAC,KAAKF,KAAV,EAAiB;AACb,eAAO,EAAE,GAAGP,IAAL;AAAWC,UAAAA;AAAX,SAAP;AACH,OAFD,MAEO;AACH,eAAOD,IAAP;AACH;AACJ,KAND,CADK,CAAT;AASAf,IAAAA,QAAQ,CAACD,KAAK,GAAGwB,UAAU,GAAG1B,MAAM,CAACyB,KAAD,CAAN,CAAcG,MAApC,CAAR;AACH;;AAED,WAASC,YAAT,GAAwB;AACpBzB,IAAAA,OAAO,CAAC0B,MAAR;AACH;;AAED,WAASC,UAAT,GAAsB;AAClBlC,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACH;;AAED,WAASmC,UAAT,GAAsB;AAClB,QAAIC,aAAa,GAAG,EAAE,GAAGnC,QAAL;AAAeU,MAAAA,QAAf;AAAyBN,MAAAA,KAAzB;AAAgCW,MAAAA,MAAM,EAAE;AAAxC,KAApB;;AACA,QAAIf,QAAQ,CAACgB,YAAT,KAA0B,iBAA9B,EAAiD;AAC7CmB,MAAAA,aAAa,CAAC,QAAD,CAAb,GAA0BjC,MAA1B;AACH;;AACDkC,IAAAA,KAAK,CAAC,qBAAD,EAAwB;AACzBC,MAAAA,MAAM,EAAE,MADiB;AAEzBC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFgB;AAGzBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,aAAf;AAHmB,KAAxB,CAAL,CAIGO,IAJH,CAIQ,MACJ7B,OAAO,CAACC,GAAR,CACK,iCAAgCd,QAAQ,CAACyB,EAAG,gBAAezB,QAAQ,CAACO,OAAQ,EADjF,CALJ;AASH;;AAED,MAAIoC,WAAW,GAAG,IAAlB;;AACA,MAAI3C,QAAQ,CAACgB,YAAT,KAA0B,iBAA9B,EAAiD;AAC7C,QAAI4B,gBAAgB,GAAG;AAAE5C,MAAAA;AAAF,KAAvB;;AACA,QAAIA,QAAQ,CAACe,MAAb,EAAqB;AACjB6B,MAAAA,gBAAgB,CAAC,UAAD,CAAhB,GAA+B,IAA/B;AACH,KAFD,MAEO;AACHC,MAAAA,MAAM,CAACC,MAAP,CAAcF,gBAAd,EAAgC;AAC5B1C,QAAAA,MAD4B;AAE5B6C,QAAAA,aAAa,EAAErB;AAFa,OAAhC;AAIH;;AACDiB,IAAAA,WAAW,gBAAG,QAAC,WAAD,OAAiBC;AAAjB;AAAA;AAAA;AAAA;AAAA,YAAd;AACH;;AAED,MAAII,OAAO,GAAG,EAAd;;AACA,MAAI,CAAChD,QAAQ,CAACe,MAAd,EAAsB;AAClBiC,IAAAA,OAAO,CAACC,IAAR,CAAa;AACTC,MAAAA,OAAO,EAAE,QADA;AAETC,MAAAA,OAAO,EAAEpB,YAFA;AAGTqB,MAAAA,IAAI,EAAE;AAHG,KAAb;AAKAJ,IAAAA,OAAO,CAACC,IAAR,CAAa;AACTC,MAAAA,OAAO,EAAE,SADA;AAETC,MAAAA,OAAO,EAAEjB,UAFA;AAGTkB,MAAAA,IAAI,EAAE;AAHG,KAAb;AAKH;;AACD,MAAI,CAAC3C,gBAAL,EAAuB;AACnBuC,IAAAA,OAAO,CAACC,IAAR,CAAa;AACTC,MAAAA,OAAO,EAAE,WADA;AAETC,MAAAA,OAAO,EAAElB,UAFA;AAGTmB,MAAAA,IAAI,EAAE;AAHG,KAAb;AAKAJ,IAAAA,OAAO,CAACC,IAAR,CAAa;AACTC,MAAAA,OAAO,EAAE,SADA;AAETC,MAAAA,OAAO,EAAE,MAAM;AACXjB,QAAAA,UAAU;AACVD,QAAAA,UAAU;AACb,OALQ;AAMTmB,MAAAA,IAAI,EAAE;AANG,KAAb;AAQH;;AAED,sBACI,QAAC,KAAD,CAAO,QAAP;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACI;AAAA,gCAAepD,QAAQ,CAACO,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,iCAAgBG,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,+BACI,QAAC,QAAD;AAAU,UAAA,QAAQ,EAAEV,QAApB;AAA8B,UAAA,QAAQ,EAAE;AAAxC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAHJ,eAMI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,mBACK,YAAYI,KADjB,EAEKuC,WAFL,eAGI;AAAK,UAAA,SAAS,EAAC,0DAAf;AAAA,qBACKK,OAAO,CAAC7B,GAAR,CAAY,CAAC;AAAE+B,YAAAA,OAAF;AAAWC,YAAAA,OAAX;AAAoBC,YAAAA;AAApB,WAAD,EAA6BzB,KAA7B,kBACT;AAEI,YAAA,IAAI,EAAC,QAFT;AAGI,YAAA,SAAS,EAAE,aAAauB,OAAb,GAAuB,MAHtC;AAII,YAAA,OAAO,EAAEC,OAJb;AAAA,sBAMKC;AANL,aACSzB,KADT;AAAA;AAAA;AAAA;AAAA,kBADH,CADL,eAWI,QAAC,IAAD;AAAM,YAAA,EAAE,EAAC,GAAT;AAAA,mCACI;AAAQ,cAAA,IAAI,EAAC,QAAb;AAAsB,cAAA,SAAS,EAAC,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiCH;;GA9MuB9B,W;UAMJL,U,EAEgBD,S;;;KARZM,W","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link, useParams, useHistory } from \"react-router-dom\";\nimport { getAllAnswered, getAnswered } from \"../api\";\nimport Question from \"./question\";\nimport RubricField from \"./rubricField\";\n\nexport default function GradingView() {\n    const [needsQuestion, setNeedsQuestion] = useState(true);\n    const [question, setQuestion] = useState(null);\n    const [rubric, setRubric] = useState(null);\n    const [score, setScore] = useState(0);\n\n    const history = useHistory();\n\n    const { trainee, questionId } = useParams();\n    const specificQuestion = !!(trainee && questionId);\n\n    // todo: find out the assessor\n    const assessor = \"jdlou\";\n\n    useEffect(() => {\n        if (!needsQuestion) return;\n\n        function processQuestion(q) {\n            setNeedsQuestion(false);\n\n            if (!q) {\n                setQuestion(null);\n                console.log(\"Invalid question\");\n                return;\n            }\n\n            if (q.graded) {\n                setScore(q.score);\n                setRubric(q.rubric);\n            } else if (q.questionType === \"Multiple Choice\") {\n                if (q.answer === q.correct) {\n                    setScore(100);\n                }\n            } else {\n                setRubric(\n                    q.rubric.map((item) => {\n                        return { ...item, checked: !!item.checked };\n                    })\n                );\n                if (q.score) {\n                    setScore(q.score);\n                }\n            }\n            setQuestion(q);\n            console.log(log);\n        }\n\n        if (specificQuestion) {\n            // get the specified question\n            getAnswered(trainee, questionId, processQuestion);\n        } else {\n            // get the first ungraded question\n            getAllAnswered((answered) => {\n                const nextUngraded = answered.find(\n                    (q) =>\n                        // ungraded\n                        !q.graded &&\n                        // not the same question as the current\n                        !(\n                            question &&\n                            q.trainee === question.trainee &&\n                            q.id === question.id\n                        )\n                );\n                processQuestion(nextUngraded);\n            });\n        }\n    });\n\n    if (needsQuestion && !question) {\n        return (\n            <React.Fragment>\n                <h1>Grading</h1>\n                <p>Getting question...</p>\n            </React.Fragment>\n        );\n    }\n\n    if (!question) {\n        return (\n            <React.Fragment>\n                <h1>Grading</h1>\n                <p>\n                    {specificQuestion\n                        ? \"Invalid question\"\n                        : \"Nothing to grade!\"}\n                </p>\n            </React.Fragment>\n        );\n    }\n\n    function handleCheckChange(index) {\n        const checked = !rubric[index].checked;\n        const multiplier = checked ? 1 : -1;\n        setRubric(\n            rubric.map((item, i) => {\n                if (i === index) {\n                    return { ...item, checked };\n                } else {\n                    return item;\n                }\n            })\n        );\n        setScore(score + multiplier * rubric[index].points);\n    }\n\n    function handleCancel() {\n        history.goBack();\n    }\n\n    function handleNext() {\n        setNeedsQuestion(true);\n    }\n\n    function handleSave() {\n        let savedQuestion = { ...question, assessor, score, graded: true };\n        if (question.questionType !== \"Multiple Choice\") {\n            savedQuestion[\"rubric\"] = rubric;\n        }\n        fetch(\"/api/updateAnswered\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(savedQuestion),\n        }).then(() =>\n            console.log(\n                `Updated answered for question ${question.id} and trainee ${question.trainee}`\n            )\n        );\n    }\n\n    let rubricField = null;\n    if (question.questionType !== \"Multiple Choice\") {\n        let rubricFieldProps = { question };\n        if (question.graded) {\n            rubricFieldProps[\"noChange\"] = true;\n        } else {\n            Object.assign(rubricFieldProps, {\n                rubric,\n                onCheckChange: handleCheckChange,\n            });\n        }\n        rubricField = <RubricField {...rubricFieldProps} />;\n    }\n\n    let buttons = [];\n    if (!question.graded) {\n        buttons.push({\n            variant: \"danger\",\n            onClick: handleCancel,\n            text: \"Cancel\",\n        });\n        buttons.push({\n            variant: \"success\",\n            onClick: handleSave,\n            text: \"Save\",\n        });\n    }\n    if (!specificQuestion) {\n        buttons.push({\n            variant: \"secondary\",\n            onClick: handleNext,\n            text: \"Skip\",\n        });\n        buttons.push({\n            variant: \"warning\",\n            onClick: () => {\n                handleSave();\n                handleNext();\n            },\n            text: \"Next\",\n        });\n    }\n\n    return (\n        <React.Fragment>\n            <h1>Grading</h1>\n            <div className=\"row\">\n                <div>Trainee: {question.trainee}</div>\n                <div>Assessor: {assessor}</div>\n                <div className=\"col-6\">\n                    <Question question={question} noChange={true} />\n                </div>\n                <div className=\"col-6\">\n                    {\"Score: \" + score}\n                    {rubricField}\n                    <div className=\"position-absolute bottom-0 d-flex justify-content-center\">\n                        {buttons.map(({ variant, onClick, text }, index) => (\n                            <button\n                                key={index}\n                                type=\"button\"\n                                className={\"btn btn-\" + variant + \" m-2\"}\n                                onClick={onClick}\n                            >\n                                {text}\n                            </button>\n                        ))}\n                        <Link to=\"/\">\n                            <button type=\"button\" className=\"btn btn-light m-2\">\n                                Done\n                            </button>\n                        </Link>\n                    </div>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}