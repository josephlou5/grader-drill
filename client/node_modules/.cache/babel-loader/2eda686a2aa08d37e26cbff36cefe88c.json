{"ast":null,"code":"// API functions\nfunction getRequest(route) {\n  return fetch(route).then(res => res.json());\n}\n\nfunction postRequest(route, data) {\n  return fetch(route, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  });\n}\n\nexport function getAllQuestions(callback = null) {\n  getRequest(\"/api/getAllQuestions\").then(questions => {\n    console.log(\"got all questions:\", questions);\n    if (callback) callback(questions);\n  });\n}\nexport function getQuestion(questionId, callback = null) {\n  getRequest(`/api/getQuestion/${questionId}`).then(question => {\n    console.log(\"got question:\", question);\n    if (callback) callback(question);\n  });\n}\nexport function updateQuestion(question, callback = null) {\n  const action = question.id ? \"Edit\" : \"Add\";\n  postRequest(\"/api/updateQuestion\", question).then(res => {\n    console.log(`${action}ed question ${question.id}`);\n    if (callback) callback(res);\n  });\n}\nexport function deleteQuestion(questionId, callback = null) {\n  getRequest(`/api/deleteQuestion/${questionId}`).then(question => {\n    console.log(\"Deleted question:\", question);\n    if (callback) callback(question);\n  });\n}\nexport function getAllAnswered(callback = null) {\n  getRequest(\"/api/getAllAnswered\").then(answered => {\n    console.log(\"got all answered\");\n    if (callback) callback(answered);\n  });\n}\nexport function getAnswered(trainee, questionId, callback = null) {\n  const route = `/api/getAnswered/${trainee}/${questionId}`;\n  getRequest(route).then(question => {\n    console.log(`got question ${questionId} for trainee ${trainee}`);\n    if (callback) callback(question);\n  });\n}\nexport function updateAnswered(question, callback = null) {\n  const log = `updated answered for question ${question.id} and trainee ${question.trainee}`;\n  postRequest(\"/api/updateAnswered\", question).then(res => {\n    console.log(log);\n    if (callback) callback(res);\n  });\n}","map":{"version":3,"sources":["/Users/josephlou/Documents/Files/Princeton/grading/grader-drill-app/client/src/App/api.js"],"names":["getRequest","route","fetch","then","res","json","postRequest","data","method","headers","body","JSON","stringify","getAllQuestions","callback","questions","console","log","getQuestion","questionId","question","updateQuestion","action","id","deleteQuestion","getAllAnswered","answered","getAnswered","trainee","updateAnswered"],"mappings":"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","sourcesContent":["// API functions\n\nfunction getRequest(route) {\n    return fetch(route).then((res) => res.json());\n}\n\nfunction postRequest(route, data) {\n    return fetch(route, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n    });\n}\n\nexport function getAllQuestions(callback = null) {\n    getRequest(\"/api/getAllQuestions\").then((questions) => {\n        console.log(\"got all questions:\", questions);\n        if (callback) callback(questions);\n    });\n}\n\nexport function getQuestion(questionId, callback = null) {\n    getRequest(`/api/getQuestion/${questionId}`).then((question) => {\n        console.log(\"got question:\", question);\n        if (callback) callback(question);\n    });\n}\n\nexport function updateQuestion(question, callback = null) {\n    const action = question.id ? \"Edit\" : \"Add\";\n    postRequest(\"/api/updateQuestion\", question).then((res) => {\n        console.log(`${action}ed question ${question.id}`);\n        if (callback) callback(res);\n    });\n}\n\nexport function deleteQuestion(questionId, callback = null) {\n    getRequest(`/api/deleteQuestion/${questionId}`).then((question) => {\n        console.log(\"Deleted question:\", question);\n        if (callback) callback(question);\n    });\n}\n\nexport function getAllAnswered(callback = null) {\n    getRequest(\"/api/getAllAnswered\").then((answered) => {\n        console.log(\"got all answered\");\n        if (callback) callback(answered);\n    });\n}\n\nexport function getAnswered(trainee, questionId, callback = null) {\n    const route = `/api/getAnswered/${trainee}/${questionId}`;\n    getRequest(route).then((question) => {\n        console.log(`got question ${questionId} for trainee ${trainee}`);\n        if (callback) callback(question);\n    });\n}\n\nexport function updateAnswered(question, callback = null) {\n    const log = `updated answered for question ${question.id} and trainee ${question.trainee}`;\n    postRequest(\"/api/updateAnswered\", question).then((res) => {\n        console.log(log);\n        if (callback) callback(res);\n    });\n}\n"]},"metadata":{},"sourceType":"module"}