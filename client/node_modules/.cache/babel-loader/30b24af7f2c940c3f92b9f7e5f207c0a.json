{"ast":null,"code":"var _jsxFileName = \"/Users/josephlou/Documents/Files/Princeton/grading/grader-drill-app/client/src/App/components/gradingView.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Link, useParams, useHistory } from \"react-router-dom\";\nimport Question from \"./question\";\nimport RubricField from \"./rubricField\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GradingView() {\n  _s();\n\n  const [needsQuestion, setNeedsQuestion] = useState(true);\n  const [question, setQuestion] = useState(null);\n  const [rubric, setRubric] = useState(null);\n  const [score, setScore] = useState(0);\n  const history = useHistory();\n  const {\n    trainee,\n    questionId\n  } = useParams();\n  const specificQuestion = !!(trainee && questionId); // todo: find out the assessor\n\n  const assessor = \"jdlou\";\n  useEffect(() => {\n    if (!needsQuestion) return;\n    let route, extractQuestion, log;\n\n    if (specificQuestion) {\n      // get the specified question\n      route = `/api/getAnswered/${trainee}/${questionId}`;\n\n      extractQuestion = q => q;\n\n      log = `got question ${questionId} for trainee ${trainee}`;\n    } else {\n      // get the first ungraded question\n      route = \"/api/getAllAnswered\";\n\n      extractQuestion = answered => answered.find(q => !q.graded && !(question && q.trainee === question.trainee && q.id === question.id));\n\n      log = \"got ungraded question\";\n    }\n\n    fetch(route).then(res => res.json()).then(data => {\n      setNeedsQuestion(false);\n      const q = extractQuestion(data);\n\n      if (!q) {\n        setQuestion(null);\n        console.log(\"Invalid question\");\n        return;\n      }\n\n      if (q.graded) {\n        setScore(q.score);\n        setRubric(q.rubric);\n      } else if (q.questionType === \"Multiple Choice\") {\n        if (q.answer === q.correct) {\n          setScore(100);\n        }\n      } else {\n        setRubric(q.rubric.map(item => {\n          return { ...item,\n            checked: !!item.checked\n          };\n        }));\n\n        if (q.score) {\n          setScore(q.score);\n        }\n      }\n\n      setQuestion(q);\n      console.log(log);\n    });\n  });\n\n  if (needsQuestion && !question) {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Grading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Getting question...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this);\n  }\n\n  if (!question) {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Grading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: specificQuestion ? \"Invalid question\" : \"Nothing to grade!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this);\n  }\n\n  function handleCheckChange(index) {\n    const checked = !rubric[index].checked;\n    const multiplier = checked ? 1 : -1;\n    setRubric(rubric.map((item, i) => {\n      if (i === index) {\n        return { ...item,\n          checked\n        };\n      } else {\n        return item;\n      }\n    }));\n    setScore(score + multiplier * rubric[index].points);\n  }\n\n  function handleCancel() {\n    history.goBack();\n  }\n\n  function handleNext() {\n    setNeedsQuestion(true);\n  }\n\n  function handleSave() {\n    let savedQuestion = { ...question,\n      assessor,\n      score,\n      graded: true\n    };\n\n    if (question.questionType !== \"Multiple Choice\") {\n      savedQuestion[\"rubric\"] = rubric;\n    }\n\n    fetch(\"/api/updateAnswered\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(savedQuestion)\n    }).then(() => console.log(`Updated answered for question ${question.id} and trainee ${question.trainee}`));\n  }\n\n  let buttons = null;\n\n  if (!question.graded) {\n    buttons = /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"btn btn-success m-2\",\n      onClick: handleSave,\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this);\n  }\n\n  if (!specificQuestion) {\n    buttons = /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-secondary m-2\",\n        onClick: handleNext,\n        children: \"Skip\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), buttons, /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-warning m-2\",\n        onClick: () => {\n          handleSave();\n          handleNext();\n        },\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this);\n  }\n\n  let rubricField = null;\n\n  if (question.questionType !== \"Multiple Choice\") {\n    let rubricFieldProps = {\n      question\n    };\n\n    if (question.graded) {\n      rubricFieldProps[\"noChange\"] = true;\n    } else {\n      Object.assign(rubricFieldProps, {\n        rubric,\n        onCheckChange: handleCheckChange\n      });\n    }\n\n    rubricField = /*#__PURE__*/_jsxDEV(RubricField, { ...rubricFieldProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 23\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Grading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Trainee: \", question.trainee]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Assessor: \", assessor]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-6\",\n        children: /*#__PURE__*/_jsxDEV(Question, {\n          question: question,\n          noChange: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-6\",\n        children: [\"Score: \" + score, rubricField, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"position-absolute bottom-0 d-flex justify-content-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-danger m-2\",\n            onClick: handleCancel,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 25\n          }, this), buttons, /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-light m-2\",\n              children: \"Done\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GradingView, \"tHLBbftMNYIVUU6hryvGdm9iGI4=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = GradingView;\n\nvar _c;\n\n$RefreshReg$(_c, \"GradingView\");","map":{"version":3,"sources":["/Users/josephlou/Documents/Files/Princeton/grading/grader-drill-app/client/src/App/components/gradingView.jsx"],"names":["React","useState","useEffect","Link","useParams","useHistory","Question","RubricField","GradingView","needsQuestion","setNeedsQuestion","question","setQuestion","rubric","setRubric","score","setScore","history","trainee","questionId","specificQuestion","assessor","route","extractQuestion","log","q","answered","find","graded","id","fetch","then","res","json","data","console","questionType","answer","correct","map","item","checked","handleCheckChange","index","multiplier","i","points","handleCancel","goBack","handleNext","handleSave","savedQuestion","method","headers","body","JSON","stringify","buttons","rubricField","rubricFieldProps","Object","assign","onCheckChange"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link, useParams, useHistory } from \"react-router-dom\";\nimport Question from \"./question\";\nimport RubricField from \"./rubricField\";\n\nexport default function GradingView() {\n    const [needsQuestion, setNeedsQuestion] = useState(true);\n    const [question, setQuestion] = useState(null);\n    const [rubric, setRubric] = useState(null);\n    const [score, setScore] = useState(0);\n\n    const history = useHistory();\n\n    const { trainee, questionId } = useParams();\n    const specificQuestion = !!(trainee && questionId);\n\n    // todo: find out the assessor\n    const assessor = \"jdlou\";\n\n    useEffect(() => {\n        if (!needsQuestion) return;\n        let route, extractQuestion, log;\n        if (specificQuestion) {\n            // get the specified question\n            route = `/api/getAnswered/${trainee}/${questionId}`;\n            extractQuestion = (q) => q;\n            log = `got question ${questionId} for trainee ${trainee}`;\n        } else {\n            // get the first ungraded question\n            route = \"/api/getAllAnswered\";\n            extractQuestion = (answered) =>\n                answered.find(\n                    (q) =>\n                        !q.graded &&\n                        !(\n                            question &&\n                            q.trainee === question.trainee &&\n                            q.id === question.id\n                        )\n                );\n            log = \"got ungraded question\";\n        }\n        fetch(route)\n            .then((res) => res.json())\n            .then((data) => {\n                setNeedsQuestion(false);\n\n                const q = extractQuestion(data);\n                if (!q) {\n                    setQuestion(null);\n                    console.log(\"Invalid question\");\n                    return;\n                }\n\n                if (q.graded) {\n                    setScore(q.score);\n                    setRubric(q.rubric);\n                } else if (q.questionType === \"Multiple Choice\") {\n                    if (q.answer === q.correct) {\n                        setScore(100);\n                    }\n                } else {\n                    setRubric(\n                        q.rubric.map((item) => {\n                            return { ...item, checked: !!item.checked };\n                        })\n                    );\n                    if (q.score) {\n                        setScore(q.score);\n                    }\n                }\n                setQuestion(q);\n                console.log(log);\n            });\n    });\n\n    if (needsQuestion && !question) {\n        return (\n            <React.Fragment>\n                <h1>Grading</h1>\n                <p>Getting question...</p>\n            </React.Fragment>\n        );\n    }\n\n    if (!question) {\n        return (\n            <React.Fragment>\n                <h1>Grading</h1>\n                <p>\n                    {specificQuestion\n                        ? \"Invalid question\"\n                        : \"Nothing to grade!\"}\n                </p>\n            </React.Fragment>\n        );\n    }\n\n    function handleCheckChange(index) {\n        const checked = !rubric[index].checked;\n        const multiplier = checked ? 1 : -1;\n        setRubric(\n            rubric.map((item, i) => {\n                if (i === index) {\n                    return { ...item, checked };\n                } else {\n                    return item;\n                }\n            })\n        );\n        setScore(score + multiplier * rubric[index].points);\n    }\n\n    function handleCancel() {\n        history.goBack();\n    }\n\n    function handleNext() {\n        setNeedsQuestion(true);\n    }\n\n    function handleSave() {\n        let savedQuestion = { ...question, assessor, score, graded: true };\n        if (question.questionType !== \"Multiple Choice\") {\n            savedQuestion[\"rubric\"] = rubric;\n        }\n        fetch(\"/api/updateAnswered\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(savedQuestion),\n        }).then(() =>\n            console.log(\n                `Updated answered for question ${question.id} and trainee ${question.trainee}`\n            )\n        );\n    }\n\n    let buttons = null;\n    if (!question.graded) {\n        buttons = (\n            <button\n                type=\"button\"\n                className=\"btn btn-success m-2\"\n                onClick={handleSave}\n            >\n                Save\n            </button>\n        );\n    }\n    if (!specificQuestion) {\n        buttons = (\n            <React.Fragment>\n                <button\n                    type=\"button\"\n                    className=\"btn btn-secondary m-2\"\n                    onClick={handleNext}\n                >\n                    Skip\n                </button>\n                {buttons}\n                <button\n                    type=\"button\"\n                    className=\"btn btn-warning m-2\"\n                    onClick={() => {\n                        handleSave();\n                        handleNext();\n                    }}\n                >\n                    Next\n                </button>\n            </React.Fragment>\n        );\n    }\n\n    let rubricField = null;\n    if (question.questionType !== \"Multiple Choice\") {\n        let rubricFieldProps = { question };\n        if (question.graded) {\n            rubricFieldProps[\"noChange\"] = true;\n        } else {\n            Object.assign(rubricFieldProps, {\n                rubric,\n                onCheckChange: handleCheckChange,\n            });\n        }\n        rubricField = <RubricField {...rubricFieldProps} />;\n    }\n\n    return (\n        <React.Fragment>\n            <h1>Grading</h1>\n            <div className=\"row\">\n                <div>Trainee: {question.trainee}</div>\n                <div>Assessor: {assessor}</div>\n                <div className=\"col-6\">\n                    <Question question={question} noChange={true} />\n                </div>\n                <div className=\"col-6\">\n                    {\"Score: \" + score}\n                    {rubricField}\n                    <div className=\"position-absolute bottom-0 d-flex justify-content-center\">\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-danger m-2\"\n                            onClick={handleCancel}\n                        >\n                            Cancel\n                        </button>\n                        {buttons}\n                        <Link to=\"/\">\n                            <button type=\"button\" className=\"btn btn-light m-2\">\n                                Done\n                            </button>\n                        </Link>\n                    </div>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}