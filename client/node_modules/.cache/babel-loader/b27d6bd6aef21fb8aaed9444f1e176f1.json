{"ast":null,"code":"var _jsxFileName = \"/Users/josephlou/Documents/Files/Princeton/grading/grader-drill-app/client/src/App/components/questionEditView.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ResizeTextareas } from \"../shared\";\nimport { getQuestion, updateQuestion } from \"../api\";\nimport QuestionTextField from \"./questionTextField\";\nimport CodeField from \"./codeField\";\nimport AnswerField from \"./answerField\";\nimport RubricField from \"./rubricField\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function QuestionEditView(props) {\n  _s();\n\n  const [needsQuestion, setNeedsQuestion] = useState(true);\n  const initial = {\n    hasCodeField: true,\n    hasAnswerField: true,\n    questionType: \"Comment\",\n    questionText: \"\",\n    code: \"\",\n    highlights: [],\n    answerChoices: [],\n    correct: null,\n    rubric: []\n  };\n  const [question, setQuestionState] = useState(initial);\n  const [canToggleCodeField, setToggleCodeField] = useState(false);\n  const history = useHistory();\n\n  function setQuestion(updates) {\n    setQuestionState({ ...question,\n      ...updates\n    });\n  }\n\n  useEffect(() => {\n    if (props.newQuestion || !needsQuestion) return;\n    getQuestion(props.questionId, q => {\n      setNeedsQuestion(false);\n\n      if (!q) {\n        setQuestionState(null);\n        return;\n      }\n\n      setQuestion(q);\n\n      if (q && q.questionType === \"Multiple Choice\") {\n        setToggleCodeField(true);\n      }\n    });\n  });\n\n  if (needsQuestion) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading question...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (!question) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Invalid question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 16\n    }, this);\n  } // event handlers\n\n\n  function handleQuestionType(questionType) {\n    switch (questionType) {\n      case \"Comment\":\n        setToggleCodeField(false);\n        setQuestion({\n          questionType,\n          hasCodeField: true,\n          hasAnswerField: true\n        });\n        break;\n\n      case \"Highlight\":\n        setToggleCodeField(false);\n        setQuestion({\n          questionType,\n          hasCodeField: true,\n          hasAnswerField: false\n        });\n        break;\n\n      case \"Multiple Choice\":\n        setToggleCodeField(true);\n        setQuestion({\n          questionType,\n          hasAnswerField: true\n        });\n        break;\n\n      default:\n        return;\n    }\n  }\n\n  function handleTextChange(questionText) {\n    setQuestion({\n      questionText\n    });\n  }\n\n  function handleToggleCodeField() {\n    setQuestion({\n      hasCodeField: !question.hasCodeField\n    });\n  }\n\n  function handleCodeChange(code) {\n    // see if any highlights were deleted\n    const lines = code.split(\"\\n\");\n    const numLines = lines.length;\n    const lineLengths = lines.map(line => line.length);\n    let removing = [];\n    const highlights = question.highlights.flatMap((h, i) => {\n      let highlight = { ...h\n      };\n      let {\n        startLine,\n        startChar,\n        endLine,\n        endChar\n      } = highlight;\n      if (startLine >= numLines) return [];\n\n      if (endLine >= numLines) {\n        endLine = numLines - 1;\n        endChar = lineLengths[endLine];\n      }\n\n      if (startLine === endLine) {\n        // highlight doesn't exist on this line anymore\n        if (startChar >= lineLengths[startLine]) {\n          removing.unshift(i);\n          return [];\n        } // the end of the highlight got cut off\n\n\n        if (endChar >= lineLengths[endLine]) {\n          highlight[\"endChar\"] = lineLengths[endLine];\n        }\n\n        return [highlight];\n      }\n\n      if (startChar >= lineLengths[startLine]) {\n        // go to start of next non-empty line\n        do {\n          startLine++;\n        } while (lineLengths[startLine] === 0);\n\n        if (startLine >= numLines) return [];\n        startChar = 0;\n      }\n\n      if (endChar > lineLengths[endLine]) {\n        // go to end of last non-empty line\n        while (lineLengths[endLine] === 0) {\n          endLine--;\n        }\n\n        if (endLine < 0) return [];\n        endChar = lineLengths[endLine];\n      }\n\n      if (startLine > endLine) return [];\n      Object.assign(highlight, {\n        startLine,\n        startChar,\n        endLine,\n        endChar\n      });\n      return [highlight];\n    });\n    setQuestion({\n      code,\n      highlights\n    });\n  }\n\n  function handleAddHighlight(question, highlight) {\n    let highlights = [...question.highlights];\n    highlights.push(highlight);\n    setQuestion({\n      highlights\n    });\n  }\n\n  function handleClearHighlights() {\n    setQuestion({\n      highlights: []\n    });\n  }\n\n  function handleChangeHighlightText(index, text) {\n    let highlights = [...question.highlights];\n    highlights[index] = { ...highlights[index],\n      text\n    };\n    setQuestion({\n      highlights\n    });\n  }\n\n  function handleDeleteHighlight(question, highlightIndex) {\n    let highlights = [...question.highlights];\n    highlights.splice(highlightIndex, 1);\n    setQuestion({\n      highlights\n    });\n  }\n\n  function handleAddAnswerChoice() {\n    let answerChoices = [...question.answerChoices];\n    answerChoices.push(\"\");\n    setQuestion({\n      answerChoices\n    });\n  }\n\n  function handleChangeAnswerChoice(index, answerChoice) {\n    let answerChoices = [...question.answerChoices];\n    answerChoices[index] = answerChoice;\n    setQuestion({\n      answerChoices\n    });\n  }\n\n  function handleDeleteAnswerChoice(index) {\n    let answerChoices = [...question.answerChoices];\n    answerChoices.splice(index, 1);\n    let correct = question.correct;\n\n    if (index === correct) {\n      // deleting the correct choice, so no more correct choice\n      correct = null;\n    } else if (index < correct) {\n      // deleting one before the correct choice, so shift correct choice up\n      correct--;\n    }\n\n    setQuestion({\n      answerChoices,\n      correct\n    });\n  }\n\n  function handleSetCorrectAnswerChoice(index) {\n    setQuestion({\n      correct: index\n    });\n  }\n\n  function handleAddRubricItem() {\n    let rubric = [...question.rubric];\n    rubric.push({\n      points: 1,\n      text: \"\"\n    });\n    setQuestion({\n      rubric\n    });\n  }\n\n  function handleChangeRubricItemPoints(index, points) {\n    let rubric = [...question.rubric];\n    let pointsNum = parseInt(points);\n\n    if (isNaN(pointsNum)) {\n      pointsNum = 0;\n    }\n\n    rubric[index] = { ...rubric[index],\n      points: pointsNum\n    };\n    setQuestion({\n      rubric\n    });\n  }\n\n  function handleChangeRubricItemText(index, text) {\n    let rubric = [...question.rubric];\n    rubric[index] = { ...rubric[index],\n      text\n    };\n    setQuestion({\n      rubric\n    });\n  }\n\n  function handleDeleteRubricItem(index) {\n    let rubric = [...question.rubric];\n    rubric.splice(index, 1);\n    setQuestion({\n      rubric\n    });\n  }\n\n  function handleCancel() {\n    history.goBack();\n  }\n\n  function validate(q) {\n    let formValid = true;\n\n    function setValid(elementId, isValid) {\n      document.getElementById(elementId).classList.toggle(\"is-invalid\", !isValid);\n      if (!isValid) formValid = false;\n    }\n\n    setValid(\"question-edit-text\", q.questionText.length > 0);\n\n    if (q.hasCodeField) {\n      setValid(\"question-edit-code\", q.code.length > 0);\n    }\n\n    if (q.questionType === \"Multiple Choice\") {\n      if (q.answerChoices.length === 0) {\n        setValid(\"question-edit-mc\", false);\n      } else {\n        if (q.correct == null) {\n          setValid(\"question-edit-mc-correct\", false);\n        }\n\n        q.answerChoices.forEach((text, index) => setValid(\"question-edit-mc-\" + index, text.length > 0));\n      }\n    } else {\n      if (q.rubric.length === 0) {\n        setValid(\"question-edit-rubric\", false);\n      } else {\n        q.rubric.forEach((item, index) => {\n          setValid(\"question-edit-rubric-points-\" + index, item.points && item.points !== 0);\n          setValid(\"question-edit-rubric-\" + index, item.text.length > 0);\n        });\n      }\n    }\n\n    return formValid;\n  }\n\n  function handleSave() {\n    const {\n      id,\n      hasCodeField,\n      hasAnswerField,\n      questionType,\n      questionText,\n      highlights\n    } = question;\n    let newQuestion = {\n      id,\n      hasCodeField,\n      hasAnswerField,\n      questionType,\n      questionText,\n      highlights\n    };\n\n    if (hasCodeField) {\n      newQuestion[\"code\"] = question.code;\n    }\n\n    switch (questionType) {\n      case \"Comment\": // TODO: this used to cause some error, but it's actually unnecessary,\n      // so i need to find the error\n      // newQuestion[\"answers\"] = highlights.map(() => \"\");\n      // fall through\n\n      case \"Highlight\":\n        newQuestion[\"rubric\"] = question.rubric;\n        break;\n\n      case \"Multiple Choice\":\n        Object.assign(newQuestion, {\n          answerChoices: question.answerChoices,\n          correct: question.correct\n        });\n        break;\n\n      default:\n        return;\n    }\n\n    if (!validate(newQuestion)) return;\n    updateQuestion(newQuestion);\n  }\n\n  function handleDone() {\n    handleSave();\n    history.push(\"/questions\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ResizeTextareas, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: props.newQuestion ? \"New Question\" : \"Edit Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Preview\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn-group\",\n      role: \"group\",\n      style: {\n        marginLeft: \"10px\"\n      },\n      children: [\"Comment\", \"Highlight\", \"Multiple Choice\"].map(questionType => {\n        const idFor = \"type-\" + questionType.toLowerCase();\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            className: \"btn-check\",\n            name: \"question-type\",\n            id: idFor,\n            checked: questionType === question.questionType,\n            onChange: () => handleQuestionType(questionType)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"btn btn-outline-primary\",\n            htmlFor: idFor,\n            children: questionType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 33\n          }, this)]\n        }, questionType, true, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(QuestionTextField, {\n      editMode: true,\n      question: question,\n      onTextChange: handleTextChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 13\n    }, this), canToggleCodeField &&\n    /*#__PURE__*/\n    // todo: can change this into a toggle button instead of a checkbox\n    _jsxDEV(\"div\", {\n      className: \"form-check form-check-inline\",\n      style: {\n        marginLeft: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        className: \"form-check-input\",\n        id: \"hasCodeField\",\n        defaultChecked: question.hasCodeField,\n        onChange: handleToggleCodeField\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"form-check-label\",\n        htmlFor: \"hasCodeField\",\n        children: \"Include code field\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 17\n    }, this), question.hasCodeField && /*#__PURE__*/_jsxDEV(CodeField, {\n      editMode: true,\n      question: question,\n      onCodeChange: handleCodeChange,\n      onAddHighlight: handleAddHighlight,\n      onDeleteHighlight: handleDeleteHighlight,\n      onClearHighlights: handleClearHighlights\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 17\n    }, this), question.hasAnswerField && /*#__PURE__*/_jsxDEV(AnswerField, {\n      editMode: true,\n      question: question,\n      onClearHighlights: handleClearHighlights,\n      onChangeHighlightText: handleChangeHighlightText,\n      onDeleteHighlight: handleDeleteHighlight,\n      onAddAnswerChoice: handleAddAnswerChoice,\n      onChangeAnswerChoice: handleChangeAnswerChoice,\n      onDeleteAnswerChoice: handleDeleteAnswerChoice,\n      onSetCorrectAnswerChoice: handleSetCorrectAnswerChoice\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 17\n    }, this), question.questionType !== \"Multiple Choice\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: /*#__PURE__*/_jsxDEV(RubricField, {\n          editMode: true,\n          question: question,\n          onAddRubricItem: handleAddRubricItem,\n          onChangeRubricItemPoints: handleChangeRubricItemPoints,\n          onChangeRubricItemText: handleChangeRubricItemText,\n          onDeleteRubricItem: handleDeleteRubricItem\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: /*#__PURE__*/_jsxDEV(RubricField, {\n          previewMode: true,\n          question: question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-danger m-2\",\n        onClick: handleCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-success m-2\",\n        onClick: handleSave,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-light m-2\",\n        onClick: handleDone,\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 330,\n    columnNumber: 9\n  }, this);\n}\n\n_s(QuestionEditView, \"YavFqJZxU9YRhEA3UVaRTei0o90=\", false, function () {\n  return [useHistory];\n});\n\n_c = QuestionEditView;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionEditView\");","map":{"version":3,"sources":["/Users/josephlou/Documents/Files/Princeton/grading/grader-drill-app/client/src/App/components/questionEditView.jsx"],"names":["React","useState","useEffect","useHistory","ResizeTextareas","getQuestion","updateQuestion","QuestionTextField","CodeField","AnswerField","RubricField","QuestionEditView","props","needsQuestion","setNeedsQuestion","initial","hasCodeField","hasAnswerField","questionType","questionText","code","highlights","answerChoices","correct","rubric","question","setQuestionState","canToggleCodeField","setToggleCodeField","history","setQuestion","updates","newQuestion","questionId","q","handleQuestionType","handleTextChange","handleToggleCodeField","handleCodeChange","lines","split","numLines","length","lineLengths","map","line","removing","flatMap","h","i","highlight","startLine","startChar","endLine","endChar","unshift","Object","assign","handleAddHighlight","push","handleClearHighlights","handleChangeHighlightText","index","text","handleDeleteHighlight","highlightIndex","splice","handleAddAnswerChoice","handleChangeAnswerChoice","answerChoice","handleDeleteAnswerChoice","handleSetCorrectAnswerChoice","handleAddRubricItem","points","handleChangeRubricItemPoints","pointsNum","parseInt","isNaN","handleChangeRubricItemText","handleDeleteRubricItem","handleCancel","goBack","validate","formValid","setValid","elementId","isValid","document","getElementById","classList","toggle","forEach","item","handleSave","id","handleDone","marginLeft","idFor","toLowerCase"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ResizeTextareas } from \"../shared\";\nimport { getQuestion, updateQuestion } from \"../api\";\nimport QuestionTextField from \"./questionTextField\";\nimport CodeField from \"./codeField\";\nimport AnswerField from \"./answerField\";\nimport RubricField from \"./rubricField\";\n\nexport default function QuestionEditView(props) {\n    const [needsQuestion, setNeedsQuestion] = useState(true);\n    const initial = {\n        hasCodeField: true,\n        hasAnswerField: true,\n        questionType: \"Comment\",\n        questionText: \"\",\n        code: \"\",\n        highlights: [],\n        answerChoices: [],\n        correct: null,\n        rubric: [],\n    };\n    const [question, setQuestionState] = useState(initial);\n    const [canToggleCodeField, setToggleCodeField] = useState(false);\n\n    const history = useHistory();\n\n    function setQuestion(updates) {\n        setQuestionState({ ...question, ...updates });\n    }\n\n    useEffect(() => {\n        if (props.newQuestion || !needsQuestion) return;\n        getQuestion(props.questionId, (q) => {\n            setNeedsQuestion(false);\n            if (!q) {\n                setQuestionState(null);\n                return;\n            }\n            setQuestion(q);\n            if (q && q.questionType === \"Multiple Choice\") {\n                setToggleCodeField(true);\n            }\n        });\n    });\n\n    if (needsQuestion) {\n        return <h1>Loading question...</h1>;\n    }\n\n    if (!question) {\n        return <h1>Invalid question</h1>;\n    }\n\n    // event handlers\n\n    function handleQuestionType(questionType) {\n        switch (questionType) {\n            case \"Comment\":\n                setToggleCodeField(false);\n                setQuestion({\n                    questionType,\n                    hasCodeField: true,\n                    hasAnswerField: true,\n                });\n                break;\n            case \"Highlight\":\n                setToggleCodeField(false);\n                setQuestion({\n                    questionType,\n                    hasCodeField: true,\n                    hasAnswerField: false,\n                });\n                break;\n            case \"Multiple Choice\":\n                setToggleCodeField(true);\n                setQuestion({\n                    questionType,\n                    hasAnswerField: true,\n                });\n                break;\n            default:\n                return;\n        }\n    }\n\n    function handleTextChange(questionText) {\n        setQuestion({ questionText });\n    }\n\n    function handleToggleCodeField() {\n        setQuestion({ hasCodeField: !question.hasCodeField });\n    }\n\n    function handleCodeChange(code) {\n        // see if any highlights were deleted\n        const lines = code.split(\"\\n\");\n        const numLines = lines.length;\n        const lineLengths = lines.map((line) => line.length);\n\n        let removing = [];\n        const highlights = question.highlights.flatMap((h, i) => {\n            let highlight = { ...h };\n            let { startLine, startChar, endLine, endChar } = highlight;\n            if (startLine >= numLines) return [];\n            if (endLine >= numLines) {\n                endLine = numLines - 1;\n                endChar = lineLengths[endLine];\n            }\n            if (startLine === endLine) {\n                // highlight doesn't exist on this line anymore\n                if (startChar >= lineLengths[startLine]) {\n                    removing.unshift(i);\n                    return [];\n                }\n                // the end of the highlight got cut off\n                if (endChar >= lineLengths[endLine]) {\n                    highlight[\"endChar\"] = lineLengths[endLine];\n                }\n                return [highlight];\n            }\n            if (startChar >= lineLengths[startLine]) {\n                // go to start of next non-empty line\n                do {\n                    startLine++;\n                } while (lineLengths[startLine] === 0);\n                if (startLine >= numLines) return [];\n                startChar = 0;\n            }\n            if (endChar > lineLengths[endLine]) {\n                // go to end of last non-empty line\n                while (lineLengths[endLine] === 0) {\n                    endLine--;\n                }\n                if (endLine < 0) return [];\n                endChar = lineLengths[endLine];\n            }\n            if (startLine > endLine) return [];\n            Object.assign(highlight, {\n                startLine,\n                startChar,\n                endLine,\n                endChar,\n            });\n            return [highlight];\n        });\n\n        setQuestion({ code, highlights });\n    }\n\n    function handleAddHighlight(question, highlight) {\n        let highlights = [...question.highlights];\n        highlights.push(highlight);\n        setQuestion({ highlights });\n    }\n\n    function handleClearHighlights() {\n        setQuestion({ highlights: [] });\n    }\n\n    function handleChangeHighlightText(index, text) {\n        let highlights = [...question.highlights];\n        highlights[index] = { ...highlights[index], text };\n        setQuestion({ highlights });\n    }\n\n    function handleDeleteHighlight(question, highlightIndex) {\n        let highlights = [...question.highlights];\n        highlights.splice(highlightIndex, 1);\n        setQuestion({ highlights });\n    }\n\n    function handleAddAnswerChoice() {\n        let answerChoices = [...question.answerChoices];\n        answerChoices.push(\"\");\n        setQuestion({ answerChoices });\n    }\n\n    function handleChangeAnswerChoice(index, answerChoice) {\n        let answerChoices = [...question.answerChoices];\n        answerChoices[index] = answerChoice;\n        setQuestion({ answerChoices });\n    }\n\n    function handleDeleteAnswerChoice(index) {\n        let answerChoices = [...question.answerChoices];\n        answerChoices.splice(index, 1);\n        let correct = question.correct;\n        if (index === correct) {\n            // deleting the correct choice, so no more correct choice\n            correct = null;\n        } else if (index < correct) {\n            // deleting one before the correct choice, so shift correct choice up\n            correct--;\n        }\n        setQuestion({ answerChoices, correct });\n    }\n\n    function handleSetCorrectAnswerChoice(index) {\n        setQuestion({ correct: index });\n    }\n\n    function handleAddRubricItem() {\n        let rubric = [...question.rubric];\n        rubric.push({ points: 1, text: \"\" });\n        setQuestion({ rubric });\n    }\n\n    function handleChangeRubricItemPoints(index, points) {\n        let rubric = [...question.rubric];\n        let pointsNum = parseInt(points);\n        if (isNaN(pointsNum)) {\n            pointsNum = 0;\n        }\n        rubric[index] = { ...rubric[index], points: pointsNum };\n        setQuestion({ rubric });\n    }\n\n    function handleChangeRubricItemText(index, text) {\n        let rubric = [...question.rubric];\n        rubric[index] = { ...rubric[index], text };\n        setQuestion({ rubric });\n    }\n\n    function handleDeleteRubricItem(index) {\n        let rubric = [...question.rubric];\n        rubric.splice(index, 1);\n        setQuestion({ rubric });\n    }\n\n    function handleCancel() {\n        history.goBack();\n    }\n\n    function validate(q) {\n        let formValid = true;\n\n        function setValid(elementId, isValid) {\n            document\n                .getElementById(elementId)\n                .classList.toggle(\"is-invalid\", !isValid);\n            if (!isValid) formValid = false;\n        }\n\n        setValid(\"question-edit-text\", q.questionText.length > 0);\n        if (q.hasCodeField) {\n            setValid(\"question-edit-code\", q.code.length > 0);\n        }\n        if (q.questionType === \"Multiple Choice\") {\n            if (q.answerChoices.length === 0) {\n                setValid(\"question-edit-mc\", false);\n            } else {\n                if (q.correct == null) {\n                    setValid(\"question-edit-mc-correct\", false);\n                }\n                q.answerChoices.forEach((text, index) =>\n                    setValid(\"question-edit-mc-\" + index, text.length > 0)\n                );\n            }\n        } else {\n            if (q.rubric.length === 0) {\n                setValid(\"question-edit-rubric\", false);\n            } else {\n                q.rubric.forEach((item, index) => {\n                    setValid(\n                        \"question-edit-rubric-points-\" + index,\n                        item.points && item.points !== 0\n                    );\n                    setValid(\n                        \"question-edit-rubric-\" + index,\n                        item.text.length > 0\n                    );\n                });\n            }\n        }\n\n        return formValid;\n    }\n\n    function handleSave() {\n        const {\n            id,\n            hasCodeField,\n            hasAnswerField,\n            questionType,\n            questionText,\n            highlights,\n        } = question;\n        let newQuestion = {\n            id,\n            hasCodeField,\n            hasAnswerField,\n            questionType,\n            questionText,\n            highlights,\n        };\n        if (hasCodeField) {\n            newQuestion[\"code\"] = question.code;\n        }\n        switch (questionType) {\n            case \"Comment\":\n            // TODO: this used to cause some error, but it's actually unnecessary,\n            // so i need to find the error\n            // newQuestion[\"answers\"] = highlights.map(() => \"\");\n            // fall through\n            case \"Highlight\":\n                newQuestion[\"rubric\"] = question.rubric;\n                break;\n            case \"Multiple Choice\":\n                Object.assign(newQuestion, {\n                    answerChoices: question.answerChoices,\n                    correct: question.correct,\n                });\n                break;\n            default:\n                return;\n        }\n\n        if (!validate(newQuestion)) return;\n\n        updateQuestion(newQuestion);\n    }\n\n    function handleDone() {\n        handleSave();\n        history.push(\"/questions\");\n    }\n\n    return (\n        <React.Fragment>\n            <ResizeTextareas />\n\n            <div className=\"row\">\n                <div className=\"col\">\n                    <h1>\n                        {props.newQuestion ? \"New Question\" : \"Edit Question\"}\n                    </h1>\n                </div>\n                <div className=\"col\">\n                    <h1>Preview</h1>\n                </div>\n            </div>\n\n            <div\n                className=\"btn-group\"\n                role=\"group\"\n                style={{ marginLeft: \"10px\" }}\n            >\n                {[\"Comment\", \"Highlight\", \"Multiple Choice\"].map(\n                    (questionType) => {\n                        const idFor = \"type-\" + questionType.toLowerCase();\n                        return (\n                            <React.Fragment key={questionType}>\n                                <input\n                                    type=\"radio\"\n                                    className=\"btn-check\"\n                                    name=\"question-type\"\n                                    id={idFor}\n                                    checked={\n                                        questionType === question.questionType\n                                    }\n                                    onChange={() =>\n                                        handleQuestionType(questionType)\n                                    }\n                                />\n                                <label\n                                    className=\"btn btn-outline-primary\"\n                                    htmlFor={idFor}\n                                >\n                                    {questionType}\n                                </label>\n                            </React.Fragment>\n                        );\n                    }\n                )}\n            </div>\n\n            <QuestionTextField\n                editMode={true}\n                question={question}\n                onTextChange={handleTextChange}\n            />\n\n            {canToggleCodeField && (\n                // todo: can change this into a toggle button instead of a checkbox\n                <div\n                    className=\"form-check form-check-inline\"\n                    style={{ marginLeft: \"10px\" }}\n                >\n                    <input\n                        type=\"checkbox\"\n                        className=\"form-check-input\"\n                        id=\"hasCodeField\"\n                        defaultChecked={question.hasCodeField}\n                        onChange={handleToggleCodeField}\n                    />\n                    <label className=\"form-check-label\" htmlFor=\"hasCodeField\">\n                        Include code field\n                    </label>\n                </div>\n            )}\n            {question.hasCodeField && (\n                <CodeField\n                    editMode={true}\n                    question={question}\n                    onCodeChange={handleCodeChange}\n                    onAddHighlight={handleAddHighlight}\n                    onDeleteHighlight={handleDeleteHighlight}\n                    onClearHighlights={handleClearHighlights}\n                />\n            )}\n\n            {question.hasAnswerField && (\n                <AnswerField\n                    editMode={true}\n                    question={question}\n                    onClearHighlights={handleClearHighlights}\n                    onChangeHighlightText={handleChangeHighlightText}\n                    onDeleteHighlight={handleDeleteHighlight}\n                    onAddAnswerChoice={handleAddAnswerChoice}\n                    onChangeAnswerChoice={handleChangeAnswerChoice}\n                    onDeleteAnswerChoice={handleDeleteAnswerChoice}\n                    onSetCorrectAnswerChoice={handleSetCorrectAnswerChoice}\n                />\n            )}\n\n            {question.questionType !== \"Multiple Choice\" && (\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <RubricField\n                            editMode={true}\n                            question={question}\n                            onAddRubricItem={handleAddRubricItem}\n                            onChangeRubricItemPoints={\n                                handleChangeRubricItemPoints\n                            }\n                            onChangeRubricItemText={handleChangeRubricItemText}\n                            onDeleteRubricItem={handleDeleteRubricItem}\n                        />\n                    </div>\n                    <div className=\"col\">\n                        <RubricField previewMode={true} question={question} />\n                    </div>\n                </div>\n            )}\n\n            <div>\n                <button\n                    type=\"button\"\n                    className=\"btn btn-danger m-2\"\n                    onClick={handleCancel}\n                >\n                    Cancel\n                </button>\n                <button\n                    type=\"button\"\n                    className=\"btn btn-success m-2\"\n                    onClick={handleSave}\n                >\n                    Save\n                </button>\n                <button\n                    type=\"button\"\n                    className=\"btn btn-light m-2\"\n                    onClick={handleDone}\n                >\n                    Done\n                </button>\n            </div>\n        </React.Fragment>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}