{"ast":null,"code":"var _jsxFileName = \"/Users/josephlou/Documents/Files/Princeton/grading/grader-drill-app/client/src/App/components/highlightAnswerField.jsx\";\nimport React, { Component } from \"react\";\nimport { preventEnter } from \"../shared.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass HighlightAnswerField extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderClearButton = () => {\n      if (this.props.noChange) return null;\n      const {\n        question\n      } = this.props;\n      const {\n        highlights\n      } = question;\n      if (!highlights || highlights.length === 0) return null;\n      let buttonProps = {\n        type: \"button\",\n        className: \"btn btn-danger\"\n      };\n      const canClear = !this.props.previewMode && (this.props.editMode || highlights.some(h => h[\"byUser\"]));\n\n      if (canClear) {\n        buttonProps[\"onClick\"] = () => this.props.onClearHighlights(question);\n      } else {\n        buttonProps[\"disabled\"] = true;\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"button\", { ...buttonProps,\n        children: \"Clear Highlights\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 16\n      }, this);\n    };\n\n    this.renderHighlight = (question, highlight, index, text = \"\") => {\n      const {\n        previewMode,\n        editMode,\n        noChange\n      } = this.props;\n      const classes = \"form-control textarea\";\n      let textClasses = classes;\n\n      if (!previewMode && noChange) {\n        textClasses = classes + \" bg-transparent text-body\";\n      }\n\n      let textProps = {\n        className: textClasses,\n        value: text\n      };\n\n      if (previewMode || noChange) {\n        textProps[\"disabled\"] = true;\n      } else {\n        Object.assign(textProps, {\n          onKeyDown: preventEnter,\n          onChange: event => this.props.onAnswerChange(question, index, event.target.value)\n        });\n      }\n\n      let input;\n\n      if (editMode && !previewMode) {\n        // editing the existing comment\n        input = /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: classes,\n          onKeyDown: preventEnter,\n          onChange: event => this.props.onChangeHighlightText(index, event.target.value),\n          placeholder: \"Existing comment\",\n          value: highlight.text || \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }, this);\n      } else if (highlight.text) {\n        // display the existing comment\n        input = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-grow-1\",\n          style: {\n            padding: \"0 0.75rem\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n              className: classes,\n              style: {\n                borderBottom: \"0px\",\n                borderRadius: \"0 0.25rem 0 0\"\n              },\n              value: highlight.text,\n              disabled: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsxDEV(\"textarea\", { ...textProps,\n              style: {\n                borderRadius: \"0 0 0.25rem 0\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }, this);\n      } else {\n        // no existing comment\n        input = /*#__PURE__*/_jsxDEV(\"textarea\", { ...textProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this);\n      }\n\n      let deleteButton = null;\n\n      if (editMode && !previewMode || highlight.byUser) {\n        let buttonProps = {\n          type: \"button\",\n          className: \"btn-close btn-close-white\"\n        };\n\n        if (noChange) {\n          buttonProps[\"disabled\"] = true;\n        } else {\n          buttonProps[\"onClick\"] = () => this.props.onDeleteHighlight(question, index);\n        }\n\n        deleteButton = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group-text bg-danger\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", { ...buttonProps\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 17\n        }, this);\n      }\n\n      const labelClasses = \"input-group-text bg-\" + (highlight.byUser ? \"success\" : \"primary\") + \" text-light\";\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: labelClasses,\n          children: index + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 17\n        }, this), input, deleteButton]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.renderField = () => {\n      const {\n        question,\n        noChange\n      } = this.props;\n      const {\n        highlights\n      } = question;\n\n      if (!highlights || highlights.length === 0) {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No highlights\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 20\n        }, this);\n      }\n\n      function classes(index) {\n        if (noChange && index === 0) {\n          return \"input-group\";\n        } else {\n          return \"input-group mt-2\";\n        }\n      }\n\n      let answers;\n\n      if (this.props.editMode) {\n        answers = highlights.map(() => \"\");\n      } else {\n        answers = question.answers;\n      }\n\n      return highlights.map((highlight, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes(index),\n        children: this.renderHighlight(question, highlight, index, answers[index])\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }, this));\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [this.renderClearButton(), this.renderField()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport { HighlightAnswerField };\nexport default function HighlightAnswerField2(props) {\n  const {\n    question,\n    previewMode,\n    editMode,\n    noChange\n  } = props;\n  const {\n    highlights\n  } = question;\n\n  if (!highlights || highlights.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No highlights\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 16\n    }, this);\n  }\n\n  let clearButton = null;\n\n  if (!noChange) {\n    let buttonProps = {\n      type: \"button\",\n      className: \"btn btn-danger\"\n    };\n    const canClear = !props.previewMode && (props.editMode || highlights.some(h => h[\"byUser\"]));\n\n    if (canClear) {\n      buttonProps[\"onClick\"] = () => props.onClearHighlights(question);\n    } else {\n      buttonProps[\"disabled\"] = true;\n    }\n\n    clearButton = /*#__PURE__*/_jsxDEV(\"button\", { ...buttonProps,\n      children: \"Clear Highlights\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 23\n    }, this);\n  }\n\n  let answers;\n\n  if (editMode) {\n    answers = highlights.map(() => \"\");\n  } else {\n    answers = question.answers;\n  }\n\n  const classes = \"form-control textarea\";\n  let textClasses = classes;\n\n  if (!previewMode && noChange) {\n    textClasses = classes + \" bg-transparent text-body\";\n  }\n\n  let field = highlights.map((highlight, index) => {\n    let textProps = {\n      className: textClasses,\n      value: answers[index]\n    };\n\n    if (previewMode || noChange) {\n      textProps[\"disabled\"] = true;\n    } else {\n      Object.assign(textProps, {\n        onKeyDown: preventEnter,\n        onChange: event => props.onAnswerChange(question, index, event.target.value)\n      });\n    }\n\n    let input;\n\n    if (editMode && !previewMode) {\n      // editing the existing comment\n      input = /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: classes,\n        onKeyDown: preventEnter,\n        onChange: event => props.onChangeHighlightText(index, event.target.value),\n        placeholder: \"Existing comment\",\n        value: highlight.text || \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }, this);\n    } else if (highlight.text) {\n      // display the existing comment\n      input = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-grow-1\",\n        style: {\n          padding: \"0 0.75rem\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: classes,\n            style: {\n              borderBottom: \"0px\",\n              borderRadius: \"0 0.25rem 0 0\"\n            },\n            value: highlight.text,\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"textarea\", { ...textProps(index),\n            style: {\n              borderRadius: \"0 0 0.25rem 0\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 17\n      }, this);\n    } else {\n      // no existing comment\n      input = /*#__PURE__*/_jsxDEV(\"textarea\", { ...textProps(index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 21\n      }, this);\n    }\n\n    let deleteButton = null;\n\n    if (editMode && !previewMode || highlight.byUser) {\n      let buttonProps = {\n        type: \"button\",\n        className: \"btn-close btn-close-white\"\n      };\n\n      if (noChange) {\n        buttonProps[\"disabled\"] = true;\n      } else {\n        buttonProps[\"onClick\"] = () => this.props.onDeleteHighlight(question, index);\n      }\n\n      deleteButton = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group-text bg-danger\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", { ...buttonProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 17\n      }, this);\n    }\n\n    const labelClasses = [\"input-group-text\", \"bg-\" + (highlight.byUser ? \"success\" : \"primary\"), \"text-light\"];\n    const divClasses = \"input-group\" + index === 0 ? \"\" : \" mt-2\";\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: divClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: labelClasses.join(\" \"),\n        children: index + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 17\n      }, this), input, deleteButton]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [renderClearButton(), field]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 335,\n    columnNumber: 9\n  }, this);\n}\n_c = HighlightAnswerField2;\n\nvar _c;\n\n$RefreshReg$(_c, \"HighlightAnswerField2\");","map":{"version":3,"sources":["/Users/josephlou/Documents/Files/Princeton/grading/grader-drill-app/client/src/App/components/highlightAnswerField.jsx"],"names":["React","Component","preventEnter","HighlightAnswerField","renderClearButton","props","noChange","question","highlights","length","buttonProps","type","className","canClear","previewMode","editMode","some","h","onClearHighlights","renderHighlight","highlight","index","text","classes","textClasses","textProps","value","Object","assign","onKeyDown","onChange","event","onAnswerChange","target","input","onChangeHighlightText","padding","borderBottom","borderRadius","deleteButton","byUser","onDeleteHighlight","labelClasses","renderField","answers","map","render","HighlightAnswerField2","clearButton","field","divClasses","join"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,YAAT,QAA6B,cAA7B;;;AAEA,MAAMC,oBAAN,SAAmCF,SAAnC,CAA6C;AAAA;AAAA;;AAAA,SACzCG,iBADyC,GACrB,MAAM;AACtB,UAAI,KAAKC,KAAL,CAAWC,QAAf,EAAyB,OAAO,IAAP;AAEzB,YAAM;AAAEC,QAAAA;AAAF,UAAe,KAAKF,KAA1B;AACA,YAAM;AAAEG,QAAAA;AAAF,UAAiBD,QAAvB;AACA,UAAI,CAACC,UAAD,IAAeA,UAAU,CAACC,MAAX,KAAsB,CAAzC,EAA4C,OAAO,IAAP;AAE5C,UAAIC,WAAW,GAAG;AACdC,QAAAA,IAAI,EAAE,QADQ;AAEdC,QAAAA,SAAS,EAAE;AAFG,OAAlB;AAIA,YAAMC,QAAQ,GACV,CAAC,KAAKR,KAAL,CAAWS,WAAZ,KACC,KAAKT,KAAL,CAAWU,QAAX,IAAuBP,UAAU,CAACQ,IAAX,CAAiBC,CAAD,IAAOA,CAAC,CAAC,QAAD,CAAxB,CADxB,CADJ;;AAGA,UAAIJ,QAAJ,EAAc;AACVH,QAAAA,WAAW,CAAC,SAAD,CAAX,GAAyB,MACrB,KAAKL,KAAL,CAAWa,iBAAX,CAA6BX,QAA7B,CADJ;AAEH,OAHD,MAGO;AACHG,QAAAA,WAAW,CAAC,UAAD,CAAX,GAA0B,IAA1B;AACH;;AAED,0BAAO,uBAAYA,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACH,KAvBwC;;AAAA,SAyBzCS,eAzByC,GAyBvB,CAACZ,QAAD,EAAWa,SAAX,EAAsBC,KAAtB,EAA6BC,IAAI,GAAG,EAApC,KAA2C;AACzD,YAAM;AAAER,QAAAA,WAAF;AAAeC,QAAAA,QAAf;AAAyBT,QAAAA;AAAzB,UAAsC,KAAKD,KAAjD;AAEA,YAAMkB,OAAO,GAAG,uBAAhB;AAEA,UAAIC,WAAW,GAAGD,OAAlB;;AACA,UAAI,CAACT,WAAD,IAAgBR,QAApB,EAA8B;AAC1BkB,QAAAA,WAAW,GAAGD,OAAO,GAAG,2BAAxB;AACH;;AACD,UAAIE,SAAS,GAAG;AACZb,QAAAA,SAAS,EAAEY,WADC;AAEZE,QAAAA,KAAK,EAAEJ;AAFK,OAAhB;;AAIA,UAAIR,WAAW,IAAIR,QAAnB,EAA6B;AACzBmB,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,IAAxB;AACH,OAFD,MAEO;AACHE,QAAAA,MAAM,CAACC,MAAP,CAAcH,SAAd,EAAyB;AACrBI,UAAAA,SAAS,EAAE3B,YADU;AAErB4B,UAAAA,QAAQ,EAAGC,KAAD,IACN,KAAK1B,KAAL,CAAW2B,cAAX,CACIzB,QADJ,EAEIc,KAFJ,EAGIU,KAAK,CAACE,MAAN,CAAaP,KAHjB;AAHiB,SAAzB;AASH;;AAED,UAAIQ,KAAJ;;AACA,UAAInB,QAAQ,IAAI,CAACD,WAAjB,EAA8B;AAC1B;AACAoB,QAAAA,KAAK,gBACD;AACI,UAAA,SAAS,EAAEX,OADf;AAEI,UAAA,SAAS,EAAErB,YAFf;AAGI,UAAA,QAAQ,EAAG6B,KAAD,IACN,KAAK1B,KAAL,CAAW8B,qBAAX,CACId,KADJ,EAEIU,KAAK,CAACE,MAAN,CAAaP,KAFjB,CAJR;AASI,UAAA,WAAW,EAAC,kBAThB;AAUI,UAAA,KAAK,EAAEN,SAAS,CAACE,IAAV,IAAkB;AAV7B;AAAA;AAAA;AAAA;AAAA,gBADJ;AAcH,OAhBD,MAgBO,IAAIF,SAAS,CAACE,IAAd,EAAoB;AACvB;AACAY,QAAAA,KAAK,gBACD;AAAK,UAAA,SAAS,EAAC,aAAf;AAA6B,UAAA,KAAK,EAAE;AAAEE,YAAAA,OAAO,EAAE;AAAX,WAApC;AAAA,kCAYI;AAAK,YAAA,SAAS,EAAC,KAAf;AAAA,mCACI;AACI,cAAA,SAAS,EAAEb,OADf;AAEI,cAAA,KAAK,EAAE;AACHc,gBAAAA,YAAY,EAAE,KADX;AAEHC,gBAAAA,YAAY,EAAE;AAFX,eAFX;AAMI,cAAA,KAAK,EAAElB,SAAS,CAACE,IANrB;AAOI,cAAA,QAAQ,EAAE;AAPd;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAZJ,eAuBI;AAAK,YAAA,SAAS,EAAC,KAAf;AAAA,mCACI,yBACQG,SADR;AAEI,cAAA,KAAK,EAAE;AAAEa,gBAAAA,YAAY,EAAE;AAAhB;AAFX;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAvBJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ;AAgCH,OAlCM,MAkCA;AACH;AACAJ,QAAAA,KAAK,gBAAG,yBAAcT;AAAd;AAAA;AAAA;AAAA;AAAA,gBAAR;AACH;;AAED,UAAIc,YAAY,GAAG,IAAnB;;AACA,UAAKxB,QAAQ,IAAI,CAACD,WAAd,IAA8BM,SAAS,CAACoB,MAA5C,EAAoD;AAChD,YAAI9B,WAAW,GAAG;AACdC,UAAAA,IAAI,EAAE,QADQ;AAEdC,UAAAA,SAAS,EAAE;AAFG,SAAlB;;AAIA,YAAIN,QAAJ,EAAc;AACVI,UAAAA,WAAW,CAAC,UAAD,CAAX,GAA0B,IAA1B;AACH,SAFD,MAEO;AACHA,UAAAA,WAAW,CAAC,SAAD,CAAX,GAAyB,MACrB,KAAKL,KAAL,CAAWoC,iBAAX,CAA6BlC,QAA7B,EAAuCc,KAAvC,CADJ;AAEH;;AACDkB,QAAAA,YAAY,gBACR;AAAK,UAAA,SAAS,EAAC,4BAAf;AAAA,iCACI,uBAAY7B;AAAZ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ;AAKH;;AAED,YAAMgC,YAAY,GACd,0BACCtB,SAAS,CAACoB,MAAV,GAAmB,SAAnB,GAA+B,SADhC,IAEA,aAHJ;AAKA,0BACI,QAAC,KAAD,CAAO,QAAP;AAAA,gCACI;AAAM,UAAA,SAAS,EAAEE,YAAjB;AAAA,oBAAgCrB,KAAK,GAAG;AAAxC;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEKa,KAFL,EAGKK,YAHL;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAOH,KA3IwC;;AAAA,SA6IzCI,WA7IyC,GA6I3B,MAAM;AAChB,YAAM;AAAEpC,QAAAA,QAAF;AAAYD,QAAAA;AAAZ,UAAyB,KAAKD,KAApC;AACA,YAAM;AAAEG,QAAAA;AAAF,UAAiBD,QAAvB;;AACA,UAAI,CAACC,UAAD,IAAeA,UAAU,CAACC,MAAX,KAAsB,CAAzC,EAA4C;AACxC,4BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH;;AAED,eAASc,OAAT,CAAiBF,KAAjB,EAAwB;AACpB,YAAIf,QAAQ,IAAIe,KAAK,KAAK,CAA1B,EAA6B;AACzB,iBAAO,aAAP;AACH,SAFD,MAEO;AACH,iBAAO,kBAAP;AACH;AACJ;;AAED,UAAIuB,OAAJ;;AACA,UAAI,KAAKvC,KAAL,CAAWU,QAAf,EAAyB;AACrB6B,QAAAA,OAAO,GAAGpC,UAAU,CAACqC,GAAX,CAAe,MAAM,EAArB,CAAV;AACH,OAFD,MAEO;AACHD,QAAAA,OAAO,GAAGrC,QAAQ,CAACqC,OAAnB;AACH;;AAED,aAAOpC,UAAU,CAACqC,GAAX,CAAe,CAACzB,SAAD,EAAYC,KAAZ,kBAClB;AAAiB,QAAA,SAAS,EAAEE,OAAO,CAACF,KAAD,CAAnC;AAAA,kBACK,KAAKF,eAAL,CACGZ,QADH,EAEGa,SAFH,EAGGC,KAHH,EAIGuB,OAAO,CAACvB,KAAD,CAJV;AADL,SAAUA,KAAV;AAAA;AAAA;AAAA;AAAA,cADG,CAAP;AAUH,KA7KwC;AAAA;;AA+KzCyB,EAAAA,MAAM,GAAG;AACL,wBACI,QAAC,KAAD,CAAO,QAAP;AAAA,iBACK,KAAK1C,iBAAL,EADL,EAEK,KAAKuC,WAAL,EAFL;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;;AAtLwC;;AAyL7C,SAASxC,oBAAT;AAEA,eAAe,SAAS4C,qBAAT,CAA+B1C,KAA/B,EAAsC;AACjD,QAAM;AAAEE,IAAAA,QAAF;AAAYO,IAAAA,WAAZ;AAAyBC,IAAAA,QAAzB;AAAmCT,IAAAA;AAAnC,MAAgDD,KAAtD;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAiBD,QAAvB;;AAEA,MAAI,CAACC,UAAD,IAAeA,UAAU,CAACC,MAAX,KAAsB,CAAzC,EAA4C;AACxC,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,MAAIuC,WAAW,GAAG,IAAlB;;AACA,MAAI,CAAC1C,QAAL,EAAe;AACX,QAAII,WAAW,GAAG;AACdC,MAAAA,IAAI,EAAE,QADQ;AAEdC,MAAAA,SAAS,EAAE;AAFG,KAAlB;AAIA,UAAMC,QAAQ,GACV,CAACR,KAAK,CAACS,WAAP,KACCT,KAAK,CAACU,QAAN,IAAkBP,UAAU,CAACQ,IAAX,CAAiBC,CAAD,IAAOA,CAAC,CAAC,QAAD,CAAxB,CADnB,CADJ;;AAGA,QAAIJ,QAAJ,EAAc;AACVH,MAAAA,WAAW,CAAC,SAAD,CAAX,GAAyB,MAAML,KAAK,CAACa,iBAAN,CAAwBX,QAAxB,CAA/B;AACH,KAFD,MAEO;AACHG,MAAAA,WAAW,CAAC,UAAD,CAAX,GAA0B,IAA1B;AACH;;AAEDsC,IAAAA,WAAW,gBAAG,uBAAYtC,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAd;AACH;;AAED,MAAIkC,OAAJ;;AACA,MAAI7B,QAAJ,EAAc;AACV6B,IAAAA,OAAO,GAAGpC,UAAU,CAACqC,GAAX,CAAe,MAAM,EAArB,CAAV;AACH,GAFD,MAEO;AACHD,IAAAA,OAAO,GAAGrC,QAAQ,CAACqC,OAAnB;AACH;;AAED,QAAMrB,OAAO,GAAG,uBAAhB;AACA,MAAIC,WAAW,GAAGD,OAAlB;;AACA,MAAI,CAACT,WAAD,IAAgBR,QAApB,EAA8B;AAC1BkB,IAAAA,WAAW,GAAGD,OAAO,GAAG,2BAAxB;AACH;;AAED,MAAI0B,KAAK,GAAGzC,UAAU,CAACqC,GAAX,CAAe,CAACzB,SAAD,EAAYC,KAAZ,KAAsB;AAC7C,QAAII,SAAS,GAAG;AACZb,MAAAA,SAAS,EAAEY,WADC;AAEZE,MAAAA,KAAK,EAAEkB,OAAO,CAACvB,KAAD;AAFF,KAAhB;;AAIA,QAAIP,WAAW,IAAIR,QAAnB,EAA6B;AACzBmB,MAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,IAAxB;AACH,KAFD,MAEO;AACHE,MAAAA,MAAM,CAACC,MAAP,CAAcH,SAAd,EAAyB;AACrBI,QAAAA,SAAS,EAAE3B,YADU;AAErB4B,QAAAA,QAAQ,EAAGC,KAAD,IACN1B,KAAK,CAAC2B,cAAN,CAAqBzB,QAArB,EAA+Bc,KAA/B,EAAsCU,KAAK,CAACE,MAAN,CAAaP,KAAnD;AAHiB,OAAzB;AAKH;;AAED,QAAIQ,KAAJ;;AACA,QAAInB,QAAQ,IAAI,CAACD,WAAjB,EAA8B;AAC1B;AACAoB,MAAAA,KAAK,gBACD;AACI,QAAA,SAAS,EAAEX,OADf;AAEI,QAAA,SAAS,EAAErB,YAFf;AAGI,QAAA,QAAQ,EAAG6B,KAAD,IACN1B,KAAK,CAAC8B,qBAAN,CAA4Bd,KAA5B,EAAmCU,KAAK,CAACE,MAAN,CAAaP,KAAhD,CAJR;AAMI,QAAA,WAAW,EAAC,kBANhB;AAOI,QAAA,KAAK,EAAEN,SAAS,CAACE,IAAV,IAAkB;AAP7B;AAAA;AAAA;AAAA;AAAA,cADJ;AAWH,KAbD,MAaO,IAAIF,SAAS,CAACE,IAAd,EAAoB;AACvB;AACAY,MAAAA,KAAK,gBACD;AAAK,QAAA,SAAS,EAAC,aAAf;AAA6B,QAAA,KAAK,EAAE;AAAEE,UAAAA,OAAO,EAAE;AAAX,SAApC;AAAA,gCAYI;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA,iCACI;AACI,YAAA,SAAS,EAAEb,OADf;AAEI,YAAA,KAAK,EAAE;AACHc,cAAAA,YAAY,EAAE,KADX;AAEHC,cAAAA,YAAY,EAAE;AAFX,aAFX;AAMI,YAAA,KAAK,EAAElB,SAAS,CAACE,IANrB;AAOI,YAAA,QAAQ,EAAE;AAPd;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAZJ,eAuBI;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA,iCACI,yBACQG,SAAS,CAACJ,KAAD,CADjB;AAEI,YAAA,KAAK,EAAE;AAAEiB,cAAAA,YAAY,EAAE;AAAhB;AAFX;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAvBJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAgCH,KAlCM,MAkCA;AACH;AACAJ,MAAAA,KAAK,gBAAG,yBAAcT,SAAS,CAACJ,KAAD;AAAvB;AAAA;AAAA;AAAA;AAAA,cAAR;AACH;;AAED,QAAIkB,YAAY,GAAG,IAAnB;;AACA,QAAKxB,QAAQ,IAAI,CAACD,WAAd,IAA8BM,SAAS,CAACoB,MAA5C,EAAoD;AAChD,UAAI9B,WAAW,GAAG;AACdC,QAAAA,IAAI,EAAE,QADQ;AAEdC,QAAAA,SAAS,EAAE;AAFG,OAAlB;;AAIA,UAAIN,QAAJ,EAAc;AACVI,QAAAA,WAAW,CAAC,UAAD,CAAX,GAA0B,IAA1B;AACH,OAFD,MAEO;AACHA,QAAAA,WAAW,CAAC,SAAD,CAAX,GAAyB,MACrB,KAAKL,KAAL,CAAWoC,iBAAX,CAA6BlC,QAA7B,EAAuCc,KAAvC,CADJ;AAEH;;AACDkB,MAAAA,YAAY,gBACR;AAAK,QAAA,SAAS,EAAC,4BAAf;AAAA,+BACI,uBAAY7B;AAAZ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ;AAKH;;AAED,UAAMgC,YAAY,GAAG,CACjB,kBADiB,EAEjB,SAAStB,SAAS,CAACoB,MAAV,GAAmB,SAAnB,GAA+B,SAAxC,CAFiB,EAGjB,YAHiB,CAArB;AAMA,UAAMU,UAAU,GAAG,gBAAgB7B,KAAhB,KAA0B,CAA1B,GAA8B,EAA9B,GAAmC,OAAtD;AAEA,wBACI;AAAiB,MAAA,SAAS,EAAE6B,UAA5B;AAAA,8BACI;AAAM,QAAA,SAAS,EAAER,YAAY,CAACS,IAAb,CAAkB,GAAlB,CAAjB;AAAA,kBAA0C9B,KAAK,GAAG;AAAlD;AAAA;AAAA;AAAA;AAAA,cADJ,EAEKa,KAFL,EAGKK,YAHL;AAAA,OAAUlB,KAAV;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH,GAtGW,CAAZ;AAwGA,sBACI,QAAC,KAAD,CAAO,QAAP;AAAA,eACKjB,iBAAiB,EADtB,EAEK6C,KAFL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;KArJuBF,qB","sourcesContent":["import React, { Component } from \"react\";\nimport { preventEnter } from \"../shared.js\";\n\nclass HighlightAnswerField extends Component {\n    renderClearButton = () => {\n        if (this.props.noChange) return null;\n\n        const { question } = this.props;\n        const { highlights } = question;\n        if (!highlights || highlights.length === 0) return null;\n\n        let buttonProps = {\n            type: \"button\",\n            className: \"btn btn-danger\",\n        };\n        const canClear =\n            !this.props.previewMode &&\n            (this.props.editMode || highlights.some((h) => h[\"byUser\"]));\n        if (canClear) {\n            buttonProps[\"onClick\"] = () =>\n                this.props.onClearHighlights(question);\n        } else {\n            buttonProps[\"disabled\"] = true;\n        }\n\n        return <button {...buttonProps}>Clear Highlights</button>;\n    };\n\n    renderHighlight = (question, highlight, index, text = \"\") => {\n        const { previewMode, editMode, noChange } = this.props;\n\n        const classes = \"form-control textarea\";\n\n        let textClasses = classes;\n        if (!previewMode && noChange) {\n            textClasses = classes + \" bg-transparent text-body\";\n        }\n        let textProps = {\n            className: textClasses,\n            value: text,\n        };\n        if (previewMode || noChange) {\n            textProps[\"disabled\"] = true;\n        } else {\n            Object.assign(textProps, {\n                onKeyDown: preventEnter,\n                onChange: (event) =>\n                    this.props.onAnswerChange(\n                        question,\n                        index,\n                        event.target.value\n                    ),\n            });\n        }\n\n        let input;\n        if (editMode && !previewMode) {\n            // editing the existing comment\n            input = (\n                <textarea\n                    className={classes}\n                    onKeyDown={preventEnter}\n                    onChange={(event) =>\n                        this.props.onChangeHighlightText(\n                            index,\n                            event.target.value\n                        )\n                    }\n                    placeholder=\"Existing comment\"\n                    value={highlight.text || \"\"}\n                />\n            );\n        } else if (highlight.text) {\n            // display the existing comment\n            input = (\n                <div className=\"flex-grow-1\" style={{ padding: \"0 0.75rem\" }}>\n                    {/*\n                    // the div will annoyingly go to the next line when wrapping,\n                    // so using a disabled textarea solves the problem very well.\n                    // but it feels a bit janky so i don't really like it.\n                    <div\n                        className=\"row input-group-text text-start text-wrap flex-grow-1\"\n                        style={{borderBottom: \"0px\", borderRadius: \"0 0.25rem 0 0\"}}\n                    >\n                        {highlight.text}\n                    </div>\n                    */}\n                    <div className=\"row\">\n                        <textarea\n                            className={classes}\n                            style={{\n                                borderBottom: \"0px\",\n                                borderRadius: \"0 0.25rem 0 0\",\n                            }}\n                            value={highlight.text}\n                            disabled={true}\n                        />\n                    </div>\n                    <div className=\"row\">\n                        <textarea\n                            {...textProps}\n                            style={{ borderRadius: \"0 0 0.25rem 0\" }}\n                        />\n                    </div>\n                </div>\n            );\n        } else {\n            // no existing comment\n            input = <textarea {...textProps} />;\n        }\n\n        let deleteButton = null;\n        if ((editMode && !previewMode) || highlight.byUser) {\n            let buttonProps = {\n                type: \"button\",\n                className: \"btn-close btn-close-white\",\n            };\n            if (noChange) {\n                buttonProps[\"disabled\"] = true;\n            } else {\n                buttonProps[\"onClick\"] = () =>\n                    this.props.onDeleteHighlight(question, index);\n            }\n            deleteButton = (\n                <div className=\"input-group-text bg-danger\">\n                    <button {...buttonProps} />\n                </div>\n            );\n        }\n\n        const labelClasses =\n            \"input-group-text bg-\" +\n            (highlight.byUser ? \"success\" : \"primary\") +\n            \" text-light\";\n\n        return (\n            <React.Fragment>\n                <span className={labelClasses}>{index + 1}</span>\n                {input}\n                {deleteButton}\n            </React.Fragment>\n        );\n    };\n\n    renderField = () => {\n        const { question, noChange } = this.props;\n        const { highlights } = question;\n        if (!highlights || highlights.length === 0) {\n            return <p>No highlights</p>;\n        }\n\n        function classes(index) {\n            if (noChange && index === 0) {\n                return \"input-group\";\n            } else {\n                return \"input-group mt-2\";\n            }\n        }\n\n        let answers;\n        if (this.props.editMode) {\n            answers = highlights.map(() => \"\");\n        } else {\n            answers = question.answers;\n        }\n\n        return highlights.map((highlight, index) => (\n            <div key={index} className={classes(index)}>\n                {this.renderHighlight(\n                    question,\n                    highlight,\n                    index,\n                    answers[index]\n                )}\n            </div>\n        ));\n    };\n\n    render() {\n        return (\n            <React.Fragment>\n                {this.renderClearButton()}\n                {this.renderField()}\n            </React.Fragment>\n        );\n    }\n}\n\nexport { HighlightAnswerField };\n\nexport default function HighlightAnswerField2(props) {\n    const { question, previewMode, editMode, noChange } = props;\n    const { highlights } = question;\n\n    if (!highlights || highlights.length === 0) {\n        return <p>No highlights</p>;\n    }\n\n    let clearButton = null;\n    if (!noChange) {\n        let buttonProps = {\n            type: \"button\",\n            className: \"btn btn-danger\",\n        };\n        const canClear =\n            !props.previewMode &&\n            (props.editMode || highlights.some((h) => h[\"byUser\"]));\n        if (canClear) {\n            buttonProps[\"onClick\"] = () => props.onClearHighlights(question);\n        } else {\n            buttonProps[\"disabled\"] = true;\n        }\n\n        clearButton = <button {...buttonProps}>Clear Highlights</button>;\n    }\n\n    let answers;\n    if (editMode) {\n        answers = highlights.map(() => \"\");\n    } else {\n        answers = question.answers;\n    }\n\n    const classes = \"form-control textarea\";\n    let textClasses = classes;\n    if (!previewMode && noChange) {\n        textClasses = classes + \" bg-transparent text-body\";\n    }\n\n    let field = highlights.map((highlight, index) => {\n        let textProps = {\n            className: textClasses,\n            value: answers[index],\n        };\n        if (previewMode || noChange) {\n            textProps[\"disabled\"] = true;\n        } else {\n            Object.assign(textProps, {\n                onKeyDown: preventEnter,\n                onChange: (event) =>\n                    props.onAnswerChange(question, index, event.target.value),\n            });\n        }\n\n        let input;\n        if (editMode && !previewMode) {\n            // editing the existing comment\n            input = (\n                <textarea\n                    className={classes}\n                    onKeyDown={preventEnter}\n                    onChange={(event) =>\n                        props.onChangeHighlightText(index, event.target.value)\n                    }\n                    placeholder=\"Existing comment\"\n                    value={highlight.text || \"\"}\n                />\n            );\n        } else if (highlight.text) {\n            // display the existing comment\n            input = (\n                <div className=\"flex-grow-1\" style={{ padding: \"0 0.75rem\" }}>\n                    {/*\n                    // the div will annoyingly go to the next line when wrapping,\n                    // so using a disabled textarea solves the problem very well.\n                    // but it feels a bit janky so i don't really like it.\n                    <div\n                        className=\"row input-group-text text-start text-wrap flex-grow-1\"\n                        style={{borderBottom: \"0px\", borderRadius: \"0 0.25rem 0 0\"}}\n                    >\n                        {highlight.text}\n                    </div>\n                    */}\n                    <div className=\"row\">\n                        <textarea\n                            className={classes}\n                            style={{\n                                borderBottom: \"0px\",\n                                borderRadius: \"0 0.25rem 0 0\",\n                            }}\n                            value={highlight.text}\n                            disabled={true}\n                        />\n                    </div>\n                    <div className=\"row\">\n                        <textarea\n                            {...textProps(index)}\n                            style={{ borderRadius: \"0 0 0.25rem 0\" }}\n                        />\n                    </div>\n                </div>\n            );\n        } else {\n            // no existing comment\n            input = <textarea {...textProps(index)} />;\n        }\n\n        let deleteButton = null;\n        if ((editMode && !previewMode) || highlight.byUser) {\n            let buttonProps = {\n                type: \"button\",\n                className: \"btn-close btn-close-white\",\n            };\n            if (noChange) {\n                buttonProps[\"disabled\"] = true;\n            } else {\n                buttonProps[\"onClick\"] = () =>\n                    this.props.onDeleteHighlight(question, index);\n            }\n            deleteButton = (\n                <div className=\"input-group-text bg-danger\">\n                    <button {...buttonProps} />\n                </div>\n            );\n        }\n\n        const labelClasses = [\n            \"input-group-text\",\n            \"bg-\" + (highlight.byUser ? \"success\" : \"primary\"),\n            \"text-light\",\n        ];\n\n        const divClasses = \"input-group\" + index === 0 ? \"\" : \" mt-2\";\n\n        return (\n            <div key={index} className={divClasses}>\n                <span className={labelClasses.join(\" \")}>{index + 1}</span>\n                {input}\n                {deleteButton}\n            </div>\n        );\n    });\n\n    return (\n        <React.Fragment>\n            {renderClearButton()}\n            {field}\n        </React.Fragment>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}