{"ast":null,"code":"var _jsxFileName = \"/Users/josephlou/Documents/Files/Princeton/grading/grader-drill-app/client/src/App/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Switch, Route, Link, useParams } from \"react-router-dom\";\nimport GradingDashboard from \"./components/dashboardView\";\nimport GradingView from \"./components/gradingView\";\nimport QuestionsView from \"./components/questionsView\";\nimport QuestionEditView from \"./components/questionEditView\";\nimport Question from \"./components/question\";\nimport \"./App.css\";\n/*\n// saving this just in case i want to use this code for database stuff\n\nupdateQuestion = (question) => {\n    let found = false;\n    let answered = this.state.answered.map((q) => {\n        if (q.trainee === question.trainee && q.id === question.id) {\n            found = true;\n            return question;\n        }\n        return q;\n    });\n    if (!found) {\n        return;\n    }\n    this.setState({ answered: answered });\n};\n\nhandleAddHighlight = (question, highlight) => {\n    let highlights = [...question.highlights];\n    highlights.push(highlight);\n    let answers = [...question.answers];\n    answers.push(\"\");\n    question[\"highlights\"] = highlights;\n    question[\"answers\"] = answers;\n    this.updateQuestion(question);\n};\n\nhandleClearHighlights = (question) => {\n    let highlights = [];\n    let answers = [];\n    question.highlights.forEach((h, i) => {\n        if (!h.byUser) {\n            highlights.push(h);\n            answers.push(question.answers[i]);\n        }\n    });\n    question[\"highlights\"] = highlights;\n    question[\"answers\"] = answers;\n    this.updateQuestion(question);\n};\n\nhandleDeleteHighlight = (question, highlightIndex) => {\n    let highlights = [...question.highlights];\n    highlights.splice(highlightIndex, 1);\n    let answers = [...question.answers];\n    answers.splice(highlightIndex, 1);\n    question[\"highlights\"] = highlights;\n    question[\"answers\"] = answers;\n    this.updateQuestion(question);\n};\n\nhandleAnswerChange = (question, answerIndex, value) => {\n    let answers = [...question.answers];\n    answers[answerIndex] = value;\n    question[\"answers\"] = answers;\n    this.updateQuestion(question);\n};\n\nhandleMCSelect = (question, answerIndex) => {\n    question[\"answer\"] = answerIndex;\n    this.updateQuestion(question);\n};\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [hideGraded, setHideGraded] = useState(false);\n\n  function handleHideGraded() {\n    setHideGraded(!hideGraded);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"navbar navbar-expand-lg navbar-light bg-light\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-fluid\",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          className: \"navbar-brand\",\n          children: \"Grader Drill\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"collapse navbar-collapse\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"navbar-nav\",\n            children: [/*#__PURE__*/_jsxDEV(Link, {\n              to: \"/\",\n              className: \"nav-link\",\n              children: \"Dashboard\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/grading\",\n              className: \"nav-link\",\n              children: \"Grading\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/questions\",\n              className: \"nav-link\",\n              children: \"Questions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        children: /*#__PURE__*/_jsxDEV(GradingDashboard, {\n          hideGraded: hideGraded,\n          onHideGraded: handleHideGraded\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/grading\",\n        children: /*#__PURE__*/_jsxDEV(GradingView, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/grading/:trainee/:questionId\",\n        children: /*#__PURE__*/_jsxDEV(GradingView, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/questions\",\n        children: /*#__PURE__*/_jsxDEV(QuestionsView, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/questions/new\",\n        children: /*#__PURE__*/_jsxDEV(QuestionEditView, {\n          newQuestion: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/questions/edit/:questionId\",\n        children: /*#__PURE__*/_jsxDEV(EditQuestion, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/question\",\n        children: /*#__PURE__*/_jsxDEV(ShowQuestion, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"*\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Page not found\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"JTzrWZW4c73CGRnaqz1w5RyMJFU=\");\n\n_c = App;\n\nconst ShowQuestion = () => {\n  _s2();\n\n  const [question, setQuestion] = useState({\n    id: null\n  });\n  const questionId = 1;\n  useEffect(() => {\n    let isMounted = true;\n    fetch(`/api/getQuestion/${questionId}`).then(res => res.json()).then(q => {\n      if (isMounted) {\n        console.log(\"got question\");\n        setQuestion(q);\n      }\n    });\n    return () => {\n      isMounted = false;\n    };\n  }, [questionId]);\n  return /*#__PURE__*/_jsxDEV(Question, {\n    question: question\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 12\n  }, this);\n};\n\n_s2(ShowQuestion, \"Jz90X6iSSUAVZXKTyq/S/v4UkdI=\");\n\n_c2 = ShowQuestion;\n\nfunction EditQuestion(eventHandlers) {\n  _s3();\n\n  const {\n    questionId\n  } = useParams();\n  return /*#__PURE__*/_jsxDEV(QuestionEditView, {\n    newQuestion: false,\n    questionId: questionId,\n    ...eventHandlers\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 9\n  }, this);\n}\n\n_s3(EditQuestion, \"lUaPE6BoIdosngACi+3QMTlq4F4=\", false, function () {\n  return [useParams];\n});\n\n_c3 = EditQuestion;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"ShowQuestion\");\n$RefreshReg$(_c3, \"EditQuestion\");","map":{"version":3,"sources":["/Users/josephlou/Documents/Files/Princeton/grading/grader-drill-app/client/src/App/App.js"],"names":["React","useState","useEffect","Switch","Route","Link","useParams","GradingDashboard","GradingView","QuestionsView","QuestionEditView","Question","App","hideGraded","setHideGraded","handleHideGraded","ShowQuestion","question","setQuestion","id","questionId","isMounted","fetch","then","res","json","q","console","log","EditQuestion","eventHandlers"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Switch, Route, Link, useParams } from \"react-router-dom\";\nimport GradingDashboard from \"./components/dashboardView\";\nimport GradingView from \"./components/gradingView\";\nimport QuestionsView from \"./components/questionsView\";\nimport QuestionEditView from \"./components/questionEditView\";\nimport Question from \"./components/question\";\nimport \"./App.css\";\n\n/*\n// saving this just in case i want to use this code for database stuff\n\nupdateQuestion = (question) => {\n    let found = false;\n    let answered = this.state.answered.map((q) => {\n        if (q.trainee === question.trainee && q.id === question.id) {\n            found = true;\n            return question;\n        }\n        return q;\n    });\n    if (!found) {\n        return;\n    }\n    this.setState({ answered: answered });\n};\n\nhandleAddHighlight = (question, highlight) => {\n    let highlights = [...question.highlights];\n    highlights.push(highlight);\n    let answers = [...question.answers];\n    answers.push(\"\");\n    question[\"highlights\"] = highlights;\n    question[\"answers\"] = answers;\n    this.updateQuestion(question);\n};\n\nhandleClearHighlights = (question) => {\n    let highlights = [];\n    let answers = [];\n    question.highlights.forEach((h, i) => {\n        if (!h.byUser) {\n            highlights.push(h);\n            answers.push(question.answers[i]);\n        }\n    });\n    question[\"highlights\"] = highlights;\n    question[\"answers\"] = answers;\n    this.updateQuestion(question);\n};\n\nhandleDeleteHighlight = (question, highlightIndex) => {\n    let highlights = [...question.highlights];\n    highlights.splice(highlightIndex, 1);\n    let answers = [...question.answers];\n    answers.splice(highlightIndex, 1);\n    question[\"highlights\"] = highlights;\n    question[\"answers\"] = answers;\n    this.updateQuestion(question);\n};\n\nhandleAnswerChange = (question, answerIndex, value) => {\n    let answers = [...question.answers];\n    answers[answerIndex] = value;\n    question[\"answers\"] = answers;\n    this.updateQuestion(question);\n};\n\nhandleMCSelect = (question, answerIndex) => {\n    question[\"answer\"] = answerIndex;\n    this.updateQuestion(question);\n};\n*/\n\nexport default function App() {\n    const [hideGraded, setHideGraded] = useState(false);\n\n    function handleHideGraded() {\n        setHideGraded(!hideGraded);\n    }\n\n    return (\n        <div className=\"App\">\n            {/* navbar */}\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                <div className=\"container-fluid\">\n                    <Link to=\"/\" className=\"navbar-brand\">\n                        Grader Drill\n                    </Link>\n                    <div className=\"collapse navbar-collapse\">\n                        <div className=\"navbar-nav\">\n                            <Link to=\"/\" className=\"nav-link\">\n                                Dashboard\n                            </Link>\n                            <Link to=\"/grading\" className=\"nav-link\">\n                                Grading\n                            </Link>\n                            <Link to=\"/questions\" className=\"nav-link\">\n                                Questions\n                            </Link>\n                        </div>\n                    </div>\n                </div>\n            </nav>\n\n            <Switch>\n                {/* dashboard (home) */}\n                <Route exact path=\"/\">\n                    <GradingDashboard\n                        hideGraded={hideGraded}\n                        onHideGraded={handleHideGraded}\n                    />\n                </Route>\n\n                {/* grading */}\n                <Route exact path=\"/grading\">\n                    <GradingView />\n                </Route>\n                <Route path=\"/grading/:trainee/:questionId\">\n                    <GradingView />\n                </Route>\n\n                {/* questions */}\n                <Route exact path=\"/questions\">\n                    <QuestionsView />\n                </Route>\n                <Route exact path=\"/questions/new\">\n                    <QuestionEditView newQuestion={true} />\n                </Route>\n                <Route path=\"/questions/edit/:questionId\">\n                    <EditQuestion />\n                </Route>\n\n                {/* for testing */}\n                <Route path=\"/question\">\n                    <ShowQuestion />\n                </Route>\n\n                {/* catch-all for page not found */}\n                <Route path=\"*\">\n                    <h1>Page not found</h1>\n                </Route>\n            </Switch>\n        </div>\n    );\n}\n\nconst ShowQuestion = () => {\n    const [question, setQuestion] = useState({ id: null });\n    const questionId = 1;\n    useEffect(() => {\n        let isMounted = true;\n        fetch(`/api/getQuestion/${questionId}`)\n            .then((res) => res.json())\n            .then((q) => {\n                if (isMounted) {\n                    console.log(\"got question\");\n                    setQuestion(q);\n                }\n            });\n        return () => {\n            isMounted = false;\n        };\n    }, [questionId]);\n    return <Question question={question} />;\n};\n\nfunction EditQuestion(eventHandlers) {\n    const { questionId } = useParams();\n    return (\n        <QuestionEditView\n            newQuestion={false}\n            questionId={questionId}\n            {...eventHandlers}\n        />\n    );\n}\n"]},"metadata":{},"sourceType":"module"}